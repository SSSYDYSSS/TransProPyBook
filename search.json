[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TransProPyBook",
    "section": "",
    "text": "Preface\nTo learn more about TransProPy visit https://github.com/SSSYDYSSS/TransProPy."
  },
  {
    "objectID": "index.html#utilsfunction",
    "href": "index.html#utilsfunction",
    "title": "TransProPyBook",
    "section": "UtilsFunction*",
    "text": "UtilsFunction*\n\n\n\n\n\n\nNote\n\n\n\n\nThese functions usually contain various utilities and helper functions, which can sometimes be considered as low-level functionalities.\n\n\n\n\n\nUtilsFunction1\n\n\n\nAuc.py\nAutoNorm.py\nFeatureRanking.py\nNewFeatureRanking.py\nLoadData.py\nPrintResults.py\nFilterSamples.py\nGeneNames.py\nGeneToFeatureMapping.py\n\n\n\nUtilsFunction2\n\n\n\nsplitdata.py\nLogTransform.py\n\n\n\nUtilsFunction3\n\n\n\nLoadFilterTranspose.py\nLoadEncodeLabels.py\nExtractCommonSamples.py\nLoadAndPreprocessData.py\nSetupLoggingAndProgressBar.py\nUpdateProgressBar.py\nLoggingCustomScorer.py\nTqdmCustomScorer.py\nTrainModel.py\nEnsembleForRFE.py\nSetupFeatureSelection.py\nPrintBoxedText.py\nExtractAndSaveResults.py"
  },
  {
    "objectID": "index.html#main-function",
    "href": "index.html#main-function",
    "title": "TransProPyBook",
    "section": "*main Function",
    "text": "*main Function\n\n\n\n\n\n\nTip\n\n\n\n\nThe main function constructed with the help of auxiliary functions.\n\n\n\n\n\nMACFCmain\n\n\n\nParameters\nReturns\nFunction Principle Explanation\nUsage Workflow\nUsage of MACFCmain (Significant correlation)\nUsage of MACFCmain (Insignificant correlation)\nReferences\n\n\n\nNewMACFCmain\n\n\n\nParameters\nReturns\nFunction Principle Explanation\nUsage Workflow\nUsage of New_MACFCmain (four_methods_degs_union)\nUsage of New_MACFCmain (all_count_exp)\nReferences\n\n\n\nAutogluonTimeLimit\n\n\n\nParameters\nReturns\nUsage of Autogluon_TimeLimit\nInsignificant Correlation\nSignificant Correlation\nReferences\n\n\n\nAutoGluonSelectML\n\n\n\nParameters\nReturns\nUsage of Autogluon_SelectML\nInsignificant Correlation\nSignificant Correlation\nReferences\n\n\n\nAutoFeatureSelection\n\n\n\nParameters\nPlease note\nDescription\nUsage"
  },
  {
    "objectID": "index.html#comparison-of-transpropy-with-other-tool-packages",
    "href": "index.html#comparison-of-transpropy-with-other-tool-packages",
    "title": "TransProPyBook",
    "section": "Comparison of TransPropy with Other Tool Packages",
    "text": "Comparison of TransPropy with Other Tool Packages\n\n\nfunkyheatmap\nPercentage Stacked Line Bar Chart\nRidge Plot\nCFD FullGSEA\nANKRD35 FullGSEA\nALOXE3 FullGSEA\nGeneCount and GseaNES\nSeprate All GSEA\nVennNetwork core enrichment\nCircosBar core enrichment"
  },
  {
    "objectID": "index.html#citation",
    "href": "index.html#citation",
    "title": "TransProPyBook",
    "section": "Citation",
    "text": "Citation\nYu Dongyue (2023). TransProPy: A python package that integrate algorithms and various machine learning approaches to extract features (genes) effective for classification and attribute them accordingly. https://github.com/SSSYDYSSS/TransProPy, https://sssydysss.gitbook.io/transpropy-manual/."
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "TransProPyBook",
    "section": "License",
    "text": "License\nThis project is licensed under the BSD 3-Clause License - see the https://github.com/SSSYDYSSS/TransProPy/blob/main/LICENSE.txt file for details."
  },
  {
    "objectID": "UtilsFunction1.html#auc.py",
    "href": "UtilsFunction1.html#auc.py",
    "title": "1  UtilsFunction1",
    "section": "1.1 Auc.py",
    "text": "1.1 Auc.py\nAssists the MACFCmain function in calculating AUC, obtaining Feature Frequency, and performing sorting.\n\n1.1.1 Introduction\n\n\nIn this function, features that appear with high frequency indicate their presence in multiple optimal feature sets.\nEach optimal feature set is determined by calculating its Area Under the Receiver Operating Characteristic (ROC) Curve (AUC), which is a common measure for evaluating classifier performance.\nDuring each iteration of the loop, an optimal feature set with the highest average AUC value is selected.\nFeatures from this set are then added to a rank list, known as ‘ranklist,’ and when necessary, also to a set named ‘rankset’.\n\n\n\n\n1.1.2 Usage\nauc(tlofe, ne, n0, n1)"
  },
  {
    "objectID": "UtilsFunction1.html#autonorm.py",
    "href": "UtilsFunction1.html#autonorm.py",
    "title": "1  UtilsFunction1",
    "section": "1.2 AutoNorm.py",
    "text": "1.2 AutoNorm.py\nNormalization Function The auto_norm function is designed to normalize a two-dimensional array (matrix). The purpose of normalization is generally to bring all features into the same numerical range, facilitating subsequent analysis or model training.\n\n1.2.1 Parameters\n\n\ndata: ndarray\n\nOrder Requirements for Input Data：\n1.This function does indeed have specific requirements for the row and column order of the input matrix data. Rows should represent individual samples, and columns should represent different features. In other words, each row vector represents a sample containing multiple features.\n2.Each column of the matrix will be independently normalized, so different features should be placed in separate columns.\n\n\n\n\n\n1.2.2 Returns\n\n\nnorm_data: ndarray\n\nIt is the normalized data.\n\n\n\n\n\n1.2.3 Usage\nauto_norm(data)"
  },
  {
    "objectID": "UtilsFunction1.html#featureranking.py",
    "href": "UtilsFunction1.html#featureranking.py",
    "title": "1  UtilsFunction1",
    "section": "1.3 FeatureRanking.py",
    "text": "1.3 FeatureRanking.py\n\n1.3.1 Introduction\n\n\nHigh-Frequency Features and Performance: Because features in each set are chosen based on their contribution to classifier performance, high-frequency features are likely to perform well. In other words, if a feature appears in multiple optimal feature sets, it may have a significant impact on the performance of the classifier.\nNote on Low-Frequency Features: However, it’s important to note that a low frequency of a feature does not necessarily mean it is unimportant. The importance of a feature may depend on how it combines with other features. Additionally, the outcome of feature selection may be influenced by the characteristics of the dataset and random factors. Therefore, the frequency provided by this function should only be used as a reference and is not an absolute indicator of feature performance.\n\n\n\n\n1.3.2 Returns\n\n\nFName\nFauc\nrankset\nranklist\n\n\n\n\n1.3.3 Usage\nfeature_ranking(f, c, max_rank, pos, neg, n0, n1)"
  },
  {
    "objectID": "UtilsFunction1.html#newfeatureranking.py",
    "href": "UtilsFunction1.html#newfeatureranking.py",
    "title": "1  UtilsFunction1",
    "section": "1.4 NewFeatureRanking.py",
    "text": "1.4 NewFeatureRanking.py\n\n1.4.1 Change Summary\n\n\nTo store features with AUC greater than AUC_threshold and their AUC values\nExclude features with AUC greater than AUC_threshold from the original set.\n Sort and process the remaining features\n\n\n\n\n1.4.2 Returns\n\n\nhigh_auc_features\nFName\nFauc\nrankset\nranklist\n\n\n\n\n1.4.3 Usage\nfeature_ranking(f, c, AUC_threshold, max_rank, pos, neg, n0, n1)"
  },
  {
    "objectID": "UtilsFunction1.html#loaddata.py",
    "href": "UtilsFunction1.html#loaddata.py",
    "title": "1  UtilsFunction1",
    "section": "1.5 LoadData.py",
    "text": "1.5 LoadData.py\nData Reading and Transformation.\n\n1.5.1 Introduction\n\n\nData normalization for constant value.\nExtract matrix data and categorical data.\n\n\n\n\n1.5.2 Parameters\n\n\nlable_name: string\n\nFor example: gender, age, altitude, temperature, quality, and other categorical variable names.\n\ndata_path: string\n\nFor example: ‘../data/gene_tpm.csv’\nPlease note: Preprocess the input data in advance to remove samples that contain too many missing values or zeros.\nThe input data matrix should have genes as rows and samples as columns.\n\nlabel_path: string\n\nFor example: ‘../data/tumor_class.csv’\nPlease note: The input CSV data should have rows representing sample names and columns representing class names.\nThe input sample categories must be in a numerical binary format, such as: 1,2,1,1,2,2,1.\nIn this case, the numerical values represent the following classifications: 1: male; 2: female.\n\nthreshold: float\n\nFor example: 0.9\nThe set threshold indicates the proportion of non-zero value samples to all samples in each feature.\n\n\n\n\n\n1.5.3 Returns\n\n\ntranspose(f): ndarray\n\nA transposed feature-sample matrix.\n\nc: ndarray\n\nA NumPy array containing classification labels.\n\n\n\n\n\n1.5.4 Usage\nload_data(\n    lable_name, \n    threshold, \n    data_path='../data/gene_tpm.csv', \n    label_path='../data/tumor_class.csv'\n    )"
  },
  {
    "objectID": "UtilsFunction1.html#printresults.py",
    "href": "UtilsFunction1.html#printresults.py",
    "title": "1  UtilsFunction1",
    "section": "1.6 PrintResults.py",
    "text": "1.6 PrintResults.py\n\n1.6.1 Returns\n\n\nfr: list of strings\n\nRepresenting ranked features.\n\nfre1: dictionary\n\nFeature names as keys and their frequencies as values.\n\nfrequency: list of tuples\n\nFeature names and their frequencies.\n\nlen(FName): integer\n\nCount of AUC values greater than 0.5.\n\nFName: array of strings\n\nFeature names after ranking with AUC &gt; 0.5.\n\nFauc: array of floats\n\nAUC values corresponding to the ranked feature names.\n\n\n\n\n\n1.6.2 Usage\n print_results(fr, fre1, frequency, len_FName, FName, Fauc)"
  },
  {
    "objectID": "UtilsFunction1.html#filtersamples.py",
    "href": "UtilsFunction1.html#filtersamples.py",
    "title": "1  UtilsFunction1",
    "section": "1.7 FilterSamples.py",
    "text": "1.7 FilterSamples.py\nRemove samples with high zero expression.\n\n1.7.1 Parameters\n\n\ndata_path: string\n\nFor example: ‘../data/gene_tpm.csv’\nPlease note: The input data matrix should have genes as rows and samples as columns.\n\nthreshold: float\n\nFor example: 0.9\nThe set threshold indicates the proportion of non-zero value samples to all samples in each feature.\n\n\n\n\n\n1.7.2 Return\n\n\nX: pandas.core.frame.DataFrame\n\n\n\n\n1.7.3 Usage\nfilter_samples(threshold, data_path='../data/gene_tpm.csv')"
  },
  {
    "objectID": "UtilsFunction1.html#genenames.py",
    "href": "UtilsFunction1.html#genenames.py",
    "title": "1  UtilsFunction1",
    "section": "1.8 GeneNames.py",
    "text": "1.8 GeneNames.py\nExtract gene_names data.\n\n1.8.1 Parameters\n\n\ndata_path: string\n\nFor example: ‘../data/gene_tpm.csv’\nPlease note: Preprocess the input data in advance to remove samples that contain too many missing values or zeros.\nThe input data matrix should have genes as rows and samples as columns.\n\n\n\n\n\n1.8.2 Return\n\n\ngene_names: list\n\n\n\n\n1.8.3 Usage\ngene_name(data_path='../data/gene_tpm.csv')"
  },
  {
    "objectID": "UtilsFunction1.html#genetofeaturemapping.py",
    "href": "UtilsFunction1.html#genetofeaturemapping.py",
    "title": "1  UtilsFunction1",
    "section": "1.9 GeneToFeatureMapping.py",
    "text": "1.9 GeneToFeatureMapping.py\ngene map feature.\n\n1.9.1 Parameters\n\n\ngene_names: list\n\nFor example: [‘GeneA’, ‘GeneB’, ‘GeneC’, ‘GeneD’, ‘GeneE’]\ncontaining strings\n\nranked_features: list\n\nFor example: [2, 0, 1]\ncontaining integers\n\n\n\n\n\n1.9.2 Return\n\n\ngene_to_feature_mapping: dictionary\n\ngene_to_feature_mapping is a Python dictionary type. It is used to map gene names to their corresponding feature (or ranked feature) names.\n\n\n\n\n\n1.9.3 Usage\ngene_map_feature(gene_names, ranked_features)"
  },
  {
    "objectID": "UtilsFunction1.html#references",
    "href": "UtilsFunction1.html#references",
    "title": "1  UtilsFunction1",
    "section": "1.10 References",
    "text": "1.10 References\n\n\nSu,Y., Du,K., Wang,J., Wei,J. and Liu,J. (2022) Multi-variable AUC for sifting complementary features and its biomedical application. Briefings in Bioinformatics, 23, bbac029."
  },
  {
    "objectID": "UtilsFunction2.html#splitdata.py",
    "href": "UtilsFunction2.html#splitdata.py",
    "title": "2  UtilsFunction2",
    "section": "2.1 splitdata.py",
    "text": "2.1 splitdata.py\nReads the gene expression and class data, processes it, and splits it into training and testing sets.\n\n2.1.1 Parameters\n\n\ngene_data_path (str):\n\nPath to the CSV file containing the gene expression data.\nFor example: ‘../data/gene_tpm.csv’\n\nclass_data_path (str):\n\nPath to the CSV file containing the class data.\nFor example: ‘../data/tumor_class.csv’\n\nclass_name (str):\n\nThe name of the class column in the class data.\n\ntest_size (float, optional):\n\nThe proportion of the data to be used as the testing set.\nDefault is 0.2.\n\nrandom_state (int, optional):\n\nThe seed used by the random number generator.\nDefault is 42.\n\nthreshold (float, optional):\n\nThe threshold used to filter out rows based on the proportion of non-zero values.\nDefault is 0.9.\n\nrandom_feature (int, optional):\n\nThe number of random feature to select. If None, no random feature selection is performed.\nDefault is None.\n\n\n\n\n\n2.1.2 Returns\n\n\ntrain_data (pd.DataFrame):\n\nThe training data.\n\ntest_data (pd.DataFrame):\n\nThe testing data.\n\n\n\n\n\n2.1.3 Usage\nsplit_data(\n    gene_data_path='../data/gene_tpm.csv', \n    class_data_path='../data/tumor_class.csv', \n    class_name, \n    test_size=0.2, \n    random_state=42, \n    threshold=0.9, \n    random_feature=None\n    )"
  },
  {
    "objectID": "UtilsFunction2.html#logtransform.py",
    "href": "UtilsFunction2.html#logtransform.py",
    "title": "2  UtilsFunction2",
    "section": "2.2 LogTransform.py",
    "text": "2.2 LogTransform.py\nEvaluate and potentially apply log2 transformation to data. - This function checks data against a set of criteria to determine if a log2 transformation is needed, applying the transformation if necessary.\n\n2.2.1 Parameters\n\n\ndata (np.ndarray):\n\nA numerical numpy array.\n\n\n\n\n\n2.2.2 Returns\n\n\nresult np.ndarray\n\nThe original data or the data transformed with log2.\n\n\n\n\n\n2.2.3 Usage\nlog_transform(\n    data\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#loadfiltertranspose.py",
    "href": "UtilsFunction3.html#loadfiltertranspose.py",
    "title": "3  UtilsFunction3",
    "section": "3.1 LoadFilterTranspose.py",
    "text": "3.1 LoadFilterTranspose.py\nRemove samples with high zero expression.\n\n3.1.1 Parameters\n\n\ndata_path: string:\n\nFor example: ‘../data/gene_tpm.csv’\nPlease note: The input data matrix should have genes as rows and samples as columns.\n\nthreshold: float:\n\nFor example: 0.9\nThe set threshold indicates the proportion of non-zero value samples to all samples in each feature.\n\n\n\n\n\n3.1.2 Returns\n\n\nX (pandas.core.frame.DataFrame):\n\n\n\n\n3.1.3 Usage\nload_filter_transpose(\n    threshold=0.9, \n    data_path='../data/gene_tpm.csv'\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#loadencodelabels.py",
    "href": "UtilsFunction3.html#loadencodelabels.py",
    "title": "3  UtilsFunction3",
    "section": "3.2 LoadEncodeLabels.py",
    "text": "3.2 LoadEncodeLabels.py\nReads a CSV file containing labels and encodes categorical labels in the specified column to numeric labels.\n\n3.2.1 Parameters\n\n\nfile_path (str):\n\nPath to the CSV file containing labels.\n\ncolumn_name (str):\n\nName of the column to be encoded.\n\n\n\n\n\n3.2.2 Returns\n\n\nY (pd.DataFrame):\n\nA DataFrame containing the encoded numeric labels.\n\n\n\n\n\n3.2.3 Usage\nload_encode_labels(\n    file_path='../data/class.csv', \n    column_name='class'\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#extractcommonsamples.py",
    "href": "UtilsFunction3.html#extractcommonsamples.py",
    "title": "3  UtilsFunction3",
    "section": "3.3 ExtractCommonSamples.py",
    "text": "3.3 ExtractCommonSamples.py\nExtracts common samples (rows) from two DataFrames based on their indices.\n\n3.3.1 Parameters\n\n\nX (pd.DataFrame):\n\nFirst DataFrame.\n\nY (pd.DataFrame):\n\nSecond DataFrame.\n\n\n\n\n\n3.3.2 Returns\n\n\nX_common, Y_common (pd.DataFrame):\n\nTwo DataFrames containing only the rows that are common in both.\n\n\n\n\n\n3.3.3 Usage\nextract_common_samples(\n    X, \n    Y\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#loadandpreprocessdata.py",
    "href": "UtilsFunction3.html#loadandpreprocessdata.py",
    "title": "3  UtilsFunction3",
    "section": "3.4 LoadAndPreprocessData.py",
    "text": "3.4 LoadAndPreprocessData.py\nLoad and preprocess the data.\n\n3.4.1 Parameters\n\n\nfeature_file: str:\n\nPath to the feature data file.\n\nlabel_file: str:\n\nPath to the label data file.\n\nlabel_column: str:\n\nColumn name of the labels in the label file.\n\nthreshold: float:\n\nThreshold for filtering in load_filter_transpose function.\n\n\n\n\n\n3.4.2 Returns\n\n\nX (DataFrame):\n\nPreprocessed feature data.\n\nY (ndarray):\n\nPreprocessed label data.\n\n\n\n\n\n3.4.3 Usage\nload_and_preprocess_data(\n    feature_file, \n    label_file, \n    label_column, \n    threshold\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#setuploggingandprogressbar.py",
    "href": "UtilsFunction3.html#setuploggingandprogressbar.py",
    "title": "3  UtilsFunction3",
    "section": "3.5 SetupLoggingAndProgressBar.py",
    "text": "3.5 SetupLoggingAndProgressBar.py\nSet up logging and initialize a tqdm progress bar.\n\n3.5.1 Parameters\n\n\nn_iter (int):\n\nNumber of iterations for RandomizedSearchCV.\n\nn_cv (int):\n\nNumber of cross-validation folds.\n\n\n\n\n\n3.5.2 Returns\n\n\ntqdm object\n\nAn initialized tqdm progress bar.\n\n\n\n\n\n3.5.3 Usage\nsetup_logging_and_progress_bar(\n    n_iter, \n    n_cv\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#updateprogressbar.py",
    "href": "UtilsFunction3.html#updateprogressbar.py",
    "title": "3  UtilsFunction3",
    "section": "3.6 UpdateProgressBar.py",
    "text": "3.6 UpdateProgressBar.py\nRead the number of log entries in the log file and update the tqdm progress bar.\n\n3.6.1 Parameters\n\n\npbar (tqdm):\n\nThe tqdm progress bar object.\n\nlog_file (str):\n\nPath to the log file, default is ‘progress.log’.\n\n\n\n\n\n3.6.2 Usage\nupdate_progress_bar(\n    pbar, \n    log_file='progress.log'\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#loggingcustomscorer.py",
    "href": "UtilsFunction3.html#loggingcustomscorer.py",
    "title": "3  UtilsFunction3",
    "section": "3.7 LoggingCustomScorer.py",
    "text": "3.7 LoggingCustomScorer.py\nCreates a custom scorer function for use in model evaluation processes. This scorer logs both the accuracy score and the time taken for each call.\n\n3.7.1 Parameters\n\n\nn_iter (int):\n\nNumber of iterations for the search process. Default is 10.\n\nn_cv (int):\n\nNumber of cross-validation splits. Default is 5.\n\n\n\n\n\n3.7.2 Returns\n\n\ncustom_scorer(function)\n\nA custom scorer function that logs the accuracy score and time taken for each call.\n\n\n\n\n\n3.7.3 Usage\nlogging_custom_scorer(\n    n_iter=10, \n    n_cv=5\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#tqdmcustomscorer.py",
    "href": "UtilsFunction3.html#tqdmcustomscorer.py",
    "title": "3  UtilsFunction3",
    "section": "3.8 TqdmCustomScorer.py",
    "text": "3.8 TqdmCustomScorer.py\n\nCreates a custom scorer for model evaluation, integrating a progress bar with tqdm.\n\n\n3.8.1 Parameters\n\n\nn_iter: int (optional):\n\nNumber of iterations for the search process. Default is 10.\n\nn_cv: int (optional):\n\nNumber of cross-validation splits. Default is 5.\n\n\n\n\n\n3.8.2 Returns\n\n\nfunction:\n\nA custom scorer function that can be used with model evaluation methods like RandomizedSearchCV.\n\n\n\n\n\n3.8.3 Description\n\nThe tqdm_custom_scorer function creates a scorer for model evaluation, incorporating a tqdm progress bar to monitor the evaluation process. This scorer is especially useful in processes like RandomizedSearchCV, where it provides real-time feedback on the number of iterations and cross-validation steps completed.\n\n\n\n3.8.4 Usage\ncustom_scorer = tqdm_custom_scorer(n_iter=10, n_cv=5)\n# Use this scorer in RandomizedSearchCV or similar methods"
  },
  {
    "objectID": "UtilsFunction3.html#trainmodel.py",
    "href": "UtilsFunction3.html#trainmodel.py",
    "title": "3  UtilsFunction3",
    "section": "3.9 TrainModel.py",
    "text": "3.9 TrainModel.py\nSet up and run the model training process.\n\n3.9.1 Parameters\n\n\nX: DataFrame:\n\nfeature data.\n\nY: ndarray:\n\nlabel data.\n\nfeature_selection:\n\nFeatureUnion, the feature selection process.\n\nparameters: dict:\n\nparameters for RandomizedSearchCV.\n\nn_iter: int:\n\nnumber of iterations for RandomizedSearchCV.\n\nn_cv: int:\n\nnumber of cross-validation folds.\n\nn_jobs: int:\n\nnumber of jobs to run in parallel (default is 9).\n\n\n\n\n\n3.9.2 Returns\n\n\nclf\n\nRandomizedSearchCV object after fitting.\n\n\n\n\n\n3.9.3 Usage\ntrain_model(\n    X, \n    Y, \n    feature_selection, \n    parameters, \n    n_iter, \n    n_cv, \n    n_jobs=9\n    )"
  },
  {
    "objectID": "UtilsFunction3.html#ensembleforrfe.py",
    "href": "UtilsFunction3.html#ensembleforrfe.py",
    "title": "3  UtilsFunction3",
    "section": "3.10 EnsembleForRFE.py",
    "text": "3.10 EnsembleForRFE.py\nSet up and run the Ensemble model for Recursive Feature Elimination.\n\n3.10.1 Parameters\n\n\nsvm_C: float:\nRegularization parameter for SVM.\ntree_max_depth: int:\nMaximum depth of the decision tree.\ntree_min_samples_split: int:\nMinimum number of samples required to split an internal node.\ngbm_learning_rate: float:\nLearning rate for gradient boosting.\ngbm_n_estimators: int:\nNumber of boosting stages for gradient boosting.\n\n\n\n\n3.10.2 Attributes\n\n\nfeature_importances_:\nArray of feature importances after fitting the model.\n\n\n\n\n3.10.3 Methods\n\n\nfit(X, y):\nFit the model to data matrix X and target(s) y.\npredict(X):\nPredict class labels for samples in X.\nset_params(**params):\nSet parameters for the ensemble estimator."
  },
  {
    "objectID": "UtilsFunction3.html#setupfeatureselection.py",
    "href": "UtilsFunction3.html#setupfeatureselection.py",
    "title": "3  UtilsFunction3",
    "section": "3.11 SetupFeatureSelection.py",
    "text": "3.11 SetupFeatureSelection.py\n\nSet up the feature selection process in TransProPy.UtilsFunction3. This function is particularly useful for setting up a feature selection pipeline, especially in models that benefit from ensemble methods and mutual information-based feature selection.\n\n\n3.11.1 Returns\n\n\nfeature_selection: FeatureUnion:\n\nA combined feature selection process.\n\n\n\n\n\n3.11.2 Description\n\nThe setup_feature_selection function initializes and returns a FeatureUnion object for feature selection. This union includes: - RFECV: Utilizes an EnsembleForRFE estimator with StratifiedKFold(5) for cross-validation, focusing on accuracy. - SelectKBest: Applies mutual_info_classif for feature scoring. The combination of these techniques provides a robust approach to feature selection in machine learning models.\n\n\n\n3.11.3 Usage\n\nfeature_selection = setup_feature_selection()"
  },
  {
    "objectID": "UtilsFunction3.html#printboxedtext.py",
    "href": "UtilsFunction3.html#printboxedtext.py",
    "title": "3  UtilsFunction3",
    "section": "3.12 PrintBoxedText.py",
    "text": "3.12 PrintBoxedText.py\n\nPrints a title in a boxed format in the console output.\n\n\n3.12.1 Parameters\n\n\ntitle: str:\n\nThe text to be displayed inside the box.\n\n\n\n\n\n3.12.2 Returns\n\n\nNone. This function directly prints the formatted title to the console.\n\n\n\n\n3.12.3 Description\n\nThis function creates a box around the given title text using hash (#) and equals (=) symbols. It prints the title with a border on the top and bottom, making it stand out in the console output. The border line consists of a hash symbol, followed by equals symbols the length of the title plus two (for padding), and then another hash symbol.\n\n\n\n3.12.4 Usage Example\n\nprint_boxed_text(\"Example Title\")"
  },
  {
    "objectID": "UtilsFunction3.html#extractandsaveresults.py",
    "href": "UtilsFunction3.html#extractandsaveresults.py",
    "title": "3  UtilsFunction3",
    "section": "3.13 ExtractAndSaveResults.py",
    "text": "3.13 ExtractAndSaveResults.py\n\nThe function uses matplotlib for plotting, pandas for data handling, and a custom print_boxed_text function for formatted output.\n\n\n3.13.1 Parameters\n\n\nclf: trained model (RandomizedSearchCV object):\n\nThe classifier object after training.\n\nX: DataFrame:\n\nFeature data used for training.\n\nsave_path: str:\n\nBase path for saving results.\n\nshow_plot: bool (optional):\n\nWhether to display the plot. Default is False.\n\nuse_tkagg: bool (optional):\n\nWhether to use ‘TkAgg’ backend for matplotlib. Generally, choose False when using in PyCharm IDE, and choose True when rendering file.qmd to an HTML file.\n\n\n\n\n\n3.13.2 Description\n\nThis function performs a comprehensive analysis and extraction of results from a trained model. It includes: - Extracting and plotting cross-validation results. - Identifying and printing features selected by RFECV and SelectKBest. - Combining and saving selected features in a CSV file. - Extracting and saving feature importances from EnsembleForRFE. - Extracting and saving scores from SelectKBest.\n\n\n\n3.13.3 Usage\n\nextract_and_save_results(clf, X, \"path/to/save/\", show_plot=True)"
  },
  {
    "objectID": "MACFCmain.html#parameters-a",
    "href": "MACFCmain.html#parameters-a",
    "title": "4  MACFCmain.py",
    "section": "4.1 Parameters",
    "text": "4.1 Parameters\n\n\nmax_rank: int\n\nThe total number of gene combinations you want to obtain.\n\nlable_name: string\n\nFor example: gender, age, altitude, temperature, quality, and other categorical variable names.\n\ndata_path: string\n\nFor example: ‘../data/gene_tpm.csv’\nPlease note: Preprocess the input data in advance to remove samples that contain too many missing values or zeros.\nThe input data matrix should have genes as rows and samples as columns.\n\nlabel_path: string\n\nFor example: ‘../data/tumor_class.csv’\nPlease note: The input sample categories must be in a numerical binary format, such as: 1,2,1,1,2,2,1.\nIn this case, the numerical values represent the following classifications: 1: male; 2: female.\n\nthreshold: float\n\nFor example: 0.9\nThe set threshold indicates the proportion of non-zero value samples to all samples in each feature."
  },
  {
    "objectID": "MACFCmain.html#returns-a",
    "href": "MACFCmain.html#returns-a",
    "title": "4  MACFCmain.py",
    "section": "4.2 Returns",
    "text": "4.2 Returns\n\n\nfr: list of strings\n\nRepresenting ranked features.\n\nfre1: dictionary\n\nFeature names as keys and their frequencies as values.\n\nfrequency: list of tuples\n\nFeature names and their frequencies.\nThe frequency outputs a list sorted by occurrence frequency (in descending order). This list includes only those elements from the dictionary fre1 (which represents the counted frequencies of elements in the original data) that have an occurrence frequency greater than once, along with their frequencies.\n\nlen(FName): integer\n\nCount of AUC values greater than 0.5.\n\nFName: array of strings\n\nFeature names after ranking with AUC &gt; 0.5.\n\nFauc: array of floats\n\nAUC values corresponding to the ranked feature names."
  },
  {
    "objectID": "MACFCmain.html#function-principle-explanation-a",
    "href": "MACFCmain.html#function-principle-explanation-a",
    "title": "4  MACFCmain.py",
    "section": "4.3 Function Principle Explanation",
    "text": "4.3 Function Principle Explanation\n\nFeature Frequency and AUC: In this function, features that appear with high frequency indicate their presence in multiple optimal feature sets. Each optimal feature set is determined by calculating its Area Under the Receiver Operating Characteristic (ROC) Curve (AUC), which is a common measure for evaluating classifier performance. During each iteration of the loop, an optimal feature set with the highest average AUC value is selected. Features from this set are then added to a rank list, known as ‘ranklist,’ and when necessary, also to a set named ‘rankset’.\nHigh-Frequency Features and Performance: Because features in each set are chosen based on their contribution to classifier performance, high-frequency features are likely to perform well. In other words, if a feature appears in multiple optimal feature sets, it may have a significant impact on the performance of the classifier.\nNote on Low-Frequency Features: However, it’s important to note that a low frequency of a feature does not necessarily mean it is unimportant. The importance of a feature may depend on how it combines with other features. Additionally, the outcome of feature selection may be influenced by the characteristics of the dataset and random factors. Therefore, the frequency provided by this function should only be used as a reference and is not an absolute indicator of feature performance.\nFurther Evaluation Methods: If you wish to explore feature performance more deeply, you may need to employ other methods for assessing feature importance. This could include model-based importance metrics or statistical tests to evaluate the relationship between features and the target variable."
  },
  {
    "objectID": "MACFCmain.html#usage-workflow-a",
    "href": "MACFCmain.html#usage-workflow-a",
    "title": "4  MACFCmain.py",
    "section": "4.4 Usage Workflow",
    "text": "4.4 Usage Workflow\n\n\nFName is a list of feature names sorted based on their AUC (Area Under the Curve) values. In this sorting method, the primary consideration is the AUC value, followed by the feature name. All features included in FName have an AUC value greater than 0.5.\nfr is the result of another sorting method. In this method, the primary consideration is the “combined” AUC of the features, followed by their individual AUC values. This means that some features, despite having lower individual AUC values, may produce a higher combined AUC when paired with other features. Therefore, their position in the fr list may be higher than in the FName list.\nThe code for fr employs a more complex logic to select and combine features to optimize their combined AUC values. In this process, features are not solely selected and sorted based on their individual AUC values; the effect of their combination with other features is also considered. Consequently, the sorting logic for fr (or rankset) differs from that of FName.\nPlease note: While the code takes into account both individual AUC values and combined AUC values, the sorting of the fr list (i.e., rankset) initially starts based on individual AUC values. This is because at the beginning of each external loop iteration, the first element of fs is the next feature sorted by its individual AUC value. The list is then further optimized by evaluating the combination effects with other features."
  },
  {
    "objectID": "MACFCmain.html#usage-of-macfmain-significant-correlation",
    "href": "MACFCmain.html#usage-of-macfmain-significant-correlation",
    "title": "4  MACFCmain.py",
    "section": "4.5 Usage of MACFCmain (Significant correlation)",
    "text": "4.5 Usage of MACFCmain (Significant correlation)\nThis function uses the MACFC method to select feature genes relevant to classification and ranks them based on their corresponding weights.\n\n\nPlease note:Data characteristics: Features have strong correlation with the classification.\n\n\n\n4.5.1 Import the corresponding module\n\nimport TransProPy.MACFCmain as Tr\nimport TransProPy.UtilsFunction1.GeneNames as TUG\nimport TransProPy.UtilsFunction1.GeneToFeatureMapping as TUGM\n\n\n\n\n4.5.2 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/four_methods_degs_intersection.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n  Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0        A2M         16.808499         16.506184         17.143433   \n1      A2ML1          1.584963          9.517669          7.434628   \n2      AADAC          4.000000          2.584963          1.584963   \n3    AADACL2          1.000000          1.000000          0.000000   \n4     ABCA12          4.523562          4.321928          3.906891   \n5    ABCA17P          4.584963          5.169925          3.807355   \n6      ABCA9          9.753217          6.906891          3.459432   \n7      ABCB4          9.177420          6.700440          5.000000   \n8      ABCB5         10.134426          4.169925          9.167418   \n9     ABCC11         10.092757          6.491853          5.459432   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0         17.760739         14.766839         16.263691         16.035207   \n1          2.584963          1.584963          2.584963          5.285402   \n2          0.000000          0.000000          0.000000          3.321928   \n3          0.000000          1.000000          0.000000          0.000000   \n4          3.459432          1.584963          3.000000          4.321928   \n5          8.366322          7.228819          7.076816          4.584963   \n6          2.584963          6.357552          6.475733          7.330917   \n7          9.342075         10.392317          7.383704         11.032735   \n8          4.906891         11.340963          3.169925         11.161762   \n9          6.807355          4.247928          5.459432          5.977280   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0         18.355114         16.959379  \n1          2.584963          3.584963  \n2          1.000000          4.584963  \n3          0.000000          1.000000  \n4          4.807355          3.700440  \n5          6.409391          7.139551  \n6          7.954196          9.177420  \n7         10.082149         10.088788  \n8          4.643856         12.393927  \n9          5.614710          8.233620  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      2\n5  TCGA-GN-A26A-06A      2\n6  TCGA-D3-A3BZ-06A      2\n7  TCGA-D3-A51G-06A      2\n8  TCGA-EE-A29R-06A      2\n9  TCGA-D3-A2JE-06A      2\n\n\n\n\n\n4.5.3 MACFCmain\n\nranked_features, fre1, frequency, len_FName, FName, Fauc = Tr.MACFCmain(\n    100, \n    \"class\", \n    0.95, \n    data_path='../test_TransProPy/data/four_methods_degs_intersection.csv', \n    label_path='../test_TransProPy/data/class.csv'\n    )\n\n\n\n\n4.5.4 Result\n\n# Print the first 20 Ranked Features\nprint(\"\\nFirst 20 Ranked Features:\")\nfor i, feature in enumerate(ranked_features[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst 20 Ranked Features:\n1. 355\n2. 68\n3. 867\n4. 78\n5. 97\n6. 90\n7. 432\n8. 313\n9. 497\n10. 511\n11. 66\n12. 172\n13. 544\n14. 1162\n15. 487\n16. 317\n17. 1283\n18. 930\n19. 1290\n20. 1170\n\n\n\n\n# Print the first 20 Feature Frequencies (fre1)\nprint(\"\\nFirst 20 Feature Frequencies:\")\nfor i, (feature, freq) in enumerate(list(fre1.items())[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFirst 20 Feature Frequencies:\n1. Feature: 355, Frequency: 1\n2. Feature: 68, Frequency: 1\n3. Feature: 867, Frequency: 1\n4. Feature: 78, Frequency: 1\n5. Feature: 97, Frequency: 1\n6. Feature: 90, Frequency: 1\n7. Feature: 432, Frequency: 1\n8. Feature: 313, Frequency: 1\n9. Feature: 497, Frequency: 1\n10. Feature: 511, Frequency: 1\n11. Feature: 66, Frequency: 1\n12. Feature: 172, Frequency: 1\n13. Feature: 544, Frequency: 1\n14. Feature: 1162, Frequency: 1\n15. Feature: 487, Frequency: 1\n16. Feature: 317, Frequency: 1\n17. Feature: 1283, Frequency: 1\n18. Feature: 930, Frequency: 1\n19. Feature: 1290, Frequency: 1\n20. Feature: 1170, Frequency: 1\n\n\n\n\n# Print the Features with a frequency greater than 1 \nprint(\"\\nFeatures with a frequency greater than 1 :\")\nfor i, (feature, freq) in enumerate(frequency[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFeatures with a frequency greater than 1 :\n\n\n\n\n# Print the length of FName (len_FName)\nprint(\"\\nCount of Features with AUC &gt; 0.5 (len_FName):\")\nprint(len_FName)\n\n\nCount of Features with AUC &gt; 0.5 (len_FName):\n1\n\n\n\n\n# Print the first 10 Features with AUC &gt; 0.5 (FName)\nprint(\"\\nFirst few Features with AUC &gt; 0.5:\")\nfor i, feature in enumerate(FName[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst few Features with AUC &gt; 0.5:\n1. 355\n\n\n\n\n# Print the first 10 AUC Values for Ranked Features (Fauc)\nprint(\"\\nFirst few AUC Values for Ranked Features:\")\nfor i, auc in enumerate(Fauc[:20], 1):\n    print(f\"{i}. AUC: {auc}\")\n\n\nFirst few AUC Values for Ranked Features:\n1. AUC: 1.0\n\n\n\n\n\n4.5.5 gene_name\n\ngene_names = TUG.gene_name(data_path='../test_TransProPy/data/four_methods_degs_intersection.csv')\n\n\n\n# Print the first 20 gene names\nprint(\"First 20 Gene Names:\")\nfor i, gene_name in enumerate(gene_names[:20], 1):\n    print(f\"{i}. {gene_name}\")\n\nFirst 20 Gene Names:\n1. A2M\n2. A2ML1\n3. AADAC\n4. AADACL2\n5. ABCA12\n6. ABCA17P\n7. ABCA9\n8. ABCB4\n9. ABCB5\n10. ABCC11\n11. ABCC3\n12. ABCD1\n13. ABI3BP\n14. AC002116.8\n15. AC002398.9\n16. AC004057.1\n17. AC004231.2\n18. AC004540.5\n19. AC004623.3\n20. AC004951.5\n\n\n\n\n\n4.5.6 gene_map_feature\n\ngene_to_feature_mapping = TUGM.gene_map_feature(gene_names, ranked_features)\n\n\n\n4.5.6.1 AUC&gt;0.5\n\nimport numpy as np\n# Generating gene_to_feature_mapping\ngene_to_feature_mapping = {}\nfor gene, feature in zip(gene_names, FName):\n    # Find the index of the feature in FName\n    index = np.where(FName == feature)[0][0]\n    # Find the corresponding AUC value using the index\n    auc_value = Fauc[index]\n    # Store the gene name, feature name, and AUC value in the mapping\n    gene_to_feature_mapping[gene] = (feature, auc_value)\n\n# Print the first 20 mappings\nprint(\"\\nFirst 20 Gene to Feature Mappings with AUC Values:\")\nfor i, (gene, (feature, auc)) in enumerate(list(gene_to_feature_mapping.items())[:20], 1):\n    print(f\"{i}. Gene: {gene}, Feature: {feature}, AUC: {auc}\")\n\n\nFirst 20 Gene to Feature Mappings with AUC Values:\n1. Gene: A2M, Feature: 355, AUC: 1.0"
  },
  {
    "objectID": "MACFCmain.html#usage-of-macfmain-insignificant-correlation",
    "href": "MACFCmain.html#usage-of-macfmain-insignificant-correlation",
    "title": "4  MACFCmain.py",
    "section": "4.6 Usage of MACFCmain (Insignificant correlation)",
    "text": "4.6 Usage of MACFCmain (Insignificant correlation)\nThis function uses the MACFC method to select feature genes relevant to classification and ranks them based on their corresponding weights.\n\n\nPlease note:Data characteristics: Features have weak correlation with the classification.\nRandomly shuffling the class labels to a certain extent simulates reducing the correlation.\n\n\n\n\n4.6.1 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/four_methods_degs_intersection.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n  Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0        A2M         16.808499         16.506184         17.143433   \n1      A2ML1          1.584963          9.517669          7.434628   \n2      AADAC          4.000000          2.584963          1.584963   \n3    AADACL2          1.000000          1.000000          0.000000   \n4     ABCA12          4.523562          4.321928          3.906891   \n5    ABCA17P          4.584963          5.169925          3.807355   \n6      ABCA9          9.753217          6.906891          3.459432   \n7      ABCB4          9.177420          6.700440          5.000000   \n8      ABCB5         10.134426          4.169925          9.167418   \n9     ABCC11         10.092757          6.491853          5.459432   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0         17.760739         14.766839         16.263691         16.035207   \n1          2.584963          1.584963          2.584963          5.285402   \n2          0.000000          0.000000          0.000000          3.321928   \n3          0.000000          1.000000          0.000000          0.000000   \n4          3.459432          1.584963          3.000000          4.321928   \n5          8.366322          7.228819          7.076816          4.584963   \n6          2.584963          6.357552          6.475733          7.330917   \n7          9.342075         10.392317          7.383704         11.032735   \n8          4.906891         11.340963          3.169925         11.161762   \n9          6.807355          4.247928          5.459432          5.977280   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0         18.355114         16.959379  \n1          2.584963          3.584963  \n2          1.000000          4.584963  \n3          0.000000          1.000000  \n4          4.807355          3.700440  \n5          6.409391          7.139551  \n6          7.954196          9.177420  \n7         10.082149         10.088788  \n8          4.643856         12.393927  \n9          5.614710          8.233620  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/random_classification_class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      1\n5  TCGA-GN-A26A-06A      1\n6  TCGA-D3-A3BZ-06A      1\n7  TCGA-D3-A51G-06A      1\n8  TCGA-EE-A29R-06A      1\n9  TCGA-D3-A2JE-06A      1\n\n\n\n\n\n4.6.2 MACFCmain\n\nranked_features, fre1, frequency, len_FName, FName, Fauc = Tr.MACFCmain(\n    100, \n    \"class\", \n    0.95, \n    data_path='../test_TransProPy/data/four_methods_degs_intersection.csv', \n    label_path='../test_TransProPy/data/random_classification_class.csv'\n    )\n\n\n\n\n4.6.3 Result\n\n# Print the first 20 Ranked Features\nprint(\"\\nFirst 20 Ranked Features:\")\nfor i, feature in enumerate(ranked_features[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst 20 Ranked Features:\n1. 1147\n2. 605\n3. 140\n4. 845\n5. 546\n6. 1052\n7. 188\n8. 431\n9. 182\n10. 120\n11. 362\n12. 998\n13. 1122\n14. 246\n15. 23\n16. 383\n17. 258\n18. 189\n19. 746\n20. 1064\n\n\n\n\n# Print the first 20 Feature Frequencies (fre1)\nprint(\"\\nFirst 20 Feature Frequencies:\")\nfor i, (feature, freq) in enumerate(list(fre1.items())[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFirst 20 Feature Frequencies:\n1. Feature: 1147, Frequency: 1\n2. Feature: 605, Frequency: 1\n3. Feature: 140, Frequency: 1\n4. Feature: 845, Frequency: 1\n5. Feature: 546, Frequency: 1\n6. Feature: 1052, Frequency: 1\n7. Feature: 188, Frequency: 1\n8. Feature: 431, Frequency: 1\n9. Feature: 182, Frequency: 1\n10. Feature: 120, Frequency: 1\n11. Feature: 362, Frequency: 1\n12. Feature: 998, Frequency: 1\n13. Feature: 1122, Frequency: 1\n14. Feature: 246, Frequency: 1\n15. Feature: 23, Frequency: 1\n16. Feature: 383, Frequency: 1\n17. Feature: 258, Frequency: 1\n18. Feature: 189, Frequency: 1\n19. Feature: 746, Frequency: 1\n20. Feature: 1064, Frequency: 1\n\n\n\n\n# Print the Features with a frequency greater than 1 \nprint(\"\\nFeatures with a frequency greater than 1 :\")\nfor i, (feature, freq) in enumerate(frequency[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFeatures with a frequency greater than 1 :\n\n\n\n\n# Print the length of FName (len_FName)\nprint(\"\\nCount of Features with AUC &gt; 0.5 (len_FName):\")\nprint(len_FName)\n\n\nCount of Features with AUC &gt; 0.5 (len_FName):\n757\n\n\n\n\n# Print the first 10 Features with AUC &gt; 0.5 (FName)\nprint(\"\\nFirst few Features with AUC &gt; 0.5:\")\nfor i, feature in enumerate(FName[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst few Features with AUC &gt; 0.5:\n1. 1147\n2. 140\n3. 605\n4. 518\n5. 1080\n6. 826\n7. 541\n8. 695\n9. 1266\n10. 0\n11. 864\n12. 188\n13. 842\n14. 344\n15. 824\n16. 1208\n17. 1086\n18. 602\n19. 295\n20. 1261\n\n\n\n\n# Print the first 10 AUC Values for Ranked Features (Fauc)\nprint(\"\\nFirst few AUC Values for Ranked Features:\")\nfor i, auc in enumerate(Fauc[:20], 1):\n    print(f\"{i}. AUC: {auc}\")\n\n\nFirst few AUC Values for Ranked Features:\n1. AUC: 0.6469530885995243\n2. AUC: 0.6465975134260281\n3. AUC: 0.6447509747664238\n4. AUC: 0.6415704161455651\n5. AUC: 0.6405110473528042\n6. AUC: 0.6403761740111332\n7. AUC: 0.6400941661149121\n8. AUC: 0.6398293239167219\n9. AUC: 0.6387871208219917\n10. AUC: 0.6381814169057604\n11. AUC: 0.6376174011133181\n12. AUC: 0.6373378454596729\n13. AUC: 0.6371956153902744\n14. AUC: 0.6371931631476986\n15. AUC: 0.6370018882267834\n16. AUC: 0.6367713774246548\n17. AUC: 0.636531057652223\n18. AUC: 0.6361656735084235\n19. AUC: 0.6359670418597808\n20. AUC: 0.6358419774884132\n\n\n\n\n\n4.6.4 gene_name\n\ngene_names = TUG.gene_name(data_path='../test_TransProPy/data/four_methods_degs_intersection.csv')\n\n\n\n# Print the first 20 gene names\nprint(\"First 20 Gene Names:\")\nfor i, gene_name in enumerate(gene_names[:20], 1):\n    print(f\"{i}. {gene_name}\")\n\nFirst 20 Gene Names:\n1. A2M\n2. A2ML1\n3. AADAC\n4. AADACL2\n5. ABCA12\n6. ABCA17P\n7. ABCA9\n8. ABCB4\n9. ABCB5\n10. ABCC11\n11. ABCC3\n12. ABCD1\n13. ABI3BP\n14. AC002116.8\n15. AC002398.9\n16. AC004057.1\n17. AC004231.2\n18. AC004540.5\n19. AC004623.3\n20. AC004951.5\n\n\n\n\n\n4.6.5 gene_map_feature\n\ngene_to_feature_mapping = TUGM.gene_map_feature(gene_names, ranked_features)\n\n\n\n4.6.5.1 AUC&gt;0.5\n\nimport numpy as np\n# Generating gene_to_feature_mapping\ngene_to_feature_mapping = {}\nfor gene, feature in zip(gene_names, FName):\n    # Find the index of the feature in FName\n    index = np.where(FName == feature)[0][0]\n    # Find the corresponding AUC value using the index\n    auc_value = Fauc[index]\n    # Store the gene name, feature name, and AUC value in the mapping\n    gene_to_feature_mapping[gene] = (feature, auc_value)\n\n# Print the first 20 mappings\nprint(\"\\nFirst 20 Gene to Feature Mappings with AUC Values:\")\nfor i, (gene, (feature, auc)) in enumerate(list(gene_to_feature_mapping.items())[:20], 1):\n    print(f\"{i}. Gene: {gene}, Feature: {feature}, AUC: {auc}\")\n\n\nFirst 20 Gene to Feature Mappings with AUC Values:\n1. Gene: A2M, Feature: 1147, AUC: 0.6469530885995243\n2. Gene: A2ML1, Feature: 140, AUC: 0.6465975134260281\n3. Gene: AADAC, Feature: 605, AUC: 0.6447509747664238\n4. Gene: AADACL2, Feature: 518, AUC: 0.6415704161455651\n5. Gene: ABCA12, Feature: 1080, AUC: 0.6405110473528042\n6. Gene: ABCA17P, Feature: 826, AUC: 0.6403761740111332\n7. Gene: ABCA9, Feature: 541, AUC: 0.6400941661149121\n8. Gene: ABCB4, Feature: 695, AUC: 0.6398293239167219\n9. Gene: ABCB5, Feature: 1266, AUC: 0.6387871208219917\n10. Gene: ABCC11, Feature: 0, AUC: 0.6381814169057604\n11. Gene: ABCC3, Feature: 864, AUC: 0.6376174011133181\n12. Gene: ABCD1, Feature: 188, AUC: 0.6373378454596729\n13. Gene: ABI3BP, Feature: 842, AUC: 0.6371956153902744\n14. Gene: AC002116.8, Feature: 344, AUC: 0.6371931631476986\n15. Gene: AC002398.9, Feature: 824, AUC: 0.6370018882267834\n16. Gene: AC004057.1, Feature: 1208, AUC: 0.6367713774246548\n17. Gene: AC004231.2, Feature: 1086, AUC: 0.636531057652223\n18. Gene: AC004540.5, Feature: 602, AUC: 0.6361656735084235\n19. Gene: AC004623.3, Feature: 295, AUC: 0.6359670418597808\n20. Gene: AC004951.5, Feature: 1261, AUC: 0.6358419774884132"
  },
  {
    "objectID": "MACFCmain.html#references-a",
    "href": "MACFCmain.html#references-a",
    "title": "4  MACFCmain.py",
    "section": "4.7 References",
    "text": "4.7 References\n\n\nSu,Y., Du,K., Wang,J., Wei,J. and Liu,J. (2022) Multi-variable AUC for sifting complementary features and its biomedical application. Briefings in Bioinformatics, 23, bbac029."
  },
  {
    "objectID": "NewMACFCmain.html#parameters-b",
    "href": "NewMACFCmain.html#parameters-b",
    "title": "5  NewMACFCmain.py",
    "section": "5.1 Parameters",
    "text": "5.1 Parameters\n\n\nAUC_threshold: float\n\nAUC threshold for feature selection. Features with AUC values higher than this threshold are recorded but not used in subsequent calculations.\n\nmax_rank: int\n\nThe total number of gene combinations you want to obtain.\n\nlable_name: string\n\nFor example: gender, age, altitude, temperature, quality, and other categorical variable names.\n\nthreshold: float\n\nFor example: 0.9\nThe set threshold indicates the proportion of non-zero value samples to all samples in each feature.\n\ndata_path: string\n\nFor example: ‘../data/gene_tpm.csv’\nPlease note: Preprocess the input data in advance to remove samples that contain too many missing values or zeros.\nThe input data matrix should have genes as rows and samples as columns.\n\nlabel_path: string\n\nFor example: ‘../data/tumor_class.csv’\nPlease note: The input sample categories must be in a numerical binary format, such as: 1,2,1,1,2,2,1.\nIn this case, the numerical values represent the following classifications: 1: male; 2: female."
  },
  {
    "objectID": "NewMACFCmain.html#returns-b",
    "href": "NewMACFCmain.html#returns-b",
    "title": "5  NewMACFCmain.py",
    "section": "5.2 Returns",
    "text": "5.2 Returns\n\n\nhigh_auc_features: list of tuples\n\nThis list contains tuples of feature indices and their corresponding AUC values, where the AUC value is greater than AUC_threshold. Each tuple consists of the feature’s index in string format and its AUC value as a float. This signifies that these features are highly predictive, with a strong ability to distinguish between different classes in the classification task.\n\nfr: list of strings\n\nRepresenting ranked features.\n\nfre1: dictionary\n\nFeature names as keys and their frequencies as values.\n\nfrequency: list of tuples\n\nFeature names and their frequencies.\nThe frequency outputs a list sorted by occurrence frequency (in descending order). This list includes only those elements from the dictionary fre1 (which represents the counted frequencies of elements in the original data) that have an occurrence frequency greater than once, along with their frequencies.\n\nlen(FName): integer\n\nCount of AUC values greater than 0.5.\n\nFName: array of strings\n\nFeature names after ranking with AUC &gt; 0.5.\n\nFauc: array of floats\n\nAUC values corresponding to the ranked feature names."
  },
  {
    "objectID": "NewMACFCmain.html#function-principle-explanation-b",
    "href": "NewMACFCmain.html#function-principle-explanation-b",
    "title": "5  NewMACFCmain.py",
    "section": "5.3 Function Principle Explanation",
    "text": "5.3 Function Principle Explanation\n\nFeature Frequency and AUC: In this function, features that appear with high frequency indicate their presence in multiple optimal feature sets. Each optimal feature set is determined by calculating its Area Under the Receiver Operating Characteristic (ROC) Curve (AUC), which is a common measure for evaluating classifier performance. During each iteration of the loop, an optimal feature set with the highest average AUC value is selected. Features from this set are then added to a rank list, known as ‘ranklist,’ and when necessary, also to a set named ‘rankset’.\nHigh-Frequency Features and Performance: Because features in each set are chosen based on their contribution to classifier performance, high-frequency features are likely to perform well. In other words, if a feature appears in multiple optimal feature sets, it may have a significant impact on the performance of the classifier.\nNote on Low-Frequency Features: However, it’s important to note that a low frequency of a feature does not necessarily mean it is unimportant. The importance of a feature may depend on how it combines with other features. Additionally, the outcome of feature selection may be influenced by the characteristics of the dataset and random factors. Therefore, the frequency provided by this function should only be used as a reference and is not an absolute indicator of feature performance.\nFurther Evaluation Methods: If you wish to explore feature performance more deeply, you may need to employ other methods for assessing feature importance. This could include model-based importance metrics or statistical tests to evaluate the relationship between features and the target variable."
  },
  {
    "objectID": "NewMACFCmain.html#usage-workflow-b",
    "href": "NewMACFCmain.html#usage-workflow-b",
    "title": "5  NewMACFCmain.py",
    "section": "5.4 Usage Workflow",
    "text": "5.4 Usage Workflow\n\n\nFName is a list of feature names sorted based on their AUC (Area Under the Curve) values. In this sorting method, the primary consideration is the AUC value, followed by the feature name. All features included in FName have an AUC value greater than 0.5.\nfr is the result of another sorting method. In this method, the primary consideration is the “combined” AUC of the features, followed by their individual AUC values. This means that some features, despite having lower individual AUC values, may produce a higher combined AUC when paired with other features. Therefore, their position in the fr list may be higher than in the FName list.\nThe code for fr employs a more complex logic to select and combine features to optimize their combined AUC values. In this process, features are not solely selected and sorted based on their individual AUC values; the effect of their combination with other features is also considered. Consequently, the sorting logic for fr (or rankset) differs from that of FName.\nPlease note: While the code takes into account both individual AUC values and combined AUC values, the sorting of the fr list (i.e., rankset) initially starts based on individual AUC values. This is because at the beginning of each external loop iteration, the first element of fs is the next feature sorted by its individual AUC value. The list is then further optimized by evaluating the combination effects with other features."
  },
  {
    "objectID": "NewMACFCmain.html#usage-of-new-macfcmain-four-methods-degs-union-b",
    "href": "NewMACFCmain.html#usage-of-new-macfcmain-four-methods-degs-union-b",
    "title": "5  NewMACFCmain.py",
    "section": "5.5 Usage of New_MACFCmain (four_methods_degs_union)",
    "text": "5.5 Usage of New_MACFCmain (four_methods_degs_union)\nThis function uses the MACFC method to select feature genes relevant to classification and ranks them based on their corresponding weights.\n\n5.5.1 Import the corresponding module\n\nimport TransProPy.NewMACFCmain as TN\nimport TransProPy.UtilsFunction1.GeneNames as TUG\nimport TransProPy.UtilsFunction1.GeneToFeatureMapping as TUGM\n\n\n\n\n5.5.2 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/four_methods_degs_union.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n            Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0                 A1BG          6.754888          4.000000          5.044394   \n1                  A2M         16.808499         16.506184         17.143433   \n2                A2ML1          1.584963          9.517669          7.434628   \n3                AADAC          4.000000          2.584963          1.584963   \n4              AADACL2          1.000000          1.000000          0.000000   \n5              AADACL3          0.000000          0.000000          0.000000   \n6              AADACL4          0.000000          0.000000          0.000000   \n7          AB019440.50          0.000000          0.000000          0.000000   \n8          AB019441.29          6.392317          4.954196          6.629357   \n9  ABC12-47964100C23.1          0.000000          0.000000          0.000000   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0          5.247928          5.977280          5.044394          5.491853   \n1         17.760739         14.766839         16.263691         16.035207   \n2          2.584963          1.584963          2.584963          5.285402   \n3          0.000000          0.000000          0.000000          3.321928   \n4          0.000000          1.000000          0.000000          0.000000   \n5          0.000000          1.000000          0.000000          0.000000   \n6          0.000000          0.000000          0.000000          0.000000   \n7          0.000000          0.000000          0.000000          0.000000   \n8          6.988685          8.625709          6.614710          6.845490   \n9          0.000000          0.000000          0.000000          0.000000   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0          5.754888          6.357552  \n1         18.355114         16.959379  \n2          2.584963          3.584963  \n3          1.000000          4.584963  \n4          0.000000          1.000000  \n5          4.169925          0.000000  \n6          0.000000          0.000000  \n7          0.000000          0.000000  \n8          7.845490          6.507795  \n9          1.584963          0.000000  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      2\n5  TCGA-GN-A26A-06A      2\n6  TCGA-D3-A3BZ-06A      2\n7  TCGA-D3-A51G-06A      2\n8  TCGA-EE-A29R-06A      2\n9  TCGA-D3-A2JE-06A      2\n\n\n\n\n\n5.5.3 New_MACFCmain\n\nhigh_auc_features, ranked_features, fre1, frequency, len_FName, FName, Fauc = TN.New_MACFCmain(\n    0.9,\n    100, \n    \"class\", \n    0.9, \n    data_path='../test_TransProPy/data/four_methods_degs_union.csv', \n    label_path='../test_TransProPy/data/class.csv'\n    )\n\n\n\n\n5.5.4 Result\n\n5.5.4.1 AUC greater than 0.9 and their AUC values\n\n# Print features with AUC greater than 0.9 and their AUC values\nprint('\\nFeatures with AUC greater than 0.9:')\ntotal_features = len(high_auc_features)\nprint(f\"Total features: {total_features}\")\n\n# Determine the number of features to display\nnum_to_display = min(total_features, 20)\n\nfor i in range(num_to_display):\n    feature, auc_value = high_auc_features[i]\n    print(f\"Feature: {feature}, AUC: {auc_value}\")\n\n\nFeatures with AUC greater than 0.9:\nTotal features: 1421\nFeature: 26, AUC: 1.0\nFeature: 704, AUC: 1.0\nFeature: 717, AUC: 1.0\nFeature: 1172, AUC: 1.0\nFeature: 1899, AUC: 1.0\nFeature: 1948, AUC: 1.0\nFeature: 2338, AUC: 1.0\nFeature: 2596, AUC: 0.9999973764986752\nFeature: 582, AUC: 0.9999947529973503\nFeature: 2453, AUC: 0.9999895059947005\nFeature: 1563, AUC: 0.9999868824933756\nFeature: 786, AUC: 0.9999842589920508\nFeature: 2419, AUC: 0.9999842589920508\nFeature: 204, AUC: 0.9999763884880762\nFeature: 1002, AUC: 0.9999763884880762\nFeature: 291, AUC: 0.9999658944827767\nFeature: 237, AUC: 0.9999370359682032\nFeature: 124, AUC: 0.9999239184615788\nFeature: 1561, AUC: 0.9999081774536296\nFeature: 2171, AUC: 0.9999081774536296\n\n\n\n\n\n5.5.4.2 New_MACFCmain\n\n# Print the first 20 Ranked Features\nprint(\"\\nFirst 20 Ranked Features:\")\nfor i, feature in enumerate(ranked_features[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst 20 Ranked Features:\n1. 2440\n2. 2460\n3. 2096\n4. 482\n5. 2223\n6. 848\n7. 1501\n8. 519\n9. 1417\n10. 1939\n11. 1914\n12. 937\n13. 1340\n14. 100\n15. 1978\n16. 1558\n17. 413\n18. 1809\n19. 2031\n20. 1466\n\n\n\n\n# Print the first 20 Feature Frequencies (fre1)\nprint(\"\\nFirst 20 Feature Frequencies:\")\nfor i, (feature, freq) in enumerate(list(fre1.items())[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFirst 20 Feature Frequencies:\n1. Feature: 2440, Frequency: 1\n2. Feature: 2460, Frequency: 16\n3. Feature: 2096, Frequency: 26\n4. Feature: 482, Frequency: 1\n5. Feature: 2223, Frequency: 13\n6. Feature: 848, Frequency: 1\n7. Feature: 1501, Frequency: 1\n8. Feature: 519, Frequency: 1\n9. Feature: 1417, Frequency: 2\n10. Feature: 1939, Frequency: 1\n11. Feature: 1914, Frequency: 1\n12. Feature: 937, Frequency: 1\n13. Feature: 1340, Frequency: 1\n14. Feature: 100, Frequency: 1\n15. Feature: 1978, Frequency: 1\n16. Feature: 1558, Frequency: 1\n17. Feature: 413, Frequency: 1\n18. Feature: 1809, Frequency: 1\n19. Feature: 2031, Frequency: 1\n20. Feature: 1466, Frequency: 11\n\n\n\n\n# Print the Features with a frequency greater than 1 \nprint(\"\\nFeatures with a frequency greater than 1 :\")\nfor i, (feature, freq) in enumerate(frequency[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFeatures with a frequency greater than 1 :\n1. Feature: 2096, Frequency: 26\n2. Feature: 2460, Frequency: 16\n3. Feature: 2223, Frequency: 13\n4. Feature: 1466, Frequency: 11\n5. Feature: 1773, Frequency: 3\n6. Feature: 900, Frequency: 2\n7. Feature: 2620, Frequency: 2\n8. Feature: 176, Frequency: 2\n9. Feature: 1417, Frequency: 2\n10. Feature: 1136, Frequency: 2\n11. Feature: 1080, Frequency: 2\n\n\n\n\n# Print the length of FName (len_FName)\nprint(\"\\nCount of Features with AUC &gt; 0.5 (len_FName):\")\nprint(len_FName)\n\n\nCount of Features with AUC &gt; 0.5 (len_FName):\n809\n\n\n\n\n# Print the first 10 Features with AUC &gt; 0.5 (FName)\nprint(\"\\nFirst few Features with AUC &gt; 0.5:\")\nfor i, feature in enumerate(FName[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst few Features with AUC &gt; 0.5:\n1. 2440\n2. 482\n3. 848\n4. 1501\n5. 519\n6. 1939\n7. 1914\n8. 937\n9. 1340\n10. 100\n11. 1978\n12. 1558\n13. 413\n14. 1809\n15. 2031\n16. 780\n17. 712\n18. 1362\n19. 1136\n20. 2486\n\n\n\n\n# Print the first 10 AUC Values for Ranked Features (Fauc)\nprint(\"\\nFirst few AUC Values for Ranked Features:\")\nfor i, auc in enumerate(Fauc[:20], 1):\n    print(f\"{i}. AUC: {auc}\")\n\n\nFirst few AUC Values for Ranked Features:\n1. AUC: 0.8999134244562793\n2. AUC: 0.8998950599470052\n3. AUC: 0.899879318939056\n4. AUC: 0.8995041582496\n5. AUC: 0.8994700527323767\n6. AUC: 0.8994595587270772\n7. AUC: 0.8992864076396359\n8. AUC: 0.8992785371356613\n9. AUC: 0.8990555395230475\n10. AUC: 0.8990424220164231\n11. AUC: 0.8989715874806516\n12. AUC: 0.8988351654117586\n13. AUC: 0.8988325419104337\n14. AUC: 0.8987433428653882\n15. AUC: 0.8987276018574389\n16. AUC: 0.8987249783561141\n17. AUC: 0.8986725083296168\n18. AUC: 0.8985649447752971\n19. AUC: 0.8985150982501247\n20. AUC: 0.898449510717003\n\n\n\n\n\n\n5.5.5 gene_name\n\ngene_names = TUG.gene_name(data_path='../test_TransProPy/data/four_methods_degs_union.csv')\n\n\n\n# Print the first 20 gene names\nprint(\"First 20 Gene Names:\")\nfor i, gene_name in enumerate(gene_names[:20], 1):\n    print(f\"{i}. {gene_name}\")\n\nFirst 20 Gene Names:\n1. A1BG\n2. A2M\n3. A2ML1\n4. AADAC\n5. AADACL2\n6. AADACL3\n7. AADACL4\n8. AB019440.50\n9. AB019441.29\n10. ABC12-47964100C23.1\n11. ABC12-49244600F4.4\n12. ABCA10\n13. ABCA12\n14. ABCA17P\n15. ABCA6\n16. ABCA8\n17. ABCA9\n18. ABCB11\n19. ABCB4\n20. ABCB5\n\n\n\n\n\n5.5.6 gene_map_feature\n\n5.5.6.1 high_auc_features_result(AUC&gt;0.9)\n\n# Extract feature indices from high_auc_features\nhigh_ranked_features = [feature for feature, auc_value in high_auc_features]\n\n# Utilize the TUGM.gene_map_feature function\ngene_to_feature_mapping_0_9 = TUGM.gene_map_feature(gene_names, high_ranked_features)\n\n# Creating a dictionary to store gene, feature, and AUC mapping\ngene_feature_auc_mapping = {}\n\n# Iterate over each gene and its corresponding feature\nfor gene, feature in gene_to_feature_mapping_0_9.items():\n    feature = str(feature)  # Adjust this based on your data format\n    # Find the corresponding AUC value for the feature\n    auc_value = next((auc for feat, auc in high_auc_features if str(feat) == feature), None)\n    # Store the gene, feature, and AUC in the mapping\n    gene_feature_auc_mapping[gene] = (feature, auc_value)\n\n# Print the first 20 gene to feature mappings along with AUC values\nprint(\"\\nFirst 20 Gene to Feature Mappings with AUC Values:\")\nfor i, (gene, (feature, auc)) in enumerate(list(gene_feature_auc_mapping.items())[:20], 1):\n    print(f\"{i}. Gene: {gene}, Feature: {feature}, AUC: {auc}\")\n\n\nFirst 20 Gene to Feature Mappings with AUC Values:\n1. Gene: ABCD1, Feature: 26, AUC: 1.0\n2. Gene: ANGPTL5, Feature: 704, AUC: 1.0\n3. Gene: ANKRD20A10P, Feature: 717, AUC: 1.0\n4. Gene: CAPN8, Feature: 1172, AUC: 1.0\n5. Gene: CTD-2340E1.2, Feature: 1899, AUC: 1.0\n6. Gene: CTD-2562J17.2, Feature: 1948, AUC: 1.0\n7. Gene: EPGN, Feature: 2338, AUC: 1.0\n8. Gene: FOSB, Feature: 2596, AUC: 0.9999973764986752\n9. Gene: AF064858.8, Feature: 582, AUC: 0.9999947529973503\n10. Gene: FAM229A, Feature: 2453, AUC: 0.9999895059947005\n11. Gene: COL9A1, Feature: 1563, AUC: 0.9999868824933756\n12. Gene: AP001107.1, Feature: 786, AUC: 0.9999842589920508\n13. Gene: FAM155B, Feature: 2419, AUC: 0.9999842589920508\n14. Gene: AC010547.9, Feature: 204, AUC: 0.9999763884880762\n15. Gene: bP-21201H5.1, Feature: 1002, AUC: 0.9999763884880762\n16. Gene: AC023590.1, Feature: 291, AUC: 0.9999658944827767\n17. Gene: AC012512.1, Feature: 237, AUC: 0.9999370359682032\n18. Gene: AC006486.10, Feature: 124, AUC: 0.9999239184615788\n19. Gene: COL7A1, Feature: 1561, AUC: 0.9999081774536296\n20. Gene: DNAH2, Feature: 2171, AUC: 0.9999081774536296\n\n\n\n\n\n5.5.6.2 NewMACFCmain_result(0.9&gt;AUC&gt;0.5)\n\nimport numpy as np\n# Generating gene_to_feature_mapping\ngene_to_feature_mapping = {}\nfor gene, feature in zip(gene_names, FName):\n    # Find the index of the feature in FName\n    index = np.where(FName == feature)[0][0]\n    # Find the corresponding AUC value using the index\n    auc_value = Fauc[index]\n    # Store the gene name, feature name, and AUC value in the mapping\n    gene_to_feature_mapping[gene] = (feature, auc_value)\n\n# Print the first 20 mappings\nprint(\"\\nFirst 20 Gene to Feature Mappings with AUC Values:\")\nfor i, (gene, (feature, auc)) in enumerate(list(gene_to_feature_mapping.items())[:20], 1):\n    print(f\"{i}. Gene: {gene}, Feature: {feature}, AUC: {auc}\")\n\n\nFirst 20 Gene to Feature Mappings with AUC Values:\n1. Gene: A1BG, Feature: 2440, AUC: 0.8999134244562793\n2. Gene: A2M, Feature: 482, AUC: 0.8998950599470052\n3. Gene: A2ML1, Feature: 848, AUC: 0.899879318939056\n4. Gene: AADAC, Feature: 1501, AUC: 0.8995041582496\n5. Gene: AADACL2, Feature: 519, AUC: 0.8994700527323767\n6. Gene: AADACL3, Feature: 1939, AUC: 0.8994595587270772\n7. Gene: AADACL4, Feature: 1914, AUC: 0.8992864076396359\n8. Gene: AB019440.50, Feature: 937, AUC: 0.8992785371356613\n9. Gene: AB019441.29, Feature: 1340, AUC: 0.8990555395230475\n10. Gene: ABC12-47964100C23.1, Feature: 100, AUC: 0.8990424220164231\n11. Gene: ABC12-49244600F4.4, Feature: 1978, AUC: 0.8989715874806516\n12. Gene: ABCA10, Feature: 1558, AUC: 0.8988351654117586\n13. Gene: ABCA12, Feature: 413, AUC: 0.8988325419104337\n14. Gene: ABCA17P, Feature: 1809, AUC: 0.8987433428653882\n15. Gene: ABCA6, Feature: 2031, AUC: 0.8987276018574389\n16. Gene: ABCA8, Feature: 780, AUC: 0.8987249783561141\n17. Gene: ABCA9, Feature: 712, AUC: 0.8986725083296168\n18. Gene: ABCB11, Feature: 1362, AUC: 0.8985649447752971\n19. Gene: ABCB4, Feature: 1136, AUC: 0.8985150982501247\n20. Gene: ABCB5, Feature: 2486, AUC: 0.898449510717003\n\n\n\n\n\n\n5.5.7 Save Data\n\n5.5.7.1 high_auc_features_result (AUC&gt;0.9)\n\nimport pandas as pd\n# Convert gene_feature_auc_mapping to a DataFrame\ngene_feature_auc_df = pd.DataFrame.from_dict(gene_feature_auc_mapping, orient='index', columns=['Feature', 'AUC'])\n\n# Reset the index to make gene names a separate column\ngene_feature_auc_df.reset_index(inplace=True)\ngene_feature_auc_df.rename(columns={'index': 'Gene'}, inplace=True)\n\n# Save the DataFrame to a CSV file\ngene_feature_auc_df.to_csv('../test_TransProPy/result/all_degs_count_exp_gene_feature_auc_mapping_0.9.csv', index=False)\n\n\n\n\n5.5.7.2 NewMACFCmain_result (0.9&gt;AUC&gt;0.5)\n\nimport pandas as pd\n# Convert gene_to_feature_mapping to a DataFrame\ngene_to_feature_df = pd.DataFrame.from_dict(gene_to_feature_mapping, orient='index', columns=['Feature', 'AUC'])\n\n# Reset the index to make gene names a separate column\ngene_to_feature_df.reset_index(inplace=True)\ngene_to_feature_df.rename(columns={'index': 'Gene'}, inplace=True)\n\n# Save the DataFrame to a CSV file\ngene_to_feature_df.to_csv('../test_TransProPy/result/all_degs_count_exp_gene_feature_auc_mapping_0.5_0.9.csv', index=False)"
  },
  {
    "objectID": "NewMACFCmain.html#usage-of-new-macfcmain-all-count-exp-b",
    "href": "NewMACFCmain.html#usage-of-new-macfcmain-all-count-exp-b",
    "title": "5  NewMACFCmain.py",
    "section": "5.6 Usage of New_MACFCmain (all_count_exp)",
    "text": "5.6 Usage of New_MACFCmain (all_count_exp)\nThis function uses the MACFC method to select feature genes relevant to classification and ranks them based on their corresponding weights.\n\n5.6.1 Import the corresponding module\n\nimport TransProPy.NewMACFCmain as TN\nimport TransProPy.UtilsFunction1.GeneNames as TUG\nimport TransProPy.UtilsFunction1.GeneToFeatureMapping as TUGM\n\n\n\n\n5.6.2 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/all_count_exp.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n  Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0  5_8S_rRNA                 0                 0                 0   \n1    5S_rRNA                 0                 0                 0   \n2        7SK                 0                 0                 0   \n3       A1BG               107                15                32   \n4   A1BG-AS1               373               112               363   \n5       A1CF                10                 0                 0   \n6        A2M            114778             93079            144772   \n7    A2M-AS1               538               140                50   \n8      A2ML1                 2               732               172   \n9  A2ML1-AS1                 0                 0                 0   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0                 0                 0                 0                 0   \n1                 0                 0                 0                 0   \n2                 0                 0                 0                 0   \n3                37                62                32                44   \n4               347               222               114               225   \n5                 1                 3                 0                 0   \n6            222082             27877             78678             67154   \n7               211                28               332               136   \n8                 5                 2                 5                38   \n9                 0                 3                 0                 0   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0                 0                 0  \n1                 0                 0  \n2                 0                 0  \n3                53                81  \n4               284               396  \n5                 0                 1  \n6            335304            127432  \n7                54               225  \n8                 5                11  \n9                 0                 1  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      2\n5  TCGA-GN-A26A-06A      2\n6  TCGA-D3-A3BZ-06A      2\n7  TCGA-D3-A51G-06A      2\n8  TCGA-EE-A29R-06A      2\n9  TCGA-D3-A2JE-06A      2\n\n\n\n\n\n5.6.3 New_MACFCmain\n\nhigh_auc_features, ranked_features, fre1, frequency, len_FName, FName, Fauc = TN.New_MACFCmain(\n    0.9,\n    100, \n    \"class\", \n    0.9, \n    data_path='../test_TransProPy/data/all_count_exp.csv', \n    label_path='../test_TransProPy/data/class.csv'\n    )\n\n\n\n\n5.6.4 Result\n\n5.6.4.1 AUC greater than 0.9 and their AUC values\n\n# Print features with AUC greater than 0.9 and their AUC values\nprint('\\nFeatures with AUC greater than 0.9:')\ntotal_features = len(high_auc_features)\nprint(f\"Total features: {total_features}\")\n\n# Determine the number of features to display\nnum_to_display = min(total_features, 20)\n\nfor i in range(num_to_display):\n    feature, auc_value = high_auc_features[i]\n    print(f\"Feature: {feature}, AUC: {auc_value}\")\n\n\nFeatures with AUC greater than 0.9:\nTotal features: 4903\nFeature: 129, AUC: 1.0\nFeature: 4701, AUC: 1.0\nFeature: 4788, AUC: 1.0\nFeature: 7317, AUC: 1.0\nFeature: 12536, AUC: 1.0\nFeature: 12784, AUC: 1.0\nFeature: 15361, AUC: 1.0\nFeature: 17372, AUC: 0.9999973764986752\nFeature: 3731, AUC: 0.9999947529973503\nFeature: 16018, AUC: 0.9999921294960255\nFeature: 16355, AUC: 0.9999895059947005\nFeature: 9932, AUC: 0.9999868824933756\nFeature: 5222, AUC: 0.9999842589920508\nFeature: 1242, AUC: 0.9999763884880762\nFeature: 6418, AUC: 0.9999763884880762\nFeature: 1915, AUC: 0.9999658944827767\nFeature: 1491, AUC: 0.9999370359682032\nFeature: 724, AUC: 0.9999239184615788\nFeature: 9930, AUC: 0.9999081774536296\nFeature: 14212, AUC: 0.9999081774536296\n\n\n\n\n\n5.6.4.2 New_MACFCmain\n\n# Print the first 20 Ranked Features\nprint(\"\\nFirst 20 Ranked Features:\")\nfor i, feature in enumerate(ranked_features[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst 20 Ranked Features:\n1. 15431\n2. 13741\n3. 6034\n4. 12954\n5. 16231\n6. 14367\n7. 10409\n8. 8777\n9. 4031\n10. 5595\n11. 3066\n12. 15959\n13. 3436\n14. 12999\n15. 15583\n16. 6533\n17. 173\n18. 6943\n19. 8390\n20. 5298\n\n\n\n\n# Print the first 20 Feature Frequencies (fre1)\nprint(\"\\nFirst 20 Feature Frequencies:\")\nfor i, (feature, freq) in enumerate(list(fre1.items())[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFirst 20 Feature Frequencies:\n1. Feature: 15431, Frequency: 1\n2. Feature: 13741, Frequency: 62\n3. Feature: 6034, Frequency: 51\n4. Feature: 12954, Frequency: 1\n5. Feature: 16231, Frequency: 2\n6. Feature: 14367, Frequency: 12\n7. Feature: 10409, Frequency: 2\n8. Feature: 8777, Frequency: 1\n9. Feature: 4031, Frequency: 3\n10. Feature: 5595, Frequency: 1\n11. Feature: 3066, Frequency: 1\n12. Feature: 15959, Frequency: 1\n13. Feature: 3436, Frequency: 1\n14. Feature: 12999, Frequency: 1\n15. Feature: 15583, Frequency: 2\n16. Feature: 6533, Frequency: 4\n17. Feature: 173, Frequency: 2\n18. Feature: 6943, Frequency: 2\n19. Feature: 8390, Frequency: 2\n20. Feature: 5298, Frequency: 1\n\n\n\n\n# Print the Features with a frequency greater than 1 \nprint(\"\\nFeatures with a frequency greater than 1 :\")\nfor i, (feature, freq) in enumerate(frequency[:20], 1):\n    print(f\"{i}. Feature: {feature}, Frequency: {freq}\")\n\n\nFeatures with a frequency greater than 1 :\n1. Feature: 13741, Frequency: 62\n2. Feature: 6034, Frequency: 51\n3. Feature: 14367, Frequency: 12\n4. Feature: 10844, Frequency: 8\n5. Feature: 16078, Frequency: 7\n6. Feature: 6533, Frequency: 4\n7. Feature: 4031, Frequency: 3\n8. Feature: 8390, Frequency: 2\n9. Feature: 6943, Frequency: 2\n10. Feature: 586, Frequency: 2\n11. Feature: 5249, Frequency: 2\n12. Feature: 173, Frequency: 2\n13. Feature: 16231, Frequency: 2\n14. Feature: 16178, Frequency: 2\n15. Feature: 15583, Frequency: 2\n16. Feature: 10409, Frequency: 2\n\n\n\n\n# Print the length of FName (len_FName)\nprint(\"\\nCount of Features with AUC &gt; 0.5 (len_FName):\")\nprint(len_FName)\n\n\nCount of Features with AUC &gt; 0.5 (len_FName):\n7726\n\n\n\n\n# Print the first 10 Features with AUC &gt; 0.5 (FName)\nprint(\"\\nFirst few Features with AUC &gt; 0.5:\")\nfor i, feature in enumerate(FName[:20], 1):\n    print(f\"{i}. {feature}\")\n\n\nFirst few Features with AUC &gt; 0.5:\n1. 15431\n2. 12954\n3. 16231\n4. 8777\n5. 5595\n6. 3066\n7. 15959\n8. 3436\n9. 12999\n10. 17823\n11. 17634\n12. 14506\n13. 2797\n14. 5249\n15. 17163\n16. 10844\n17. 16206\n18. 5614\n19. 5193\n20. 4601\n\n\n\n\n# Print the first 10 AUC Values for Ranked Features (Fauc)\nprint(\"\\nFirst few AUC Values for Ranked Features:\")\nfor i, auc in enumerate(Fauc[:20], 1):\n    print(f\"{i}. AUC: {auc}\")\n\n\nFirst few AUC Values for Ranked Features:\n1. AUC: 0.8999763884880762\n2. AUC: 0.8999685179841016\n3. AUC: 0.8999658944827768\n4. AUC: 0.8999580239788021\n5. AUC: 0.8998924364456804\n6. AUC: 0.8998740719364063\n7. AUC: 0.899860954429782\n8. AUC: 0.8998583309284571\n9. AUC: 0.8998557074271323\n10. AUC: 0.8998058609019598\n11. AUC: 0.8997953668966603\n12. AUC: 0.8997560143767872\n13. AUC: 0.8997035443502899\n14. AUC: 0.8996930503449905\n15. AUC: 0.8996878033423407\n16. AUC: 0.8996510743237925\n17. AUC: 0.8996064748012698\n18. AUC: 0.8996064748012698\n19. AUC: 0.8995933572946454\n20. AUC: 0.8995382637668232\n\n\n\n\n\n\n5.6.5 gene_name\n\ngene_names = TUG.gene_name(data_path='../test_TransProPy/data/all_count_exp.csv')\n\n\n\n# Print the first 20 gene names\nprint(\"First 20 Gene Names:\")\nfor i, gene_name in enumerate(gene_names[:20], 1):\n    print(f\"{i}. {gene_name}\")\n\nFirst 20 Gene Names:\n1. 5_8S_rRNA\n2. 5S_rRNA\n3. 7SK\n4. A1BG\n5. A1BG-AS1\n6. A1CF\n7. A2M\n8. A2M-AS1\n9. A2ML1\n10. A2ML1-AS1\n11. A2ML1-AS2\n12. A2MP1\n13. A3GALT2\n14. A4GALT\n15. A4GNT\n16. AA06\n17. AAAS\n18. AACS\n19. AACSP1\n20. AADAC\n\n\n\n\n\n5.6.6 gene_map_feature\n\n5.6.6.1 high_auc_features_result (AUC&gt;0.9)\n\n# Extract feature indices from high_auc_features\nhigh_ranked_features = [feature for feature, auc_value in high_auc_features]\n\n# Utilize the TUGM.gene_map_feature function\ngene_to_feature_mapping_0_9 = TUGM.gene_map_feature(gene_names, high_ranked_features)\n\n# Creating a dictionary to store gene, feature, and AUC mapping\ngene_feature_auc_mapping = {}\n\n# Iterate over each gene and its corresponding feature\nfor gene, feature in gene_to_feature_mapping_0_9.items():\n    feature = str(feature)  # Adjust this based on your data format\n    # Find the corresponding AUC value for the feature\n    auc_value = next((auc for feat, auc in high_auc_features if str(feat) == feature), None)\n    # Store the gene, feature, and AUC in the mapping\n    gene_feature_auc_mapping[gene] = (feature, auc_value)\n\n# Print the first 20 gene to feature mappings along with AUC values\nprint(\"\\nFirst 20 Gene to Feature Mappings with AUC Values:\")\nfor i, (gene, (feature, auc)) in enumerate(list(gene_feature_auc_mapping.items())[:20], 1):\n    print(f\"{i}. Gene: {gene}, Feature: {feature}, AUC: {auc}\")\n\n\nFirst 20 Gene to Feature Mappings with AUC Values:\n1. Gene: ABHD15, Feature: 129, AUC: 1.0\n2. Gene: AF064858.11, Feature: 4701, AUC: 1.0\n3. Gene: AFF4, Feature: 4788, AUC: 1.0\n4. Gene: AY269186.1, Feature: 7317, AUC: 1.0\n5. Gene: CTD-2530H12.5, Feature: 12536, AUC: 1.0\n6. Gene: CTD-2650P22.2, Feature: 12784, AUC: 1.0\n7. Gene: FAM197Y8, Feature: 15361, AUC: 1.0\n8. Gene: GS1-25M2.1, Feature: 17372, AUC: 0.9999973764986752\n9. Gene: AC107016.1, Feature: 3731, AUC: 0.9999947529973503\n10. Gene: FLJ42102, Feature: 16018, AUC: 0.9999921294960255\n11. Gene: FUT9, Feature: 16355, AUC: 0.9999895059947005\n12. Gene: CICP26, Feature: 9932, AUC: 0.9999868824933756\n13. Gene: AL133475.1, Feature: 5222, AUC: 0.9999842589920508\n14. Gene: AC008703.2, Feature: 1242, AUC: 0.9999763884880762\n15. Gene: AP001464.4, Feature: 6418, AUC: 0.9999763884880762\n16. Gene: AC016561.1, Feature: 1915, AUC: 0.9999658944827767\n17. Gene: AC010148.1, Feature: 1491, AUC: 0.9999370359682032\n18. Gene: AC005822.1, Feature: 724, AUC: 0.9999239184615788\n19. Gene: CICP23, Feature: 9930, AUC: 0.9999081774536296\n20. Gene: DUSP12P1, Feature: 14212, AUC: 0.9999081774536296\n\n\n\n\n\n5.6.6.2 NewMACFCmain_result (0.9&gt;AUC&gt;0.5)\n\nimport numpy as np\n# Generating gene_to_feature_mapping\ngene_to_feature_mapping = {}\nfor gene, feature in zip(gene_names, FName):\n    # Find the index of the feature in FName\n    index = np.where(FName == feature)[0][0]\n    # Find the corresponding AUC value using the index\n    auc_value = Fauc[index]\n    # Store the gene name, feature name, and AUC value in the mapping\n    gene_to_feature_mapping[gene] = (feature, auc_value)\n\n# Print the first 20 mappings\nprint(\"\\nFirst 20 Gene to Feature Mappings with AUC Values:\")\nfor i, (gene, (feature, auc)) in enumerate(list(gene_to_feature_mapping.items())[:20], 1):\n    print(f\"{i}. Gene: {gene}, Feature: {feature}, AUC: {auc}\")\n\n\nFirst 20 Gene to Feature Mappings with AUC Values:\n1. Gene: 5_8S_rRNA, Feature: 15431, AUC: 0.8999763884880762\n2. Gene: 5S_rRNA, Feature: 12954, AUC: 0.8999685179841016\n3. Gene: 7SK, Feature: 16231, AUC: 0.8999658944827768\n4. Gene: A1BG, Feature: 8777, AUC: 0.8999580239788021\n5. Gene: A1BG-AS1, Feature: 5595, AUC: 0.8998924364456804\n6. Gene: A1CF, Feature: 3066, AUC: 0.8998740719364063\n7. Gene: A2M, Feature: 15959, AUC: 0.899860954429782\n8. Gene: A2M-AS1, Feature: 3436, AUC: 0.8998583309284571\n9. Gene: A2ML1, Feature: 12999, AUC: 0.8998557074271323\n10. Gene: A2ML1-AS1, Feature: 17823, AUC: 0.8998058609019598\n11. Gene: A2ML1-AS2, Feature: 17634, AUC: 0.8997953668966603\n12. Gene: A2MP1, Feature: 14506, AUC: 0.8997560143767872\n13. Gene: A3GALT2, Feature: 2797, AUC: 0.8997035443502899\n14. Gene: A4GALT, Feature: 5249, AUC: 0.8996930503449905\n15. Gene: A4GNT, Feature: 17163, AUC: 0.8996878033423407\n16. Gene: AA06, Feature: 10844, AUC: 0.8996510743237925\n17. Gene: AAAS, Feature: 16206, AUC: 0.8996064748012698\n18. Gene: AACS, Feature: 5614, AUC: 0.8996064748012698\n19. Gene: AACSP1, Feature: 5193, AUC: 0.8995933572946454\n20. Gene: AADAC, Feature: 4601, AUC: 0.8995382637668232\n\n\n\n\n\n\n5.6.7 Save Data\n\n5.6.7.1 high_auc_features_result (AUC&gt;0.9)\n\nimport pandas as pd\n# Convert gene_feature_auc_mapping to a DataFrame\ngene_feature_auc_df = pd.DataFrame.from_dict(gene_feature_auc_mapping, orient='index', columns=['Feature', 'AUC'])\n\n# Reset the index to make gene names a separate column\ngene_feature_auc_df.reset_index(inplace=True)\ngene_feature_auc_df.rename(columns={'index': 'Gene'}, inplace=True)\n\n# Save the DataFrame to a CSV file\ngene_feature_auc_df.to_csv('../test_TransProPy/result/all_count_exp_gene_feature_auc_mapping_0.9.csv', index=False)\n\n\n\n\n5.6.7.2 NewMACFCmain_result (0.9&gt;AUC&gt;0.5)\n\nimport pandas as pd\n# Convert gene_to_feature_mapping to a DataFrame\ngene_to_feature_df = pd.DataFrame.from_dict(gene_to_feature_mapping, orient='index', columns=['Feature', 'AUC'])\n\n# Reset the index to make gene names a separate column\ngene_to_feature_df.reset_index(inplace=True)\ngene_to_feature_df.rename(columns={'index': 'Gene'}, inplace=True)\n\n# Save the DataFrame to a CSV file\ngene_to_feature_df.to_csv('../test_TransProPy/result/all_count_exp_gene_feature_auc_mapping_0.5_0.9.csv', index=False)"
  },
  {
    "objectID": "NewMACFCmain.html#references-b",
    "href": "NewMACFCmain.html#references-b",
    "title": "5  NewMACFCmain.py",
    "section": "5.7 References",
    "text": "5.7 References\n\n\nSu,Y., Du,K., Wang,J., Wei,J. and Liu,J. (2022) Multi-variable AUC for sifting complementary features and its biomedical application. Briefings in Bioinformatics, 23, bbac029."
  },
  {
    "objectID": "AutogluonTimeLimit.html#parameters-c",
    "href": "AutogluonTimeLimit.html#parameters-c",
    "title": "6  AutogluonTimeLimit.py",
    "section": "6.1 Parameters",
    "text": "6.1 Parameters\n\n\ngene_data_path (str):\n\nPath to the gene expression data CSV file.\nFor example: ‘../data/gene_tpm.csv’\n\nclass_data_path (str):\n\nPath to the class data CSV file.\nFor example: ‘../data/tumor_class.csv’\n\nlabel_column (str):\n\nName of the column in the dataset that is the target label for prediction.\n\ntest_size (float):\n\nProportion of the data to be used as the test set.\n\nthreshold (float):\n\nThe threshold used to filter out rows based on the proportion of non-zero values.\n\nrandom_feature (int, optional):\n\nThe number of random feature to select. If None, no random feature selection is performed.\nDefault is None.\n\nnum_bag_folds (int, optional):\n\nPlease note: This parameter annotation source can be referred to the documentation link in References.\nNumber of folds used for bagging of models. When num_bag_folds = k, training time is roughly increased by a factor of k (set = 0 to disable bagging). Disabled by default (0), but we recommend values between 5-10 to maximize predictive performance. Increasing num_bag_folds will result in models with lower bias but that are more prone to overfitting. num_bag_folds = 1 is an invalid value, and will raise a ValueError. Values &gt; 10 may produce diminishing returns, and can even harm overall results due to overfitting. To further improve predictions, avoid increasing num_bag_folds much beyond 10 and instead increase num_bag_sets.\ndefault = None\n\nnum_stack_levels (int, optional):\n\nPlease note: This parameter annotation source can be referred to the documentation link in References.\nNumber of stacking levels to use in stack ensemble. Roughly increases model training time by factor of num_stack_levels+1 (set = 0 to disable stack ensembling). Disabled by default (0), but we recommend values between 1-3 to maximize predictive performance. To prevent overfitting, num_bag_folds &gt;= 2 must also be set or else a ValueError will be raised.\ndefault = None\n\ntime_limit (int, optional):\n\nTime limit for training in seconds.\nDefault is 120.\n\nrandom_state (int, optional):\n\nThe seed used by the random number generator.\nDefault is 42."
  },
  {
    "objectID": "AutogluonTimeLimit.html#returns-c",
    "href": "AutogluonTimeLimit.html#returns-c",
    "title": "6  AutogluonTimeLimit.py",
    "section": "6.2 Returns",
    "text": "6.2 Returns\n\n\nimportance (DataFrame):\n\nDataFrame containing feature importance.\n\nleaderboard (DataFrame):\n\nDataFrame containing model performance on the test data."
  },
  {
    "objectID": "AutogluonTimeLimit.html#usage-of-autogluon_timelimit",
    "href": "AutogluonTimeLimit.html#usage-of-autogluon_timelimit",
    "title": "6  AutogluonTimeLimit.py",
    "section": "6.3 Usage of Autogluon_TimeLimit",
    "text": "6.3 Usage of Autogluon_TimeLimit\nPerforming training and prediction tasks on tabular data using Autogluon.\n\n6.3.1 Objectives\n\n6.3.1.1 Model Training and Selection\n\nAutogluon will attempt various models and hyperparameter combinations within a given time limit to find the best-performing model on the test data. During training, Autogluon may output training logs displaying performance metrics and progress information for different models. The goal is to select the best-performing model for use in subsequent prediction tasks.\n\n\n\n6.3.1.2 Leaderboard\n\nThe leaderboard displays performance scores of different models on the test data, typically including metrics like accuracy, precision, recall, and more. The purpose is to assist users in understanding the performance of different models to choose the most suitable model for predictions.\n\n\n\n6.3.1.3 Importance\n\nFeature importance indicates which features are most critical for the model’s prediction performance. The purpose is to help users understand the importance of specific features in the data, which can be used for feature selection or further data analysis.\n\n\n\n\n6.3.2 Note\n\nPlease note that Autogluon’s output results may vary depending on your data and task. You can review the generated model leaderboard and feature importance to understand model performance and the significance of specific features in the data. These results can aid you in making better predictions and decisions."
  },
  {
    "objectID": "AutogluonTimeLimit.html#insignificant-correlation-c",
    "href": "AutogluonTimeLimit.html#insignificant-correlation-c",
    "title": "6  AutogluonTimeLimit.py",
    "section": "6.4 Insignificant Correlation",
    "text": "6.4 Insignificant Correlation\n\n\nPlease note:Data characteristics: Features have weak correlation with the classification.\nRandomly shuffling the class labels to a certain extent simulates reducing the correlation.\n\n\n\n6.4.1 Import the corresponding module\n\nfrom TransProPy.AutogluonTimeLimit import Autogluon_TimeLimit\n\n\n\n\n6.4.2 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/four_methods_degs_intersection.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n  Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0        A2M         16.808499         16.506184         17.143433   \n1      A2ML1          1.584963          9.517669          7.434628   \n2      AADAC          4.000000          2.584963          1.584963   \n3    AADACL2          1.000000          1.000000          0.000000   \n4     ABCA12          4.523562          4.321928          3.906891   \n5    ABCA17P          4.584963          5.169925          3.807355   \n6      ABCA9          9.753217          6.906891          3.459432   \n7      ABCB4          9.177420          6.700440          5.000000   \n8      ABCB5         10.134426          4.169925          9.167418   \n9     ABCC11         10.092757          6.491853          5.459432   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0         17.760739         14.766839         16.263691         16.035207   \n1          2.584963          1.584963          2.584963          5.285402   \n2          0.000000          0.000000          0.000000          3.321928   \n3          0.000000          1.000000          0.000000          0.000000   \n4          3.459432          1.584963          3.000000          4.321928   \n5          8.366322          7.228819          7.076816          4.584963   \n6          2.584963          6.357552          6.475733          7.330917   \n7          9.342075         10.392317          7.383704         11.032735   \n8          4.906891         11.340963          3.169925         11.161762   \n9          6.807355          4.247928          5.459432          5.977280   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0         18.355114         16.959379  \n1          2.584963          3.584963  \n2          1.000000          4.584963  \n3          0.000000          1.000000  \n4          4.807355          3.700440  \n5          6.409391          7.139551  \n6          7.954196          9.177420  \n7         10.082149         10.088788  \n8          4.643856         12.393927  \n9          5.614710          8.233620  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/random_classification_class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      1\n5  TCGA-GN-A26A-06A      1\n6  TCGA-D3-A3BZ-06A      1\n7  TCGA-D3-A51G-06A      1\n8  TCGA-EE-A29R-06A      1\n9  TCGA-D3-A2JE-06A      1\n\n\n\n\n\n6.4.3 Autogluon_TimeLimit\n\nimportance, leaderboard = Autogluon_TimeLimit(\n    gene_data_path='../test_TransProPy/data/four_methods_degs_intersection.csv', \n    class_data_path='../test_TransProPy/data/random_classification_class.csv', \n    label_column='class',  \n    test_size=0.3, \n    threshold=0.9, \n    random_feature=None, \n    num_bag_folds=None, \n    num_stack_levels=None, \n    time_limit=1000, \n    random_state=42\n    )\n\nNo path specified. Models will be saved in: \"AutogluonModels\\ag-20240623_095256\\\"\n\n\nBeginning AutoGluon training ... Time limit = 1000s\n\n\nAutoGluon will save models to \"AutogluonModels\\ag-20240623_095256\\\"\n\n\nAutoGluon Version:  0.8.2\n\n\nPython Version:     3.10.11\n\n\nOperating System:   Windows\n\n\nPlatform Machine:   AMD64\n\n\nPlatform Version:   10.0.19044\n\n\nDisk Space Avail:   144.06 GB / 925.93 GB (15.6%)\n\n\nTrain Data Rows:    896\n\n\nTrain Data Columns: 1605\n\n\nLabel Column: class\n\n\nPreprocessing data ...\n\n\nAutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n\n\n    2 unique label values:  [1, 2]\n\n\n    If 'binary' is not the correct problem_type, please manually specify the problem_type parameter during predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression'])\n\n\nSelected class &lt;--&gt; label mapping:  class 1 = 2, class 0 = 1\n\n\n    Note: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive (2) vs negative (1) class.\n    To explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n\n\nUsing Feature Generators to preprocess the data ...\n\n\nFitting AutoMLPipelineFeatureGenerator...\n\n\n    Available Memory:                    23484.58 MB\n\n\n    Train Data (Original)  Memory Usage: 11.5 MB (0.0% of available memory)\n\n\n    Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n\n\n    Stage 1 Generators:\n\n\n        Fitting AsTypeFeatureGenerator...\n\n\n    Stage 2 Generators:\n\n\n        Fitting FillNaFeatureGenerator...\n\n\n    Stage 3 Generators:\n\n\n        Fitting IdentityFeatureGenerator...\n\n\n    Stage 4 Generators:\n\n\n        Fitting DropUniqueFeatureGenerator...\n\n\n    Stage 5 Generators:\n\n\n        Fitting DropDuplicatesFeatureGenerator...\n\n\n    Types of features in original data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    Types of features in processed data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    1.2s = Fit runtime\n\n\n    1605 features in original data used to generate 1605 features in processed data.\n\n\n    Train Data (Processed) Memory Usage: 11.5 MB (0.0% of available memory)\n\n\nData preprocessing and feature engineering runtime = 1.27s ...\n\n\nAutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n\n\n    To change this, specify the eval_metric parameter of Predictor()\n\n\nAutomatically generating train/validation split with holdout_frac=0.2, Train Rows: 716, Val Rows: 180\n\n\nUser-specified model hyperparameters to be fit:\n{\n    'NN_TORCH': {},\n    'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n    'CAT': {},\n    'XGB': {},\n    'FASTAI': {},\n    'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n    'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n    'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],\n}\n\n\nFitting 13 L1 models ...\n\n\nFitting model: KNeighborsUnif ... Training model for up to 998.73s of the 998.72s of remaining time.\n\n\n    0.5722   = Validation score   (accuracy)\n\n\n    1.04s    = Training   runtime\n\n\n    0.15s    = Validation runtime\n\n\nFitting model: KNeighborsDist ... Training model for up to 997.52s of the 997.51s of remaining time.\n\n\n    0.5722   = Validation score   (accuracy)\n\n\n    0.12s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: LightGBMXT ... Training model for up to 997.35s of the 997.33s of remaining time.\n\n\n    0.7  = Validation score   (accuracy)\n\n\n    1.9s     = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: LightGBM ... Training model for up to 995.42s of the 995.4s of remaining time.\n\n\n    0.6667   = Validation score   (accuracy)\n\n\n    4.59s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: RandomForestGini ... Training model for up to 990.78s of the 990.77s of remaining time.\n\n\n    0.6278   = Validation score   (accuracy)\n\n\n    1.03s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: RandomForestEntr ... Training model for up to 989.7s of the 989.69s of remaining time.\n\n\n    0.6167   = Validation score   (accuracy)\n\n\n    1.05s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: CatBoost ... Training model for up to 988.59s of the 988.58s of remaining time.\n\n\n    0.6667   = Validation score   (accuracy)\n\n\n    18.54s   = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: ExtraTreesGini ... Training model for up to 970.02s of the 970.0s of remaining time.\n\n\n    0.6167   = Validation score   (accuracy)\n\n\n    0.75s    = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: ExtraTreesEntr ... Training model for up to 969.21s of the 969.2s of remaining time.\n\n\n    0.6222   = Validation score   (accuracy)\n\n\n    0.7s     = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: NeuralNetFastAI ... Training model for up to 968.46s of the 968.45s of remaining time.\n\n\n    0.6722   = Validation score   (accuracy)\n\n\n    1.55s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: XGBoost ... Training model for up to 966.86s of the 966.85s of remaining time.\n\n\n    0.6778   = Validation score   (accuracy)\n\n\n    13.11s   = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: NeuralNetTorch ... Training model for up to 953.71s of the 953.7s of remaining time.\n\n\n    0.6889   = Validation score   (accuracy)\n\n\n    3.59s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: LightGBMLarge ... Training model for up to 950.07s of the 950.06s of remaining time.\n\n\n    0.6556   = Validation score   (accuracy)\n\n\n    14.09s   = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: WeightedEnsemble_L2 ... Training model for up to 360.0s of the 935.91s of remaining time.\n\n\n    0.7056   = Validation score   (accuracy)\n\n\n    0.33s    = Training   runtime\n\n\n    0.0s     = Validation runtime\n\n\nAutoGluon training complete, total runtime = 64.45s ... Best model: \"WeightedEnsemble_L2\"\n\n\nTabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels\\ag-20240623_095256\\\")\n\n\nComputing feature importance via permutation shuffling for 1605 features using 385 rows with 5 shuffle sets...\n\n\n    472.19s = Expected runtime (94.44s per shuffle set)\n\n\n    82.6s   = Actual runtime (Completed 5 of 5 shuffle sets)\n\n\n                  model  score_test  score_val  pred_time_test  pred_time_val   fit_time  pred_time_test_marginal  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n0              LightGBM    0.633766   0.666667        0.016943       0.005981   4.588049                 0.016943                0.005981           4.588049            1       True          4\n1            LightGBMXT    0.631169   0.700000        0.021927       0.007974   1.897722                 0.021927                0.007974           1.897722            1       True          3\n2               XGBoost    0.631169   0.677778        0.028902       0.010963  13.114356                 0.028902                0.010963          13.114356            1       True         11\n3        ExtraTreesGini    0.631169   0.616667        0.049867       0.024917   0.751848                 0.049867                0.024917           0.751848            1       True          8\n4   WeightedEnsemble_L2    0.631169   0.705556        0.063785       0.161460   3.266271                 0.001992                0.000000           0.331994            2       True         14\n5        KNeighborsDist    0.623377   0.572222        0.038870       0.033847   0.116758                 0.038870                0.033847           0.116758            1       True          2\n6        KNeighborsUnif    0.623377   0.572222        0.039866       0.153486   1.036556                 0.039866                0.153486           1.036556            1       True          1\n7        ExtraTreesEntr    0.623377   0.622222        0.041860       0.023920   0.698778                 0.041860                0.023920           0.698778            1       True          9\n8      RandomForestEntr    0.620779   0.616667        0.047839       0.032891   1.051186                 0.047839                0.032891           1.051186            1       True          6\n9        NeuralNetTorch    0.615584   0.688889        0.040894       0.031893   3.594558                 0.040894                0.031893           3.594558            1       True         12\n10     RandomForestGini    0.610390   0.627778        0.065781       0.033887   1.027621                 0.065781                0.033887           1.027621            1       True          5\n11      NeuralNetFastAI    0.589610   0.672222        0.024917       0.010964   1.553171                 0.024917                0.010964           1.553171            1       True         10\n12        LightGBMLarge    0.576623   0.655556        0.013923       0.007973  14.086270                 0.013923                0.007973          14.086270            1       True         13\n13             CatBoost    0.571429   0.666667        0.032890       0.016943  18.538818                 0.032890                0.016943          18.538818            1       True          7\n\n\n\n\n\n6.4.4 Return\n\n# Filtering the DataFrame to get features where importance &gt; 0 and p_value &lt; 0.05\nfiltered_importance = importance[(importance['importance'] &gt; 0) & (importance['p_value'] &lt; 0.05)]\n# Counting the number of such features\nnumber_of_features = filtered_importance.shape[0]\n# Printing the result\nprint(f\"Number of features with importance &gt; 0 and p_value &lt; 0.05: {number_of_features}\")\n\nNumber of features with importance &gt; 0 and p_value &lt; 0.05: 703\n\n\n\n\n# Display the top 20 rows of the Importance DataFrame\nprint(\"Top 20 rows of Importance DataFrame:\")\nprint(importance.head(20))\n\nTop 20 rows of Importance DataFrame:\n              importance    stddev   p_value  n  p99_high   p99_low\nRP11-641D5.1    0.012987  0.002597  0.000182  5  0.018335  0.007639\nCKM             0.012468  0.002173  0.000106  5  0.016942  0.007993\nZBED3-AS1       0.011948  0.003939  0.001234  5  0.020059  0.003837\nPPP1R14C        0.010909  0.005323  0.005082  5  0.021869 -0.000051\nRPS10-NUDT3     0.010909  0.006201  0.008525  5  0.023677 -0.001859\nAOX1            0.010909  0.002173  0.000179  5  0.015384  0.006435\nRP11-411B6.6    0.010909  0.003387  0.000985  5  0.017882  0.003936\nNTRK1           0.010390  0.007113  0.015453  5  0.025036 -0.004257\nGAPDHP1         0.010390  0.001837  0.000112  5  0.014171  0.006608\nSPP1            0.009870  0.003387  0.001431  5  0.016843  0.002897\nCLDN1           0.009351  0.004718  0.005705  5  0.019066 -0.000365\nADORA3          0.009351  0.003939  0.003027  5  0.017461  0.001240\nAC016292.3      0.008831  0.004718  0.006931  5  0.018546 -0.000884\nCORIN           0.008312  0.002845  0.001419  5  0.014170  0.002453\nGAS6            0.008312  0.001162  0.000045  5  0.010703  0.005920\nSTMN2           0.007792  0.001837  0.000344  5  0.011574  0.004011\nMAPK13          0.007792  0.001837  0.000344  5  0.011574  0.004011\nLYPD6B          0.007792  0.003181  0.002704  5  0.014342  0.001242\nTBC1D3B         0.007273  0.002173  0.000853  5  0.011747  0.002798\nMT1M            0.007273  0.003853  0.006733  5  0.015205 -0.000660\n\n\n\n\n# Display the top 20 rows of the Leaderboard DataFrame\nprint(\"\\nTop 20 rows of Leaderboard DataFrame:\")\nprint(leaderboard.head(20))\n\n\nTop 20 rows of Leaderboard DataFrame:\n                  model  score_test  score_val  pred_time_test  pred_time_val  \\\n0              LightGBM    0.633766   0.666667        0.016943       0.005981   \n1            LightGBMXT    0.631169   0.700000        0.021927       0.007974   \n2               XGBoost    0.631169   0.677778        0.028902       0.010963   \n3        ExtraTreesGini    0.631169   0.616667        0.049867       0.024917   \n4   WeightedEnsemble_L2    0.631169   0.705556        0.063785       0.161460   \n5        KNeighborsDist    0.623377   0.572222        0.038870       0.033847   \n6        KNeighborsUnif    0.623377   0.572222        0.039866       0.153486   \n7        ExtraTreesEntr    0.623377   0.622222        0.041860       0.023920   \n8      RandomForestEntr    0.620779   0.616667        0.047839       0.032891   \n9        NeuralNetTorch    0.615584   0.688889        0.040894       0.031893   \n10     RandomForestGini    0.610390   0.627778        0.065781       0.033887   \n11      NeuralNetFastAI    0.589610   0.672222        0.024917       0.010964   \n12        LightGBMLarge    0.576623   0.655556        0.013923       0.007973   \n13             CatBoost    0.571429   0.666667        0.032890       0.016943   \n\n     fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n0    4.588049                 0.016943                0.005981   \n1    1.897722                 0.021927                0.007974   \n2   13.114356                 0.028902                0.010963   \n3    0.751848                 0.049867                0.024917   \n4    3.266271                 0.001992                0.000000   \n5    0.116758                 0.038870                0.033847   \n6    1.036556                 0.039866                0.153486   \n7    0.698778                 0.041860                0.023920   \n8    1.051186                 0.047839                0.032891   \n9    3.594558                 0.040894                0.031893   \n10   1.027621                 0.065781                0.033887   \n11   1.553171                 0.024917                0.010964   \n12  14.086270                 0.013923                0.007973   \n13  18.538818                 0.032890                0.016943   \n\n    fit_time_marginal  stack_level  can_infer  fit_order  \n0            4.588049            1       True          4  \n1            1.897722            1       True          3  \n2           13.114356            1       True         11  \n3            0.751848            1       True          8  \n4            0.331994            2       True         14  \n5            0.116758            1       True          2  \n6            1.036556            1       True          1  \n7            0.698778            1       True          9  \n8            1.051186            1       True          6  \n9            3.594558            1       True         12  \n10           1.027621            1       True          5  \n11           1.553171            1       True         10  \n12          14.086270            1       True         13  \n13          18.538818            1       True          7  \n\n\n\n\n\n6.4.5 Save Data\n\n# Save the Importance DataFrame to a CSV file\nimportance.to_csv('../test_TransProPy/data/Insignificant_correlation_Autogluon_TimeLimit_importance.csv', index=False)\n\n# Save the Leaderboard DataFrame to a CSV file\nleaderboard.to_csv('../test_TransProPy/data/Insignificant_correlation_Autogluon_TimeLimit_leaderboard.csv', index=False)"
  },
  {
    "objectID": "AutogluonTimeLimit.html#significant-correlation-c",
    "href": "AutogluonTimeLimit.html#significant-correlation-c",
    "title": "6  AutogluonTimeLimit.py",
    "section": "6.5 Significant Correlation",
    "text": "6.5 Significant Correlation\n\n\nPlease note:Data characteristics: Features have strong correlation with the classification.\n\n\n\n6.5.1 Import the corresponding module\n\nfrom TransProPy.AutogluonTimeLimit import Autogluon_TimeLimit\n\n\n\n\n6.5.2 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/four_methods_degs_intersection.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n  Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0        A2M         16.808499         16.506184         17.143433   \n1      A2ML1          1.584963          9.517669          7.434628   \n2      AADAC          4.000000          2.584963          1.584963   \n3    AADACL2          1.000000          1.000000          0.000000   \n4     ABCA12          4.523562          4.321928          3.906891   \n5    ABCA17P          4.584963          5.169925          3.807355   \n6      ABCA9          9.753217          6.906891          3.459432   \n7      ABCB4          9.177420          6.700440          5.000000   \n8      ABCB5         10.134426          4.169925          9.167418   \n9     ABCC11         10.092757          6.491853          5.459432   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0         17.760739         14.766839         16.263691         16.035207   \n1          2.584963          1.584963          2.584963          5.285402   \n2          0.000000          0.000000          0.000000          3.321928   \n3          0.000000          1.000000          0.000000          0.000000   \n4          3.459432          1.584963          3.000000          4.321928   \n5          8.366322          7.228819          7.076816          4.584963   \n6          2.584963          6.357552          6.475733          7.330917   \n7          9.342075         10.392317          7.383704         11.032735   \n8          4.906891         11.340963          3.169925         11.161762   \n9          6.807355          4.247928          5.459432          5.977280   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0         18.355114         16.959379  \n1          2.584963          3.584963  \n2          1.000000          4.584963  \n3          0.000000          1.000000  \n4          4.807355          3.700440  \n5          6.409391          7.139551  \n6          7.954196          9.177420  \n7         10.082149         10.088788  \n8          4.643856         12.393927  \n9          5.614710          8.233620  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      2\n5  TCGA-GN-A26A-06A      2\n6  TCGA-D3-A3BZ-06A      2\n7  TCGA-D3-A51G-06A      2\n8  TCGA-EE-A29R-06A      2\n9  TCGA-D3-A2JE-06A      2\n\n\n\n\n\n6.5.3 Autogluon_TimeLimit\n\nimportance, leaderboard = Autogluon_TimeLimit(\n    gene_data_path='../test_TransProPy/data/four_methods_degs_intersection.csv', \n    class_data_path='../test_TransProPy/data/class.csv', \n    label_column='class',  \n    test_size=0.3, \n    threshold=0.9, \n    random_feature=None, \n    num_bag_folds=None, \n    num_stack_levels=None, \n    time_limit=1000, \n    random_state=42\n    )\n\nNo path specified. Models will be saved in: \"AutogluonModels\\ag-20240623_095525\\\"\n\n\nBeginning AutoGluon training ... Time limit = 1000s\n\n\nAutoGluon will save models to \"AutogluonModels\\ag-20240623_095525\\\"\n\n\nAutoGluon Version:  0.8.2\n\n\nPython Version:     3.10.11\n\n\nOperating System:   Windows\n\n\nPlatform Machine:   AMD64\n\n\nPlatform Version:   10.0.19044\n\n\nDisk Space Avail:   144.01 GB / 925.93 GB (15.6%)\n\n\nTrain Data Rows:    896\n\n\nTrain Data Columns: 1605\n\n\nLabel Column: class\n\n\nPreprocessing data ...\n\n\nAutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n\n\n    2 unique label values:  [2, 1]\n\n\n    If 'binary' is not the correct problem_type, please manually specify the problem_type parameter during predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression'])\n\n\nSelected class &lt;--&gt; label mapping:  class 1 = 2, class 0 = 1\n\n\n    Note: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive (2) vs negative (1) class.\n    To explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n\n\nUsing Feature Generators to preprocess the data ...\n\n\nFitting AutoMLPipelineFeatureGenerator...\n\n\n    Available Memory:                    23224.82 MB\n\n\n    Train Data (Original)  Memory Usage: 11.5 MB (0.0% of available memory)\n\n\n    Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n\n\n    Stage 1 Generators:\n\n\n        Fitting AsTypeFeatureGenerator...\n\n\n    Stage 2 Generators:\n\n\n        Fitting FillNaFeatureGenerator...\n\n\n    Stage 3 Generators:\n\n\n        Fitting IdentityFeatureGenerator...\n\n\n    Stage 4 Generators:\n\n\n        Fitting DropUniqueFeatureGenerator...\n\n\n    Stage 5 Generators:\n\n\n        Fitting DropDuplicatesFeatureGenerator...\n\n\n    Types of features in original data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    Types of features in processed data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    1.1s = Fit runtime\n\n\n    1605 features in original data used to generate 1605 features in processed data.\n\n\n    Train Data (Processed) Memory Usage: 11.5 MB (0.0% of available memory)\n\n\nData preprocessing and feature engineering runtime = 1.26s ...\n\n\nAutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n\n\n    To change this, specify the eval_metric parameter of Predictor()\n\n\nAutomatically generating train/validation split with holdout_frac=0.2, Train Rows: 716, Val Rows: 180\n\n\nUser-specified model hyperparameters to be fit:\n{\n    'NN_TORCH': {},\n    'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, 'GBMLarge'],\n    'CAT': {},\n    'XGB': {},\n    'FASTAI': {},\n    'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n    'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],\n    'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],\n}\n\n\nFitting 13 L1 models ...\n\n\nFitting model: KNeighborsUnif ... Training model for up to 998.74s of the 998.72s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.11s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: KNeighborsDist ... Training model for up to 998.58s of the 998.57s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.12s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: LightGBMXT ... Training model for up to 998.42s of the 998.4s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.83s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: LightGBM ... Training model for up to 997.55s of the 997.54s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.67s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: RandomForestGini ... Training model for up to 996.85s of the 996.83s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.68s    = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: RandomForestEntr ... Training model for up to 996.12s of the 996.11s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.66s    = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: CatBoost ... Training model for up to 995.42s of the 995.41s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    17.63s   = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: ExtraTreesGini ... Training model for up to 977.76s of the 977.74s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.67s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: ExtraTreesEntr ... Training model for up to 977.03s of the 977.02s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.65s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: NeuralNetFastAI ... Training model for up to 976.33s of the 976.32s of remaining time.\n\n\nNo improvement since epoch 0: early stopping\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    1.03s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: XGBoost ... Training model for up to 975.25s of the 975.24s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    2.59s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: NeuralNetTorch ... Training model for up to 972.63s of the 972.62s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    1.86s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: LightGBMLarge ... Training model for up to 970.72s of the 970.71s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    1.71s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: WeightedEnsemble_L2 ... Training model for up to 360.0s of the 968.95s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.32s    = Training   runtime\n\n\n    0.0s     = Validation runtime\n\n\nAutoGluon training complete, total runtime = 31.4s ... Best model: \"WeightedEnsemble_L2\"\n\n\nTabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels\\ag-20240623_095525\\\")\n\n\nComputing feature importance via permutation shuffling for 1605 features using 385 rows with 5 shuffle sets...\n\n\n    96.04s  = Expected runtime (19.21s per shuffle set)\n\n\n    36.41s  = Actual runtime (Completed 5 of 5 shuffle sets)\n\n\n                  model  score_test  score_val  pred_time_test  pred_time_val   fit_time  pred_time_test_marginal  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n0         LightGBMLarge    1.000000        1.0        0.009967       0.008970   1.714071                 0.009967                0.008970           1.714071            1       True         13\n1   WeightedEnsemble_L2    1.000000        1.0        0.010963       0.009967   2.034585                 0.000997                0.000997           0.320514            2       True         14\n2              LightGBM    1.000000        1.0        0.012957       0.007973   0.672871                 0.012957                0.007973           0.672871            1       True          4\n3       NeuralNetFastAI    1.000000        1.0        0.025914       0.010965   1.028331                 0.025914                0.010965           1.028331            1       True         10\n4        ExtraTreesEntr    1.000000        1.0        0.033000       0.026911   0.648571                 0.033000                0.026911           0.648571            1       True          9\n5        ExtraTreesGini    1.000000        1.0        0.034882       0.031892   0.672409                 0.034882                0.031892           0.672409            1       True          8\n6        KNeighborsUnif    1.000000        1.0        0.038869       0.026910   0.113620                 0.038869                0.026910           0.113620            1       True          1\n7        KNeighborsDist    1.000000        1.0        0.038870       0.028904   0.117707                 0.038870                0.028904           0.117707            1       True          2\n8        NeuralNetTorch    1.000000        1.0        0.039865       0.028463   1.862830                 0.039865                0.028463           1.862830            1       True         12\n9      RandomForestEntr    1.000000        1.0        0.049835       0.023920   0.657799                 0.049835                0.023920           0.657799            1       True          6\n10     RandomForestGini    1.000000        1.0        0.064782       0.023920   0.679014                 0.064782                0.023920           0.679014            1       True          5\n11           LightGBMXT    0.997403        1.0        0.013953       0.005980   0.831370                 0.013953                0.005980           0.831370            1       True          3\n12             CatBoost    0.997403        1.0        0.032891       0.015946  17.628480                 0.032891                0.015946          17.628480            1       True          7\n13              XGBoost    0.994805        1.0        0.022923       0.009967   2.592298                 0.022923                0.009967           2.592298            1       True         11\n\n\n\n\n\n6.5.4 Return\n\n# Filtering the DataFrame to get features where importance &gt; 0 and p_value &lt; 0.05\nfiltered_importance = importance[(importance['importance'] &gt; 0) & (importance['p_value'] &lt; 0.05)]\n# Counting the number of such features\nnumber_of_features = filtered_importance.shape[0]\n# Printing the result\nprint(f\"Number of features with importance &gt; 0 and p_value &lt; 0.05: {number_of_features}\")\n\nNumber of features with importance &gt; 0 and p_value &lt; 0.05: 2\n\n\n\n\n# Display the top 20 rows of the Importance DataFrame\nprint(\"Top 20 rows of Importance DataFrame:\")\nprint(importance.head(20))\n\nTop 20 rows of Importance DataFrame:\n               importance    stddev   p_value  n  p99_high   p99_low\nISY1-RAB43       0.235844  0.017463  0.000004  5    0.2718  0.199888\nRP11-231C14.4    0.235844  0.017463  0.000004  5    0.2718  0.199888\nPSORS1C1         0.000000  0.000000  0.500000  5    0.0000  0.000000\nPSMC1P1          0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRTG             0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRSS8            0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRSS53           0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRSS3            0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRSS22           0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRR19            0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRR15L           0.000000  0.000000  0.500000  5    0.0000  0.000000\nPROM2            0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRODH            0.000000  0.000000  0.500000  5    0.0000  0.000000\nA2M              0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRKCQ            0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRF1             0.000000  0.000000  0.500000  5    0.0000  0.000000\nPRAME            0.000000  0.000000  0.500000  5    0.0000  0.000000\nPPP2R2C          0.000000  0.000000  0.500000  5    0.0000  0.000000\nPPP1R1B          0.000000  0.000000  0.500000  5    0.0000  0.000000\nPPP1R14C         0.000000  0.000000  0.500000  5    0.0000  0.000000\n\n\n\n\n# Display the top 20 rows of the Leaderboard DataFrame\nprint(\"\\nTop 20 rows of Leaderboard DataFrame:\")\nprint(leaderboard.head(20))\n\n\nTop 20 rows of Leaderboard DataFrame:\n                  model  score_test  score_val  pred_time_test  pred_time_val  \\\n0         LightGBMLarge    1.000000        1.0        0.009967       0.008970   \n1   WeightedEnsemble_L2    1.000000        1.0        0.010963       0.009967   \n2              LightGBM    1.000000        1.0        0.012957       0.007973   \n3       NeuralNetFastAI    1.000000        1.0        0.025914       0.010965   \n4        ExtraTreesEntr    1.000000        1.0        0.033000       0.026911   \n5        ExtraTreesGini    1.000000        1.0        0.034882       0.031892   \n6        KNeighborsUnif    1.000000        1.0        0.038869       0.026910   \n7        KNeighborsDist    1.000000        1.0        0.038870       0.028904   \n8        NeuralNetTorch    1.000000        1.0        0.039865       0.028463   \n9      RandomForestEntr    1.000000        1.0        0.049835       0.023920   \n10     RandomForestGini    1.000000        1.0        0.064782       0.023920   \n11           LightGBMXT    0.997403        1.0        0.013953       0.005980   \n12             CatBoost    0.997403        1.0        0.032891       0.015946   \n13              XGBoost    0.994805        1.0        0.022923       0.009967   \n\n     fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n0    1.714071                 0.009967                0.008970   \n1    2.034585                 0.000997                0.000997   \n2    0.672871                 0.012957                0.007973   \n3    1.028331                 0.025914                0.010965   \n4    0.648571                 0.033000                0.026911   \n5    0.672409                 0.034882                0.031892   \n6    0.113620                 0.038869                0.026910   \n7    0.117707                 0.038870                0.028904   \n8    1.862830                 0.039865                0.028463   \n9    0.657799                 0.049835                0.023920   \n10   0.679014                 0.064782                0.023920   \n11   0.831370                 0.013953                0.005980   \n12  17.628480                 0.032891                0.015946   \n13   2.592298                 0.022923                0.009967   \n\n    fit_time_marginal  stack_level  can_infer  fit_order  \n0            1.714071            1       True         13  \n1            0.320514            2       True         14  \n2            0.672871            1       True          4  \n3            1.028331            1       True         10  \n4            0.648571            1       True          9  \n5            0.672409            1       True          8  \n6            0.113620            1       True          1  \n7            0.117707            1       True          2  \n8            1.862830            1       True         12  \n9            0.657799            1       True          6  \n10           0.679014            1       True          5  \n11           0.831370            1       True          3  \n12          17.628480            1       True          7  \n13           2.592298            1       True         11  \n\n\n\n\n\n6.5.5 Save Data\n\n# Save the Importance DataFrame to a CSV file\nimportance.to_csv('../test_TransProPy/data/significant_correlation_Autogluon_TimeLimit_importance.csv', index=False)\n\n# Save the Leaderboard DataFrame to a CSV file\nleaderboard.to_csv('../test_TransProPy/data/significant_correlation_Autogluon_TimeLimit_leaderboard.csv', index=False)"
  },
  {
    "objectID": "AutogluonTimeLimit.html#references-c",
    "href": "AutogluonTimeLimit.html#references-c",
    "title": "6  AutogluonTimeLimit.py",
    "section": "6.6 References",
    "text": "6.6 References\n\n6.6.1 Scientific Publications\n\n\nErickson, N., Mueller, J., Shirkov, A., Zhang, H., Larroy, P., Li, M., & Smola, A. (2020). AutoGluon-Tabular: Robust and Accurate AutoML for Structured Data. arXiv preprint arXiv:2003.06505.\nFakoor, R., Mueller, J., Erickson, N., Chaudhari, P., & Smola, A. J. (2020). Fast, Accurate, and Simple Models for Tabular Data via Augmented Distillation. arXiv preprint arXiv:2006.14284. \nShi, X., Mueller, J., Erickson, N., Li, M., & Smola, A. (2021). Multimodal AutoML on Structured Tables with Text Fields. In AutoML@ICML 2021. \n\n\n\n\n6.6.2 Articles\n\n\nPrasanna, S. (2020, March 31). Machine learning with AutoGluon, an open source AutoML library. AWS Open Source Blog. \nSun, Y., Wu, C., Zhang, Z., He, T., Mueller, J., & Zhang, H. (n.d.). (2020). Image classification on Kaggle using AutoGluon. Medium.\nErickson, N., Mueller, J., Zhang, H., & Kamakoti, B. (2019). AutoGluon: Deep Learning AutoML. Medium.\n\n\n\n\n6.6.3 Documentation\n\n\nAutoGluon Predictors – AutoGluon Documentation 0.1.0 documentation"
  },
  {
    "objectID": "AutoGluonSelectML.html#parameters-d",
    "href": "AutoGluonSelectML.html#parameters-d",
    "title": "7  AutoGluonSelectML.py",
    "section": "7.1 Parameters",
    "text": "7.1 Parameters\n\n\ngene_data_path (str):\n\nPath to the gene expression data CSV file.\nFor example: ‘../data/gene_tpm.csv’\n\nclass_data_path (str):\n\nPath to the class data CSV file.\nFor example: ‘../data/tumor_class.csv’\n\nlabel_column (str):\n\nName of the column in the dataset that is the target label for prediction.\n\ntest_size (float):\n\nProportion of the data to be used as the test set.\n\nthreshold (float):\n\nThe threshold used to filter out rows based on the proportion of non-zero values.\n\nhyperparameters (dict, optional):\n\nDictionary of hyperparameters for the models.\nFor example: {‘GBM’: {}, ‘RF’: {}}\n\nrandom_feature (int, optional):\n\nThe number of random feature to select. If None, no random feature selection is performed.\nDefault is None.\n\nnum_bag_folds (int, optional)\n\nPlease note: This parameter annotation source can be referred to the documentation link in References.\nNumber of folds used for bagging of models. When num_bag_folds = k, training time is roughly increased by a factor of k (set = 0 to disable bagging). Disabled by default (0), but we recommend values between 5-10 to maximize predictive performance. Increasing num_bag_folds will result in models with lower bias but that are more prone to overfitting. num_bag_folds = 1 is an invalid value, and will raise a ValueError. Values &gt; 10 may produce diminishing returns, and can even harm overall results due to overfitting. To further improve predictions, avoid increasing num_bag_folds much beyond 10 and instead increase num_bag_sets.\ndefault = None\n\nnum_stack_levels (int, optional)\n\nPlease note: This parameter annotation source can be referred to the documentation link in References.\nNumber of stacking levels to use in stack ensemble. Roughly increases model training time by factor of num_stack_levels+1 (set = 0 to disable stack ensembling). Disabled by default (0), but we recommend values between 1-3 to maximize predictive performance. To prevent overfitting, num_bag_folds &gt;= 2 must also be set or else a ValueError will be raised.\ndefault = None\n\ntime_limit (int, optional):\n\nTime limit for training in seconds.\ndefault is 120.\n\nrandom_state (int, optional):\n\nThe seed used by the random number generator.\ndefault is 42."
  },
  {
    "objectID": "AutoGluonSelectML.html#returns-d",
    "href": "AutoGluonSelectML.html#returns-d",
    "title": "7  AutoGluonSelectML.py",
    "section": "7.2 Return",
    "text": "7.2 Return\n\n\nimportance (DataFrame):\n\nDataFrame containing feature importance.\n\nleaderboard (DataFrame):\n\nDataFrame containing model performance on the test data."
  },
  {
    "objectID": "AutoGluonSelectML.html#usage-of-autogluon_selectml",
    "href": "AutoGluonSelectML.html#usage-of-autogluon_selectml",
    "title": "7  AutoGluonSelectML.py",
    "section": "7.3 Usage of Autogluon_SelectML",
    "text": "7.3 Usage of Autogluon_SelectML\nPerforming training and prediction tasks on tabular data using Autogluon.\n\n7.3.1 Objectives\n\n7.3.1.1 Model Training and Selection\n\nAutogluon will attempt various models and hyperparameter combinations within a given time limit to find the best-performing model on the test data. During training, Autogluon may output training logs displaying performance metrics and progress information for different models. The goal is to select the best-performing model for use in subsequent prediction tasks.\n\n\n\n7.3.1.2 Leaderboard\n\nThe leaderboard displays performance scores of different models on the test data, typically including metrics like accuracy, precision, recall, and more. The purpose is to assist users in understanding the performance of different models to choose the most suitable model for predictions.\n\n\n\n7.3.1.3 Importance\n\nFeature importance indicates which features are most critical for the model’s prediction performance. The purpose is to help users understand the importance of specific features in the data, which can be used for feature selection or further data analysis.\n\n\n\n\n7.3.2 Note\n\nPlease note that Autogluon’s output results may vary depending on your data and task. You can review the generated model leaderboard and feature importance to understand model performance and the significance of specific features in the data. These results can aid you in making better predictions and decisions."
  },
  {
    "objectID": "AutoGluonSelectML.html#insignificant-correlation-d",
    "href": "AutoGluonSelectML.html#insignificant-correlation-d",
    "title": "7  AutoGluonSelectML.py",
    "section": "7.4 Insignificant Correlation",
    "text": "7.4 Insignificant Correlation\n\n\nPlease note:Data characteristics: Features have weak correlation with the classification.\nRandomly shuffling the class labels to a certain extent simulates reducing the correlation.\n\n\n\n7.4.1 Import the corresponding module\n\nfrom TransProPy.AutogluonSelectML import AutoGluon_SelectML\n\n\n\n\n7.4.2 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/four_methods_degs_intersection.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n  Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0        A2M         16.808499         16.506184         17.143433   \n1      A2ML1          1.584963          9.517669          7.434628   \n2      AADAC          4.000000          2.584963          1.584963   \n3    AADACL2          1.000000          1.000000          0.000000   \n4     ABCA12          4.523562          4.321928          3.906891   \n5    ABCA17P          4.584963          5.169925          3.807355   \n6      ABCA9          9.753217          6.906891          3.459432   \n7      ABCB4          9.177420          6.700440          5.000000   \n8      ABCB5         10.134426          4.169925          9.167418   \n9     ABCC11         10.092757          6.491853          5.459432   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0         17.760739         14.766839         16.263691         16.035207   \n1          2.584963          1.584963          2.584963          5.285402   \n2          0.000000          0.000000          0.000000          3.321928   \n3          0.000000          1.000000          0.000000          0.000000   \n4          3.459432          1.584963          3.000000          4.321928   \n5          8.366322          7.228819          7.076816          4.584963   \n6          2.584963          6.357552          6.475733          7.330917   \n7          9.342075         10.392317          7.383704         11.032735   \n8          4.906891         11.340963          3.169925         11.161762   \n9          6.807355          4.247928          5.459432          5.977280   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0         18.355114         16.959379  \n1          2.584963          3.584963  \n2          1.000000          4.584963  \n3          0.000000          1.000000  \n4          4.807355          3.700440  \n5          6.409391          7.139551  \n6          7.954196          9.177420  \n7         10.082149         10.088788  \n8          4.643856         12.393927  \n9          5.614710          8.233620  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/random_classification_class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      1\n5  TCGA-GN-A26A-06A      1\n6  TCGA-D3-A3BZ-06A      1\n7  TCGA-D3-A51G-06A      1\n8  TCGA-EE-A29R-06A      1\n9  TCGA-D3-A2JE-06A      1\n\n\n\n\n\n7.4.3 Autogluon_SelectML\n\n\nThe core purpose of choosing Autogluon_SelectML — to select a larger feature set in AutoGluon that includes both important and secondary features — is reflected in the following custom hyperparameters configuration. This setup is designed to utilize multiple model types so that the models can consider a broader range of features.\nThis configuration encompasses neural networks (using PyTorch and FastAI), gradient boosting machines (LightGBM, XGBoost, and CatBoost), random forests (RF), extremely randomized trees (XT), K-nearest neighbors (KNN), and linear regression (LR).\n\n\n\nimportance, leaderboard = AutoGluon_SelectML(\n    gene_data_path='../test_TransProPy/data/four_methods_degs_intersection.csv', \n    class_data_path='../test_TransProPy/data/random_classification_class.csv', \n    label_column='class', \n    test_size=0.3, \n    threshold=0.9, \n    hyperparameters={\n        'GBM': {}, \n        'RF': {},\n        'CAT': {}, \n        'XGB' : {},\n        # 'NN_TORCH': {}, \n        # 'FASTAI': {},\n        'XT': {}, \n        'KNN': {},\n        'LR': {}\n        },\n    random_feature=None, \n    num_bag_folds=None, \n    num_stack_levels=None, \n    time_limit=1000, \n    random_state=42\n    )\n\nNo path specified. Models will be saved in: \"AutogluonModels\\ag-20240623_095640\\\"\n\n\nBeginning AutoGluon training ... Time limit = 1000s\n\n\nAutoGluon will save models to \"AutogluonModels\\ag-20240623_095640\\\"\n\n\nAutoGluon Version:  0.8.2\n\n\nPython Version:     3.10.11\n\n\nOperating System:   Windows\n\n\nPlatform Machine:   AMD64\n\n\nPlatform Version:   10.0.19044\n\n\nDisk Space Avail:   143.98 GB / 925.93 GB (15.5%)\n\n\nTrain Data Rows:    896\n\n\nTrain Data Columns: 1605\n\n\nLabel Column: class\n\n\nPreprocessing data ...\n\n\nAutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n\n\n    2 unique label values:  [1, 2]\n\n\n    If 'binary' is not the correct problem_type, please manually specify the problem_type parameter during predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression'])\n\n\nSelected class &lt;--&gt; label mapping:  class 1 = 2, class 0 = 1\n\n\n    Note: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive (2) vs negative (1) class.\n    To explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n\n\nUsing Feature Generators to preprocess the data ...\n\n\nFitting AutoMLPipelineFeatureGenerator...\n\n\n    Available Memory:                    23540.82 MB\n\n\n    Train Data (Original)  Memory Usage: 11.5 MB (0.0% of available memory)\n\n\n    Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n\n\n    Stage 1 Generators:\n\n\n        Fitting AsTypeFeatureGenerator...\n\n\n    Stage 2 Generators:\n\n\n        Fitting FillNaFeatureGenerator...\n\n\n    Stage 3 Generators:\n\n\n        Fitting IdentityFeatureGenerator...\n\n\n    Stage 4 Generators:\n\n\n        Fitting DropUniqueFeatureGenerator...\n\n\n    Stage 5 Generators:\n\n\n        Fitting DropDuplicatesFeatureGenerator...\n\n\n    Types of features in original data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    Types of features in processed data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    1.2s = Fit runtime\n\n\n    1605 features in original data used to generate 1605 features in processed data.\n\n\n    Train Data (Processed) Memory Usage: 11.5 MB (0.0% of available memory)\n\n\nData preprocessing and feature engineering runtime = 1.28s ...\n\n\nAutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n\n\n    To change this, specify the eval_metric parameter of Predictor()\n\n\nAutomatically generating train/validation split with holdout_frac=0.2, Train Rows: 716, Val Rows: 180\n\n\nUser-specified model hyperparameters to be fit:\n{\n    'GBM': {},\n    'RF': {},\n    'CAT': {},\n    'XGB': {},\n    'XT': {},\n    'KNN': {},\n    'LR': {},\n}\n\n\nFitting 7 L1 models ...\n\n\nFitting model: KNeighbors ... Training model for up to 998.72s of the 998.71s of remaining time.\n\n\n    0.5722   = Validation score   (accuracy)\n\n\n    1.03s    = Training   runtime\n\n\n    0.15s    = Validation runtime\n\n\nFitting model: LightGBM ... Training model for up to 997.52s of the 997.51s of remaining time.\n\n\n    0.6667   = Validation score   (accuracy)\n\n\n    4.65s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: RandomForest ... Training model for up to 992.83s of the 992.81s of remaining time.\n\n\n    0.6278   = Validation score   (accuracy)\n\n\n    1.02s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: CatBoost ... Training model for up to 991.74s of the 991.73s of remaining time.\n\n\n    0.6667   = Validation score   (accuracy)\n\n\n    18.5s    = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: ExtraTrees ... Training model for up to 973.21s of the 973.2s of remaining time.\n\n\n    0.6167   = Validation score   (accuracy)\n\n\n    0.66s    = Training   runtime\n\n\n    0.03s    = Validation runtime\n\n\nFitting model: XGBoost ... Training model for up to 972.48s of the 972.47s of remaining time.\n\n\n    0.6778   = Validation score   (accuracy)\n\n\n    13.0s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: LinearModel ... Training model for up to 959.45s of the 959.44s of remaining time.\n\n\nE:\\Anaconda\\Anaconda\\envs\\TransPro\\lib\\site-packages\\sklearn\\preprocessing\\_data.py:2663: UserWarning:\n\nn_quantiles (1000) is greater than the total number of samples (716). n_quantiles is set to n_samples.\n\n\n\n    0.6  = Validation score   (accuracy)\n\n\n    2.45s    = Training   runtime\n\n\n    0.06s    = Validation runtime\n\n\nFitting model: WeightedEnsemble_L2 ... Training model for up to 360.0s of the 956.89s of remaining time.\n\n\n    0.6833   = Validation score   (accuracy)\n\n\n    0.18s    = Training   runtime\n\n\n    0.0s     = Validation runtime\n\n\nAutoGluon training complete, total runtime = 43.32s ... Best model: \"WeightedEnsemble_L2\"\n\n\nTabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels\\ag-20240623_095640\\\")\n\n\nComputing feature importance via permutation shuffling for 1605 features using 385 rows with 5 shuffle sets...\n\n\n    576.23s = Expected runtime (115.25s per shuffle set)\n\n\n    181.63s = Actual runtime (Completed 5 of 5 shuffle sets)\n\n\n                 model  score_test  score_val  pred_time_test  pred_time_val   fit_time  pred_time_test_marginal  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n0             LightGBM    0.633766   0.666667        0.015946       0.007973   4.653392                 0.015946                0.007973           4.653392            1       True          2\n1              XGBoost    0.631169   0.677778        0.026910       0.009966  12.995652                 0.026910                0.009966          12.995652            1       True          6\n2           ExtraTrees    0.631169   0.616667        0.038870       0.031894   0.664422                 0.038870                0.031894           0.664422            1       True          5\n3  WeightedEnsemble_L2    0.631169   0.683333        0.084714       0.044849  14.193014                 0.000994                0.000000           0.180396            2       True          8\n4           KNeighbors    0.623377   0.572222        0.038870       0.150497   1.027444                 0.038870                0.150497           1.027444            1       True          1\n5         RandomForest    0.610390   0.627778        0.056810       0.034883   1.016967                 0.056810                0.034883           1.016967            1       True          3\n6             CatBoost    0.571429   0.666667        0.044850       0.015947  18.502710                 0.044850                0.015947          18.502710            1       True          4\n7          LinearModel    0.558442   0.600000        0.055841       0.057802   2.454261                 0.055841                0.057802           2.454261            1       True          7\n\n\n\n\n\n7.4.4 Return\n\n# Filtering the DataFrame to get features where importance &gt; 0 and p_value &lt; 0.05\nfiltered_importance = importance[(importance['importance'] &gt; 0) & (importance['p_value'] &lt; 0.05)]\n# Counting the number of such features\nnumber_of_features = filtered_importance.shape[0]\n# Printing the result\nprint(f\"Number of features with importance &gt; 0 and p_value &lt; 0.05: {number_of_features}\")\n\nNumber of features with importance &gt; 0 and p_value &lt; 0.05: 232\n\n\n\n\n# Display the top 20 rows of the Importance DataFrame\nprint(\"Top 20 rows of Importance DataFrame:\")\nprint(importance.head(20))\n\nTop 20 rows of Importance DataFrame:\n                importance    stddev   p_value  n  p99_high   p99_low\nNTRK1             0.020779  0.012044  0.009090  5  0.045577 -0.004019\nRP11-641D5.1      0.018701  0.004996  0.000557  5  0.028989  0.008414\nHBA2              0.015065  0.006723  0.003718  5  0.028908  0.001222\nSTMN2             0.013506  0.005631  0.002917  5  0.025101  0.001912\nNAIP              0.012987  0.002597  0.000182  5  0.018335  0.007639\nHIST2H2BF         0.012468  0.005631  0.003878  5  0.024062  0.000873\nSPP1              0.011948  0.005386  0.003852  5  0.023038  0.000858\nAC010524.2        0.011429  0.003939  0.001455  5  0.019539  0.003318\nCD24              0.010909  0.002845  0.000508  5  0.016768  0.005051\nADAMDEC1          0.010909  0.006723  0.011097  5  0.024752 -0.002934\nXIST              0.010909  0.005631  0.006165  5  0.022503 -0.000685\nRP11-1212A22.4    0.010390  0.005808  0.008065  5  0.022348 -0.001569\nRPS10-NUDT3       0.009351  0.003939  0.003027  5  0.017461  0.001240\nJAKMIP3           0.008831  0.002961  0.001314  5  0.014929  0.002733\nPPP1R14C          0.008831  0.002961  0.001314  5  0.014929  0.002733\nTBC1D3B           0.008831  0.004718  0.006931  5  0.018546 -0.000884\nSPINK5            0.008831  0.001423  0.000078  5  0.011760  0.005902\nMMP3              0.008831  0.009293  0.050387  5  0.027965 -0.010303\nPPP2R2C           0.008831  0.003939  0.003711  5  0.016942  0.000720\nSAA2              0.008312  0.002845  0.001419  5  0.014170  0.002453\n\n\n\n\n# Display the top 20 rows of the Leaderboard DataFrame\nprint(\"\\nTop 20 rows of Leaderboard DataFrame:\")\nprint(leaderboard.head(20))\n\n\nTop 20 rows of Leaderboard DataFrame:\n                 model  score_test  score_val  pred_time_test  pred_time_val  \\\n0             LightGBM    0.633766   0.666667        0.015946       0.007973   \n1              XGBoost    0.631169   0.677778        0.026910       0.009966   \n2           ExtraTrees    0.631169   0.616667        0.038870       0.031894   \n3  WeightedEnsemble_L2    0.631169   0.683333        0.084714       0.044849   \n4           KNeighbors    0.623377   0.572222        0.038870       0.150497   \n5         RandomForest    0.610390   0.627778        0.056810       0.034883   \n6             CatBoost    0.571429   0.666667        0.044850       0.015947   \n7          LinearModel    0.558442   0.600000        0.055841       0.057802   \n\n    fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n0   4.653392                 0.015946                0.007973   \n1  12.995652                 0.026910                0.009966   \n2   0.664422                 0.038870                0.031894   \n3  14.193014                 0.000994                0.000000   \n4   1.027444                 0.038870                0.150497   \n5   1.016967                 0.056810                0.034883   \n6  18.502710                 0.044850                0.015947   \n7   2.454261                 0.055841                0.057802   \n\n   fit_time_marginal  stack_level  can_infer  fit_order  \n0           4.653392            1       True          2  \n1          12.995652            1       True          6  \n2           0.664422            1       True          5  \n3           0.180396            2       True          8  \n4           1.027444            1       True          1  \n5           1.016967            1       True          3  \n6          18.502710            1       True          4  \n7           2.454261            1       True          7  \n\n\n\n\n\n7.4.5 Save Data\n\n# Save the Importance DataFrame to a CSV file\nimportance.to_csv('../test_TransProPy/data/Insignificant_correlation_Autogluon_SelectML_importance.csv', index=False)\n\n# Save the Leaderboard DataFrame to a CSV file\nleaderboard.to_csv('../test_TransProPy/data/Insignificant_correlation_Autogluon_SelectML_leaderboard.csv', index=False)"
  },
  {
    "objectID": "AutoGluonSelectML.html#significant-correlation-d",
    "href": "AutoGluonSelectML.html#significant-correlation-d",
    "title": "7  AutoGluonSelectML.py",
    "section": "7.5 Significant Correlation",
    "text": "7.5 Significant Correlation\n\n\nPlease note:Data characteristics: Features have strong correlation with the classification.\n\n\n\n7.5.1 Import the corresponding module\n\nfrom TransProPy.AutogluonSelectML import AutoGluon_SelectML\n\n\n\n\n7.5.2 Data\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/four_methods_degs_intersection.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n  Unnamed: 0  TCGA-D9-A4Z2-01A  TCGA-ER-A2NH-06A  TCGA-BF-A5EO-01A  \\\n0        A2M         16.808499         16.506184         17.143433   \n1      A2ML1          1.584963          9.517669          7.434628   \n2      AADAC          4.000000          2.584963          1.584963   \n3    AADACL2          1.000000          1.000000          0.000000   \n4     ABCA12          4.523562          4.321928          3.906891   \n5    ABCA17P          4.584963          5.169925          3.807355   \n6      ABCA9          9.753217          6.906891          3.459432   \n7      ABCB4          9.177420          6.700440          5.000000   \n8      ABCB5         10.134426          4.169925          9.167418   \n9     ABCC11         10.092757          6.491853          5.459432   \n\n   TCGA-D9-A6EA-06A  TCGA-D9-A4Z3-01A  TCGA-GN-A26A-06A  TCGA-D3-A3BZ-06A  \\\n0         17.760739         14.766839         16.263691         16.035207   \n1          2.584963          1.584963          2.584963          5.285402   \n2          0.000000          0.000000          0.000000          3.321928   \n3          0.000000          1.000000          0.000000          0.000000   \n4          3.459432          1.584963          3.000000          4.321928   \n5          8.366322          7.228819          7.076816          4.584963   \n6          2.584963          6.357552          6.475733          7.330917   \n7          9.342075         10.392317          7.383704         11.032735   \n8          4.906891         11.340963          3.169925         11.161762   \n9          6.807355          4.247928          5.459432          5.977280   \n\n   TCGA-D3-A51G-06A  TCGA-EE-A29R-06A  \n0         18.355114         16.959379  \n1          2.584963          3.584963  \n2          1.000000          4.584963  \n3          0.000000          1.000000  \n4          4.807355          3.700440  \n5          6.409391          7.139551  \n6          7.954196          9.177420  \n7         10.082149         10.088788  \n8          4.643856         12.393927  \n9          5.614710          8.233620  \n\n\n\n\nimport pandas as pd\ndata_path = '../test_TransProPy/data/class.csv'  \ndata = pd.read_csv(data_path)\nprint(data.iloc[:10, :10]) \n\n         Unnamed: 0  class\n0  TCGA-D9-A4Z2-01A      2\n1  TCGA-ER-A2NH-06A      2\n2  TCGA-BF-A5EO-01A      2\n3  TCGA-D9-A6EA-06A      2\n4  TCGA-D9-A4Z3-01A      2\n5  TCGA-GN-A26A-06A      2\n6  TCGA-D3-A3BZ-06A      2\n7  TCGA-D3-A51G-06A      2\n8  TCGA-EE-A29R-06A      2\n9  TCGA-D3-A2JE-06A      2\n\n\n\n\n\n7.5.3 Autogluon_SelectML\n\n\nThe core purpose of choosing Autogluon_SelectML — to select a larger feature set in AutoGluon that includes both important and secondary features — is reflected in the following custom hyperparameters configuration. This setup is designed to utilize multiple model types so that the models can consider a broader range of features.\nThis configuration encompasses neural networks (using PyTorch and FastAI), gradient boosting machines (LightGBM, XGBoost, and CatBoost), random forests (RF), extremely randomized trees (XT), K-nearest neighbors (KNN), and linear regression (LR).\n\n\n\nimportance, leaderboard = AutoGluon_SelectML(\n    gene_data_path='../test_TransProPy/data/four_methods_degs_intersection.csv', \n    class_data_path='../test_TransProPy/data/class.csv', \n    label_column='class', \n    test_size=0.3, \n    threshold=0.9, \n    hyperparameters={\n        'GBM': {}, \n        'RF': {},\n        'CAT': {}, \n        'XGB' : {},\n        # 'NN_TORCH': {}, \n        # 'FASTAI': {},\n        'XT': {}, \n        'KNN': {},\n        'LR': {}\n        },\n    random_feature=None, \n    num_bag_folds=None, \n    num_stack_levels=None, \n    time_limit=1000, \n    random_state=42\n    )\n\nNo path specified. Models will be saved in: \"AutogluonModels\\ag-20240623_100026\\\"\n\n\nBeginning AutoGluon training ... Time limit = 1000s\n\n\nAutoGluon will save models to \"AutogluonModels\\ag-20240623_100026\\\"\n\n\nAutoGluon Version:  0.8.2\n\n\nPython Version:     3.10.11\n\n\nOperating System:   Windows\n\n\nPlatform Machine:   AMD64\n\n\nPlatform Version:   10.0.19044\n\n\nDisk Space Avail:   143.95 GB / 925.93 GB (15.5%)\n\n\nTrain Data Rows:    896\n\n\nTrain Data Columns: 1605\n\n\nLabel Column: class\n\n\nPreprocessing data ...\n\n\nAutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).\n\n\n    2 unique label values:  [2, 1]\n\n\n    If 'binary' is not the correct problem_type, please manually specify the problem_type parameter during predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression'])\n\n\nSelected class &lt;--&gt; label mapping:  class 1 = 2, class 0 = 1\n\n\n    Note: For your binary classification, AutoGluon arbitrarily selected which label-value represents positive (2) vs negative (1) class.\n    To explicitly set the positive_class, either rename classes to 1 and 0, or specify positive_class in Predictor init.\n\n\nUsing Feature Generators to preprocess the data ...\n\n\nFitting AutoMLPipelineFeatureGenerator...\n\n\n    Available Memory:                    22370.77 MB\n\n\n    Train Data (Original)  Memory Usage: 11.5 MB (0.1% of available memory)\n\n\n    Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.\n\n\n    Stage 1 Generators:\n\n\n        Fitting AsTypeFeatureGenerator...\n\n\n    Stage 2 Generators:\n\n\n        Fitting FillNaFeatureGenerator...\n\n\n    Stage 3 Generators:\n\n\n        Fitting IdentityFeatureGenerator...\n\n\n    Stage 4 Generators:\n\n\n        Fitting DropUniqueFeatureGenerator...\n\n\n    Stage 5 Generators:\n\n\n        Fitting DropDuplicatesFeatureGenerator...\n\n\n    Types of features in original data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    Types of features in processed data (raw dtype, special dtypes):\n\n\n        ('float', []) : 1605 | ['A2M', 'A2ML1', 'ABCA12', 'ABCA17P', 'ABCA9', ...]\n\n\n    1.2s = Fit runtime\n\n\n    1605 features in original data used to generate 1605 features in processed data.\n\n\n    Train Data (Processed) Memory Usage: 11.5 MB (0.1% of available memory)\n\n\nData preprocessing and feature engineering runtime = 1.26s ...\n\n\nAutoGluon will gauge predictive performance using evaluation metric: 'accuracy'\n\n\n    To change this, specify the eval_metric parameter of Predictor()\n\n\nAutomatically generating train/validation split with holdout_frac=0.2, Train Rows: 716, Val Rows: 180\n\n\nUser-specified model hyperparameters to be fit:\n{\n    'GBM': {},\n    'RF': {},\n    'CAT': {},\n    'XGB': {},\n    'XT': {},\n    'KNN': {},\n    'LR': {},\n}\n\n\nFitting 7 L1 models ...\n\n\nFitting model: KNeighbors ... Training model for up to 998.74s of the 998.73s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.11s    = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: LightGBM ... Training model for up to 998.59s of the 998.57s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.65s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: RandomForest ... Training model for up to 997.91s of the 997.89s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.65s    = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: CatBoost ... Training model for up to 997.21s of the 997.2s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    17.66s   = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: ExtraTrees ... Training model for up to 979.51s of the 979.5s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.6s     = Training   runtime\n\n\n    0.02s    = Validation runtime\n\n\nFitting model: XGBoost ... Training model for up to 978.87s of the 978.85s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    2.58s    = Training   runtime\n\n\n    0.01s    = Validation runtime\n\n\nFitting model: LinearModel ... Training model for up to 976.25s of the 976.24s of remaining time.\n\n\nE:\\Anaconda\\Anaconda\\envs\\TransPro\\lib\\site-packages\\sklearn\\preprocessing\\_data.py:2663: UserWarning:\n\nn_quantiles (1000) is greater than the total number of samples (716). n_quantiles is set to n_samples.\n\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    1.51s    = Training   runtime\n\n\n    0.04s    = Validation runtime\n\n\nFitting model: WeightedEnsemble_L2 ... Training model for up to 360.0s of the 974.66s of remaining time.\n\n\n    1.0  = Validation score   (accuracy)\n\n\n    0.17s    = Training   runtime\n\n\n    0.0s     = Validation runtime\n\n\nAutoGluon training complete, total runtime = 25.54s ... Best model: \"WeightedEnsemble_L2\"\n\n\nTabularPredictor saved. To load, use: predictor = TabularPredictor.load(\"AutogluonModels\\ag-20240623_100026\\\")\n\n\nComputing feature importance via permutation shuffling for 1605 features using 385 rows with 5 shuffle sets...\n\n\n    304.12s = Expected runtime (60.82s per shuffle set)\n\n\n    32.77s  = Actual runtime (Completed 5 of 5 shuffle sets)\n\n\n                 model  score_test  score_val  pred_time_test  pred_time_val   fit_time  pred_time_test_marginal  pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  fit_order\n0             LightGBM    1.000000        1.0        0.009967       0.007973   0.651124                 0.009967                0.007973           0.651124            1       True          2\n1          LinearModel    1.000000        1.0        0.035879       0.038862   1.511091                 0.035879                0.038862           1.511091            1       True          7\n2           ExtraTrees    1.000000        1.0        0.036877       0.022923   0.601242                 0.036877                0.022923           0.601242            1       True          5\n3  WeightedEnsemble_L2    1.000000        1.0        0.038870       0.023920   0.767799                 0.001993                0.000997           0.166557            2       True          8\n4           KNeighbors    1.000000        1.0        0.040863       0.023920   0.114617                 0.040863                0.023920           0.114617            1       True          1\n5         RandomForest    1.000000        1.0        0.050830       0.023920   0.648971                 0.050830                0.023920           0.648971            1       True          3\n6             CatBoost    0.997403        1.0        0.035880       0.015947  17.664330                 0.035880                0.015947          17.664330            1       True          4\n7              XGBoost    0.994805        1.0        0.025914       0.009966   2.583783                 0.025914                0.009966           2.583783            1       True          6\n\n\n\n\n\n7.5.4 Return\n\n# Filtering the DataFrame to get features where importance &gt; 0 and p_value &lt; 0.05\nfiltered_importance = importance[(importance['importance'] &gt; 0) & (importance['p_value'] &lt; 0.05)]\n# Counting the number of such features\nnumber_of_features = filtered_importance.shape[0]\n# Printing the result\nprint(f\"Number of features with importance &gt; 0 and p_value &lt; 0.05: {number_of_features}\")\n\nNumber of features with importance &gt; 0 and p_value &lt; 0.05: 0\n\n\n\n\n# Display the top 20 rows of the Importance DataFrame\nprint(\"Top 20 rows of Importance DataFrame:\")\nprint(importance.head(20))\n\nTop 20 rows of Importance DataFrame:\n          importance  stddev  p_value  n  p99_high  p99_low\nA2M              0.0     0.0      0.5  5       0.0      0.0\nPROM2            0.0     0.0      0.5  5       0.0      0.0\nPSORS1C2         0.0     0.0      0.5  5       0.0      0.0\nPSORS1C1         0.0     0.0      0.5  5       0.0      0.0\nPSMC1P1          0.0     0.0      0.5  5       0.0      0.0\nPRTG             0.0     0.0      0.5  5       0.0      0.0\nPRSS8            0.0     0.0      0.5  5       0.0      0.0\nPRSS53           0.0     0.0      0.5  5       0.0      0.0\nPRSS3            0.0     0.0      0.5  5       0.0      0.0\nPRSS22           0.0     0.0      0.5  5       0.0      0.0\nPRR19            0.0     0.0      0.5  5       0.0      0.0\nPRR15L           0.0     0.0      0.5  5       0.0      0.0\nPRODH            0.0     0.0      0.5  5       0.0      0.0\nPI16             0.0     0.0      0.5  5       0.0      0.0\nPRKCQ            0.0     0.0      0.5  5       0.0      0.0\nPRF1             0.0     0.0      0.5  5       0.0      0.0\nPRAME            0.0     0.0      0.5  5       0.0      0.0\nPPP2R2C          0.0     0.0      0.5  5       0.0      0.0\nPPP1R1B          0.0     0.0      0.5  5       0.0      0.0\nPPP1R14C         0.0     0.0      0.5  5       0.0      0.0\n\n\n\n\n# Display the top 20 rows of the Leaderboard DataFrame\nprint(\"\\nTop 20 rows of Leaderboard DataFrame:\")\nprint(leaderboard.head(20))\n\n\nTop 20 rows of Leaderboard DataFrame:\n                 model  score_test  score_val  pred_time_test  pred_time_val  \\\n0             LightGBM    1.000000        1.0        0.009967       0.007973   \n1          LinearModel    1.000000        1.0        0.035879       0.038862   \n2           ExtraTrees    1.000000        1.0        0.036877       0.022923   \n3  WeightedEnsemble_L2    1.000000        1.0        0.038870       0.023920   \n4           KNeighbors    1.000000        1.0        0.040863       0.023920   \n5         RandomForest    1.000000        1.0        0.050830       0.023920   \n6             CatBoost    0.997403        1.0        0.035880       0.015947   \n7              XGBoost    0.994805        1.0        0.025914       0.009966   \n\n    fit_time  pred_time_test_marginal  pred_time_val_marginal  \\\n0   0.651124                 0.009967                0.007973   \n1   1.511091                 0.035879                0.038862   \n2   0.601242                 0.036877                0.022923   \n3   0.767799                 0.001993                0.000997   \n4   0.114617                 0.040863                0.023920   \n5   0.648971                 0.050830                0.023920   \n6  17.664330                 0.035880                0.015947   \n7   2.583783                 0.025914                0.009966   \n\n   fit_time_marginal  stack_level  can_infer  fit_order  \n0           0.651124            1       True          2  \n1           1.511091            1       True          7  \n2           0.601242            1       True          5  \n3           0.166557            2       True          8  \n4           0.114617            1       True          1  \n5           0.648971            1       True          3  \n6          17.664330            1       True          4  \n7           2.583783            1       True          6  \n\n\n\n\n\n7.5.5 Save Data\n\n# Save the Importance DataFrame to a CSV file\nimportance.to_csv('../test_TransProPy/data/significant_correlation_Autogluon_SelectML_importance.csv', index=False)\n\n# Save the Leaderboard DataFrame to a CSV file\nleaderboard.to_csv('../test_TransProPy/data/significant_correlation_Autogluon_SelectML_leaderboard.csv', index=False)"
  },
  {
    "objectID": "AutoGluonSelectML.html#references-d",
    "href": "AutoGluonSelectML.html#references-d",
    "title": "7  AutoGluonSelectML.py",
    "section": "7.6 References",
    "text": "7.6 References\n\n7.6.1 Scientific Publications\n\n\nErickson, N., Mueller, J., Shirkov, A., Zhang, H., Larroy, P., Li, M., & Smola, A. (2020). AutoGluon-Tabular: Robust and Accurate AutoML for Structured Data. arXiv preprint arXiv:2003.06505.\nFakoor, R., Mueller, J., Erickson, N., Chaudhari, P., & Smola, A. J. (2020). Fast, Accurate, and Simple Models for Tabular Data via Augmented Distillation. arXiv preprint arXiv:2006.14284. \nShi, X., Mueller, J., Erickson, N., Li, M., & Smola, A. (2021). Multimodal AutoML on Structured Tables with Text Fields. In AutoML@ICML 2021. \n\n\n\n\n7.6.2 Articles\n\n\nPrasanna, S. (2020, March 31). Machine learning with AutoGluon, an open source AutoML library. AWS Open Source Blog. \nSun, Y., Wu, C., Zhang, Z., He, T., Mueller, J., & Zhang, H. (n.d.). (2020). Image classification on Kaggle using AutoGluon. Medium.\nErickson, N., Mueller, J., Zhang, H., & Kamakoti, B. (2019). AutoGluon: Deep Learning AutoML. Medium.\n\n\n\n\n7.6.3 Documentation\n\n\nAutoGluon Predictors –AutoGluon Documentation 0.1.0 documentation"
  },
  {
    "objectID": "AutoFeatureSelection.html#pseudo-code",
    "href": "AutoFeatureSelection.html#pseudo-code",
    "title": "8  AutoFeatureSelection.py",
    "section": "8.1 pseudo-code",
    "text": "8.1 pseudo-code"
  },
  {
    "objectID": "AutoFeatureSelection.html#parameters-f",
    "href": "AutoFeatureSelection.html#parameters-f",
    "title": "8  AutoFeatureSelection.py",
    "section": "8.2 Parameters",
    "text": "8.2 Parameters\n\n\ndata_file: str:\n\nPath to the feature data file.\n\nlabel_file: str:\n\nPath to the label data file.\n\nlabel_col: str:\n\nName of the label column.\n\nthreshold: float:\n\nThreshold for data preprocessing.\n\nshow_plot: bool:\n\nWhether to display plot.\n\nshow_progress: bool:\n\nWhether to show a progress bar.\n\nn_iter: int:\n\nNumber of iterations for RandomizedSearchCV.\n\nn_cv: int:\n\nNumber of folds for cross-validation.\n\nn_jobs: int:\n\nNumber of parallel jobs for RandomizedSearchCV.\n\nsave_path: str:\n\nPath to save results.\n\nsleep_interval: int:\n\nInterval time in seconds for progress bar update.\n\nuse_tkagg: bool:\n\nWhether to use ‘TkAgg’ backend for matplotlib. Generally, choose True when using in PyCharm IDE, and choose False when rendering file.qmd to an HTML file."
  },
  {
    "objectID": "AutoFeatureSelection.html#please-note",
    "href": "AutoFeatureSelection.html#please-note",
    "title": "8  AutoFeatureSelection.py",
    "section": "8.3 Please note",
    "text": "8.3 Please note\n\n\n\n\n\n\nNote\n\n\n\n\nIf n_jobs &gt; 1 leads to the use of multiprocessing in the function, communication and state sharing between processes become complex. In a multiprocessing environment, each process has its own memory space, and updating the status of the progress bar needs to be done across processes, which can lead to inconsistent or delayed updates. Therefore, if n_jobs &gt; 1 or = -1, please set show_progress to False. If you have sufficient computing resources, such as on a cloud server, pay attention to whether the number of computing nodes, cores per node, and the number of CPUs allocated per task match the value of n_jobs."
  },
  {
    "objectID": "AutoFeatureSelection.html#description",
    "href": "AutoFeatureSelection.html#description",
    "title": "8  AutoFeatureSelection.py",
    "section": "8.4 Description",
    "text": "8.4 Description\n\nThe auto_feature_selection function automates the entire process of feature selection, model training, and result extraction. It includes:\n\nLoading and preprocessing data using load_and_preprocess_data.\nSetting up feature selection with setup_feature_selection.\nDefining and training a model with train_model using RandomizedSearchCV.\nOptionally displaying a progress bar using tqdm and threading for real-time progress updates.\nExtracting and saving results with extract_and_save_results.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nSingle-threaded computation: show_progress=True, n_jobs=1 Multithreaded computation: show_progress=False, n_jobs=n"
  },
  {
    "objectID": "AutoFeatureSelection.html#usage-multithreaded-computation-showprogress-false-njobs-1",
    "href": "AutoFeatureSelection.html#usage-multithreaded-computation-showprogress-false-njobs-1",
    "title": "8  AutoFeatureSelection.py",
    "section": "8.5 Usage (Multithreaded computation: show_progress=False, n_jobs=-1)",
    "text": "8.5 Usage (Multithreaded computation: show_progress=False, n_jobs=-1)\n\n8.5.1 four_methods_degs_intersection\nfrom TransProPy.AutoFeatureSelection import auto_feature_selection\nauto_feature_selection(\n    data_file='../test_TransProPy/data/four_methods_degs_intersection.csv',\n    label_file='../test_TransProPy/data/class.csv',\n    label_col='class',\n    threshold=0.95,\n    show_plot=True,\n    show_progress=False,\n    n_iter=8,\n    n_cv=3,\n    n_jobs=-1,\n    save_path='../test_TransProPy/result/four_methods_degs_intersection_',\n    sleep_interval=100,\n    use_tkagg=False\n)\n\n\nFig1\n\n\n\nFig2\n\n#=============================#\n# Features selected by RFECV: #\n#=============================#\nIndex(['A2M', 'A2ML1', 'ABCA17P', 'ABCA9', 'ABCB4', 'ABCD1', 'AC016757.3',\n       'AC138035.2', 'AC159540.1', 'ACAD11',\n       ...\n       'ZBTB16', 'ZBTB32', 'ZBTB9', 'ZNF114', 'ZNF280B', 'ZNF337', 'ZNF410',\n       'ZNF564', 'ZNF697', 'ZNRF3'],\n      dtype='object', length=561)\n\n#===================================#\n# Features selected by SelectKBest: #\n#===================================#\nIndex(['ABCD1', 'AC125232.1', 'AC138035.2', 'AC159540.1', 'ACAD11', 'ACOT7',\n       'AGAP5', 'AKAP2', 'ALX1', 'ANKHD1',\n       ...\n       'TRIB2', 'TRIM34', 'TTC4', 'U2AF1', 'UBBP4', 'UBE2V1',\n       'XXbac-B461K10.4', 'ZBTB9', 'ZNF410', 'ZNRF3'],\n      dtype='object', length=184)\n\n#========================================#\n# Total number of selected features: 581 #\n#========================================#\n\n#==========================================#\n# Feature Importances from EnsembleForRFE: #\n#==========================================#\n                    Feature  Importance\n0             SLX1A-SULT1A3    0.455213\n1                    EIF3CL    0.095509\n2                     EEF1G    0.061155\n3             RP11-231C14.4    0.060150\n4                 RPL13AP25    0.001863\n5                     MEX3A    0.001836\n6                     SRXN1    0.001824\n7                  EEF1A1P9    0.001793\n8                PPP1R14BP3    0.001741\n9             RP11-513I15.6    0.001741\n10                HSD17B1P1    0.001626\n11                 HNRNPKP1    0.001606\n12                    TUBA8    0.001606\n13                RPL13AP20    0.001594\n14                 HNRNPCP2    0.001592\n15                    PYURF    0.001572\n16             RP11-676M6.1    0.001569\n17                EEF1A1P12    0.001568\n18           C15orf38-AP3S2    0.001516\n19                     DLX1    0.001484\n20            RP11-543P15.1    0.001480\n21             RP3-475N16.1    0.001441\n22                    WDR88    0.001439\n23                    TIMP3    0.001431\n24                   BOLA2B    0.001430\n25             RP4-756H11.3    0.001423\n26            RP11-977G19.5    0.001423\n27             CTC-451P13.1    0.001399\n28                    AKAP2    0.001398\n29            CTD-2303H24.2    0.001397\n..                      ...         ...\n531                 IL12RB1    0.000578\n532                 RASGRF1    0.000577\n533           RP5-1039K5.19    0.000577\n534  DTX2P1-UPK3BP1-PMS2P11    0.000574\n535                   FCRLA    0.000569\n536                    C1QC    0.000569\n537                  ARL2BP    0.000565\n538            RP11-434H6.6    0.000565\n539                   KRT14    0.000564\n540                   MCHR1    0.000564\n541                  DBNDD1    0.000563\n542                  ADAM23    0.000555\n543                     ADM    0.000554\n544                    CD74    0.000553\n545                    LAG3    0.000553\n546                 SLC28A3    0.000552\n547                     KMO    0.000551\n548                   KLK10    0.000551\n549                   ITGAL    0.000550\n550                   NEAT1    0.000549\n551                   RSAD2    0.000537\n552                  PKD1P5    0.000537\n553                   SEPT3    0.000527\n554                     LYZ    0.000525\n555            RP11-20D14.6    0.000523\n556                   GSDMC    0.000518\n557                  FAM46C    0.000511\n558                 SLCO5A1    0.000504\n559                   GSDMB    0.000435\n560                     FLG    0.000432\n\n[561 rows x 2 columns]\n\n#==========================#\n# Scores from SelectKBest: #\n#==========================#\n            Feature     Score\n0             EEF1G  0.657676\n1     SLX1A-SULT1A3  0.657676\n2            EIF3CL  0.656309\n3     RP11-231C14.4  0.655948\n4             U2AF1  0.654053\n5              TEN1  0.653639\n6           FAM156A  0.653524\n7     CTD-2231E14.8  0.652795\n8            NPIPB5  0.652436\n9           GTF2IP1  0.651938\n10   TMEM256-PLSCR3  0.651155\n11           EIF4A1  0.650506\n12          ARL6IP4  0.650506\n13            ATRIP  0.649792\n14            SPSB3  0.648970\n15       PPP1R14BP3  0.648784\n16   C15orf38-AP3S2  0.648361\n17            ZBTB9  0.647219\n18            AKAP2  0.646561\n19           NPIPA1  0.646222\n20            SNX15  0.646055\n21        RPL13AP25  0.645636\n22            AGAP5  0.645010\n23            CBWD3  0.644778\n24            EIF3C  0.644602\n25           PIK3R2  0.644362\n26           NPIPB3  0.643772\n27            MATR3  0.643762\n28           ZNF410  0.643468\n29            TOP3B  0.643425\n..              ...       ...\n154           ABCD1  0.581264\n155          DBNDD1  0.579869\n156      AC138035.2  0.579813\n157       HSD17B1P1  0.579566\n158           CHST6  0.579342\n159         RABGEF1  0.579211\n160            PLP1  0.578937\n161          TRIM34  0.578699\n162    RP11-42I10.1  0.578196\n163            ALX1  0.577680\n164          PIK3CD  0.577326\n165    RP4-756H11.3  0.576957\n166           PLOD3  0.576935\n167          FAM78A  0.576135\n168            CHKB  0.575878\n169             SDS  0.575652\n170            CCL5  0.575628\n171         CYP27A1  0.574835\n172          RNF157  0.574751\n173    RP11-419C5.2  0.574712\n174        C19orf38  0.573959\n175           NHEJ1  0.573535\n176     RP3-337H4.8  0.573386\n177          IGSF11  0.573195\n178       RPL13AP20  0.573170\n179   RP11-549B18.1  0.571859\n180           HLA-G  0.571613\n181     CH507-9B2.3  0.571400\n182           ACOT7  0.570546\n183           S100B  0.570479\n\n[184 rows x 2 columns]\n\n\n8.5.2 four_methods_degs_union\nfrom TransProPy.AutoFeatureSelection import auto_feature_selection\nauto_feature_selection(\n    data_file='../test_TransProPy/data/four_methods_degs_union.csv',\n    label_file='../test_TransProPy/data/class.csv',\n    label_col='class',\n    threshold=0.95,\n    show_plot=True,\n    show_progress=False,\n    n_iter=8,\n    n_cv=3,\n    n_jobs=-1,\n    save_path='../test_TransProPy/result/four_methods_degs_union_',\n    sleep_interval=100,\n    use_tkagg=False\n)\n\n\nFig3\n\n\n\nFig4\n\n#=============================#\n# Features selected by RFECV: #\n#=============================#\nIndex(['A1BG', 'A2M', 'A2ML1', 'AB019441.29', 'ABCA17P', 'ABCC11', 'ABCC3',\n       'ABCD1', 'AC006486.10', 'AC006538.1',\n       ...\n       'ZNF23', 'ZNF280B', 'ZNF337', 'ZNF410', 'ZNF564', 'ZNF697', 'ZNRF3',\n       'ZRANB2-AS2', 'ZSCAN12P1', 'ZSCAN32'],\n      dtype='object', length=1007)\n\n#===================================#\n# Features selected by SelectKBest: #\n#===================================#\nIndex(['ABCD1', 'AC125232.1', 'AC138035.2', 'AC159540.1', 'ACAD11', 'AGAP5',\n       'AKAP2', 'ALX1', 'ANKHD1', 'AP1S2',\n       ...\n       'TRIB2', 'TRIM34', 'TTC4', 'U2AF1', 'UBBP4', 'UBE2V1',\n       'XXbac-B461K10.4', 'ZBTB9', 'ZNF410', 'ZNRF3'],\n      dtype='object', length=180)\n\n#=========================================#\n# Total number of selected features: 1020 #\n#=========================================#\n\n#==========================================#\n# Feature Importances from EnsembleForRFE: #\n#==========================================#\n             Feature  Importance\n0             EIF3CL    0.404330\n1      RP11-231C14.4    0.147479\n2              EEF1G    0.062324\n3      SLX1A-SULT1A3    0.055901\n4              SRXN1    0.001105\n5             BOLA2B    0.001065\n6            CROCCP2    0.001064\n7              PYURF    0.001043\n8      RP11-513I15.6    0.001018\n9             GCSHP5    0.000976\n10      CTC-325H20.4    0.000974\n11    C15orf38-AP3S2    0.000962\n12             NOMO2    0.000959\n13         RPL13AP25    0.000947\n14      RP5-827C21.1    0.000941\n15          EEF1A1P9    0.000930\n16    RP11-386G11.10    0.000930\n17    MSANTD3-TMEFF1    0.000929\n18             TIMP3    0.000919\n19          C22orf23    0.000916\n20            NDUFV2    0.000913\n21             RAPH1    0.000908\n22             EIF3C    0.000905\n23           GTF2IP1    0.000889\n24             RTEL1    0.000884\n25           FABP5P7    0.000883\n26          RPS18P12    0.000874\n27            RNASEK    0.000873\n28            MRPL53    0.000870\n29     RP11-1148L6.5    0.000867\n...              ...         ...\n977             LAG3    0.000326\n978          TMPRSS2    0.000326\n979          FTH1P20    0.000326\n980           ACSBG1    0.000326\n981    RP11-144G6.12    0.000326\n982           ATRNL1    0.000324\n983            CERS1    0.000320\n984             LMO3    0.000319\n985           FBXO16    0.000318\n986          RPLP0P2    0.000317\n987            NUAK2    0.000317\n988            GSDMC    0.000316\n989           ADAM23    0.000316\n990    RP11-206L10.2    0.000315\n991             JPH2    0.000315\n992           SLC7A5    0.000312\n993       AC079922.3    0.000312\n994            CLIC3    0.000309\n995              HPN    0.000307\n996            TDRD9    0.000304\n997           ALOXE3    0.000304\n998          TMEM45A    0.000303\n999            DGAT2    0.000302\n1000           CPT1B    0.000302\n1001            SIK1    0.000298\n1002            GJA3    0.000295\n1003           DUSP1    0.000294\n1004         SLCO5A1    0.000290\n1005        ADAMTSL1    0.000288\n1006           HMGA2    0.000278\n\n[1007 rows x 2 columns]\n\n#==========================#\n# Scores from SelectKBest: #\n#==========================#\n            Feature     Score\n0             EEF1G  0.657676\n1     SLX1A-SULT1A3  0.657676\n2            EIF3CL  0.656309\n3     RP11-231C14.4  0.655948\n4             U2AF1  0.654053\n5           FAM156A  0.653784\n6              TEN1  0.653639\n7     CTD-2231E14.8  0.652795\n8            NPIPB5  0.652436\n9           GTF2IP1  0.651938\n10           EIF4A1  0.650506\n11          ARL6IP4  0.650506\n12   TMEM256-PLSCR3  0.649853\n13            ATRIP  0.649792\n14            SPSB3  0.648970\n15   C15orf38-AP3S2  0.648361\n16       PPP1R14BP3  0.648003\n17            AKAP2  0.646821\n18            SNX15  0.646576\n19            ZBTB9  0.646439\n20           NPIPA1  0.646222\n21        RPL13AP25  0.645636\n22            CBWD3  0.645298\n23            EIF3C  0.644602\n24            TOP3B  0.644247\n25            AGAP5  0.643969\n26           NPIPB3  0.643772\n27            MATR3  0.643762\n28           ARL17A  0.643547\n29          GUSBP11  0.643351\n..              ...       ...\n150         SLC31A2  0.583532\n151          LRRC8E  0.583163\n152            SNCA  0.582802\n153      AC138035.2  0.582591\n154            APC2  0.582428\n155        HIST1H4I  0.582267\n156           PSEN2  0.581922\n157       HSD17B1P1  0.581778\n158           PTPRJ  0.581601\n159           ABCD1  0.581524\n160          DBNDD1  0.581320\n161          SH2D2A  0.581028\n162    RP11-42I10.1  0.580332\n163            ALX1  0.579402\n164          STXBP1  0.579196\n165           CHST6  0.578714\n166         RABGEF1  0.578688\n167            PLP1  0.578346\n168    RP11-419C5.2  0.578111\n169             SDS  0.578105\n170          TRIM34  0.577805\n171          PIK3CD  0.577049\n172        C19orf38  0.577025\n173           PLOD3  0.576935\n174    RP4-756H11.3  0.576699\n175            CHKB  0.575946\n176          RNF157  0.575775\n177           NHEJ1  0.575764\n178            CCL5  0.575437\n179        C22orf23  0.575293\n\n[180 rows x 2 columns]\n\n\n\n\n\n\nNote\n\n\n\nPlease specify both the save path and the prefix for the generated file name when entering the save_path parameter.\n\n\n\n\n\n\n\n\nTip\n\n\n\nGiven that users have datasets of varying sizes, please configure appropriate computational resources before use. It is recommended for ordinary laptops or desktop computers not to exceed 10,000 feature genes to maintain computational efficiency. For datasets with tens of thousands of feature genes, utilizing a server is advised to reduce computational time and costs."
  },
  {
    "objectID": "funkyheatmap.html#library",
    "href": "funkyheatmap.html#library",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.1 library",
    "text": "9.1 library\nlibrary(readr)\nlibrary(TransProR)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(linkET)\nlibrary(funkyheatmap)\nlibrary(tidyverse)\nlibrary(RColorBrewer)"
  },
  {
    "objectID": "funkyheatmap.html#load-data",
    "href": "funkyheatmap.html#load-data",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.2 load data",
    "text": "9.2 load data\n# Load CSV files\nfour_methods_degs_union_combined_features &lt;- read_csv(\"../test_TransProR/four_methods_degs_union_combined_features.csv\")\nall_degs_count_exp_gene_feature_auc_mapping_0_5_0_9 &lt;- read_csv(\"../test_TransProR/all_degs_count_exp_gene_feature_auc_mapping_0.5_0.9.csv\")\nall_degs_count_exp_gene_feature_auc_mapping_0_9 &lt;- read_csv(\"../test_TransProR/all_degs_count_exp_gene_feature_auc_mapping_0.9.csv\")\n\n# Extract features and genes\nAutoFeatureSelection &lt;- four_methods_degs_union_combined_features$Feature\nNewMACFCmain_0_5_0_9 &lt;- all_degs_count_exp_gene_feature_auc_mapping_0_5_0_9$Gene\nNewMACFCmain_0_9 &lt;- all_degs_count_exp_gene_feature_auc_mapping_0_9$Gene\n\n# Combine gene lists\nNewMACFCmain &lt;- c(NewMACFCmain_0_5_0_9, NewMACFCmain_0_9)\n\n# Load RDS files\nDEG_deseq2 &lt;- readRDS(\"../test_TransProR/Select DEGs/DEG_deseq2.Rdata\")\nDEG_edgeR &lt;- readRDS(\"../test_TransProR/Select DEGs/DEG_edgeR.Rdata\")\nDEG_limma_voom &lt;- readRDS(\"../test_TransProR/Select DEGs/DEG_limma_voom.Rdata\")\noutRst &lt;- readRDS(\"../test_TransProR/Select DEGs/Wilcoxon_rank_sum_testoutRst.Rdata\")\n\n# Remove duplicates\nAutoFeatureSelection &lt;- unique(AutoFeatureSelection)\nNewMACFCmain &lt;- unique(NewMACFCmain)\n\n# Intersection\nTransPropy_intersection &lt;- intersect(AutoFeatureSelection, NewMACFCmain)\nprint(TransPropy_intersection)\n\n# Union\nTransPropy_union_list &lt;- union(AutoFeatureSelection, NewMACFCmain)"
  },
  {
    "objectID": "funkyheatmap.html#to-ensure-a-relatively-fair-comparison-the-number-of-features-extracted-by-the-other-four-methods-is-equal-to-the-number-of-features-in-the-transpropy_union_list.",
    "href": "funkyheatmap.html#to-ensure-a-relatively-fair-comparison-the-number-of-features-extracted-by-the-other-four-methods-is-equal-to-the-number-of-features-in-the-transpropy_union_list.",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.3 To ensure a relatively fair comparison, the number of features extracted by the other four methods is equal to the number of features in the TransPropy_union_list.",
    "text": "9.3 To ensure a relatively fair comparison, the number of features extracted by the other four methods is equal to the number of features in the TransPropy_union_list.\n\n9.3.1 Assuming Your Data is Stored in the Data Frame Variable DEG_deseq2\n# Set filtering parameters\np_val_col &lt;- \"pvalue\"\nlog_fc_col &lt;- \"log2FoldChange\"\np_val_threshold &lt;- 0.01\nN &lt;- 2635  # Top N genes\n\n# Check if the specified columns exist in the data frame\nif (!(p_val_col %in% names(DEG_deseq2))) {\n  stop(paste(\"Column\", p_val_col, \"not found in the data frame.\"))\n}\n\nif (!(log_fc_col %in% names(DEG_deseq2))) {\n  stop(paste(\"Column\", log_fc_col, \"not found in the data frame.\"))\n}\n\n# Filter data: first by p-value threshold\nfiltered_data &lt;- DEG_deseq2 %&gt;%\n  filter(!!sym(p_val_col) &lt; p_val_threshold)\n\n# Check if the number of filtered genes is greater than N\nif (nrow(filtered_data) &gt; N) {\n  # Sort by the absolute value of log2FoldChange and take the top N genes\n  deseq2_filtered_data &lt;- filtered_data %&gt;%\n    arrange(desc(abs(!!sym(log_fc_col)))) %&gt;%\n    head(N)\n  # Add row names as a new column \"gene\"\n  deseq2_filtered_data &lt;- deseq2_filtered_data %&gt;%\n    mutate(gene = rownames(deseq2_filtered_data))\n  # Remove row names\n  rownames(deseq2_filtered_data) &lt;- NULL\n}\n\n\n9.3.2 Assuming Your Data is Stored in the Data Frame Variable DEG_edgeR\n# Set filtering parameters\np_val_col &lt;- \"PValue\"\nlog_fc_col &lt;- \"logFC\"\np_val_threshold &lt;- 0.01\nN &lt;- 2635  # Top N genes\n\n# Check if the specified columns exist in the data frame\nif (!(p_val_col %in% names(DEG_edgeR))) {\n  stop(paste(\"Column\", p_val_col, \"not found in the data frame.\"))\n}\n\nif (!(log_fc_col %in% names(DEG_edgeR))) {\n  stop(paste(\"Column\", log_fc_col, \"not found in the data frame.\"))\n}\n\n# Filter data: first by p-value threshold\nfiltered_data &lt;- DEG_edgeR %&gt;%\n  filter(!!sym(p_val_col) &lt; p_val_threshold)\n\n# Check if the number of filtered genes is greater than N\nif (nrow(filtered_data) &gt; N) {\n  # Sort by the absolute value of log2FoldChange and take the top N genes\n  edgeR_filtered_data &lt;- filtered_data %&gt;%\n    arrange(desc(abs(!!sym(log_fc_col)))) %&gt;%\n    head(N)\n  # Add row names as a new column \"gene\"\n  edgeR_filtered_data &lt;- edgeR_filtered_data %&gt;%\n    mutate(gene = rownames(edgeR_filtered_data))\n  # Remove row names\n  rownames(edgeR_filtered_data) &lt;- NULL\n}\n\n\n9.3.3 Assuming Your Data is Stored in the Data Frame Variable DEG_limma_voom\n# Set filtering parameters\np_val_col &lt;- \"P.Value\"\nlog_fc_col &lt;- \"logFC\"\np_val_threshold &lt;- 0.01\nN &lt;- 2635  # Top N genes\n\n# Check if the specified columns exist in the data frame\nif (!(p_val_col %in% names(DEG_limma_voom))) {\n  stop(paste(\"Column\", p_val_col, \"not found in the data frame.\"))\n}\n\nif (!(log_fc_col %in% names(DEG_limma_voom))) {\n  stop(paste(\"Column\", log_fc_col, \"not found in the data frame.\"))\n}\n\n# Filter data: first by p-value threshold\nfiltered_data &lt;- DEG_limma_voom %&gt;%\n  filter(!!sym(p_val_col) &lt; p_val_threshold)\n\n# Check if the number of filtered genes is greater than N\nif (nrow(filtered_data) &gt; N) {\n  # Sort by the absolute value of log2FoldChange and take the top N genes\n  limma_filtered_data &lt;- filtered_data %&gt;%\n    arrange(desc(abs(!!sym(log_fc_col)))) %&gt;%\n    head(N)\n  # Add row names as a new column \"gene\"\n  limma_filtered_data &lt;- limma_filtered_data %&gt;%\n    mutate(gene = rownames(limma_filtered_data))\n  # Remove row names\n  rownames(limma_filtered_data) &lt;- NULL\n}\n\n\n9.3.4 Assuming Your Data is Stored in the Data Frame Variable outRst\n# Set filtering parameters\np_val_col &lt;- \"pValues\"\nlog_fc_col &lt;- \"log2foldChange\"\np_val_threshold &lt;- 0.01\nN &lt;- 2635  # Top N genes\n\n# Check if the specified columns exist in the data frame\nif (!(p_val_col %in% names(outRst))) {\n  stop(paste(\"Column\", p_val_col, \"not found in the data frame.\"))\n}\n\nif (!(log_fc_col %in% names(outRst))) {\n  stop(paste(\"Column\", log_fc_col, \"not found in the data frame.\"))\n}\n\n# Filter data: first by p-value threshold\nfiltered_data &lt;- outRst %&gt;%\n  filter(!!sym(p_val_col) &lt; p_val_threshold)\n\n# Check if the number of filtered genes is greater than N\nif (nrow(filtered_data) &gt; N) {\n  # Sort by the absolute value of log2FoldChange and take the top N genes\n  outRst_filtered_data &lt;- filtered_data %&gt;%\n    arrange(desc(abs(!!sym(log_fc_col)))) %&gt;%\n    head(N)\n  # Add row names as a new column \"gene\" and remove row names\n  outRst_filtered_data &lt;- outRst_filtered_data %&gt;%\n    mutate(gene = rownames(outRst_filtered_data)) \n  # Remove row names\n  rownames(outRst_filtered_data) &lt;- NULL\n}\ntumor &lt;- readRDS(\"../test_TransProR/generated_data1/removebatch_SKCM_Skin_TCGA_exp_tumor.rds\")\nnormal &lt;- readRDS('../test_TransProR/generated_data1/removebatch_SKCM_Skin_Normal_TCGA_GTEX_count.rds')\n# Merge the datasets, ensuring both have genes as row names\nall_count_exp &lt;- merge(tumor, normal, by = \"row.names\")\nall_count_exp &lt;- tibble::column_to_rownames(all_count_exp, var = \"Row.names\")  # Set the row names\n\n# log_transform\nall_count_exp &lt;- log_transform(all_count_exp)\n\n\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;- deseq2_filtered_data$gene\n# Find the matching rows in the second dataframe\ndeseq2 &lt;- all_count_exp[gene_names, ]\ndeseq2 &lt;- as.data.frame(t(deseq2))\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;- edgeR_filtered_data$gene\n# Find the matching rows in the second dataframe\nedgeR &lt;- all_count_exp[gene_names, ]\nedgeR &lt;- as.data.frame(t(edgeR))\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;- limma_filtered_data$gene\n# Find the matching rows in the second dataframe\nlimma &lt;- all_count_exp[gene_names, ]\nlimma &lt;- as.data.frame(t(limma))\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;-outRst_filtered_data$gene\n# Find the matching rows in the second dataframe\noutRst &lt;- all_count_exp[gene_names, ]\noutRst &lt;- as.data.frame(t(outRst))\n\n\nTransPropy &lt;- all_count_exp[TransPropy_union_list, ]\nTransPropy &lt;- as.data.frame(t(TransPropy))"
  },
  {
    "objectID": "funkyheatmap.html#prepare-data",
    "href": "funkyheatmap.html#prepare-data",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.4 prepare data",
    "text": "9.4 prepare data\ntumor &lt;- readRDS(\"../test_TransProR/generated_data1/removebatch_SKCM_Skin_TCGA_exp_tumor.rds\")\nnormal &lt;- readRDS('../test_TransProR/generated_data1/removebatch_SKCM_Skin_Normal_TCGA_GTEX_count.rds')\n# Merge the datasets, ensuring both have genes as row names\nall_count_exp &lt;- merge(tumor, normal, by = \"row.names\")\nall_count_exp &lt;- tibble::column_to_rownames(all_count_exp, var = \"Row.names\")  # Set the row names\n\n# log_transform\nall_count_exp &lt;- log_transform(all_count_exp)\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;- deseq2_filtered_data$gene\n# Find the matching rows in the second dataframe\ndeseq2 &lt;- all_count_exp[gene_names, ]\ndeseq2 &lt;- as.data.frame(t(deseq2))\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;- edgeR_filtered_data$gene\n# Find the matching rows in the second dataframe\nedgeR &lt;- all_count_exp[gene_names, ]\nedgeR &lt;- as.data.frame(t(edgeR))\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;- limma_filtered_data$gene\n# Find the matching rows in the second dataframe\nlimma &lt;- all_count_exp[gene_names, ]\nlimma &lt;- as.data.frame(t(limma))\n\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names &lt;-outRst_filtered_data$gene\n# Find the matching rows in the second dataframe\noutRst &lt;- all_count_exp[gene_names, ]\noutRst &lt;- as.data.frame(t(outRst))\n\nTransPropy &lt;- all_count_exp[TransPropy_union_list, ]\nTransPropy &lt;- as.data.frame(t(TransPropy))"
  },
  {
    "objectID": "funkyheatmap.html#finding-genes-common-to-all-methods",
    "href": "funkyheatmap.html#finding-genes-common-to-all-methods",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.5 Finding Genes Common to All Methods",
    "text": "9.5 Finding Genes Common to All Methods\ndeseq2list &lt;- colnames(deseq2) \nedgeRlist &lt;- colnames(edgeR)\nlimmalist &lt;- colnames(limma)\noutRstlist &lt;- colnames(outRst)\n\nlists &lt;- list(AutoFeatureSelection, NewMACFCmain, deseq2list, edgeRlist, limmalist, outRstlist)\nTransPro_all &lt;- Reduce(intersect, lists)\nprint(TransPro_all)"
  },
  {
    "objectID": "funkyheatmap.html#calculating-the-positive-and-negative-correlation-ratio-for-each-gene-with-all-other-genes",
    "href": "funkyheatmap.html#calculating-the-positive-and-negative-correlation-ratio-for-each-gene-with-all-other-genes",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.6 Calculating the Positive and Negative Correlation Ratio for Each Gene with All Other Genes",
    "text": "9.6 Calculating the Positive and Negative Correlation Ratio for Each Gene with All Other Genes\n\n9.6.1 TransPropy\nTransPropy_final_result &lt;- data.frame()\n\n# Loop through each gene name\nfor (gene in TransPro_all) {\n  \n  # Prepare a temporary data frame for the loop\n  correlation &lt;- data.frame()\n  \n  # Get the data for the current gene\n  genedata &lt;- as.numeric(TransPropy[, gene])\n  \n  # Get the list of genes\n  genelist &lt;- colnames(TransPropy)\n  \n  # For loop to calculate correlation\n  for (i in 1:length(genelist)) {\n    # Calculate correlation\n    dd &lt;- cor.test(genedata, as.numeric(TransPropy[, i]), method = \"spearman\")\n    \n    # Fill the temporary data frame\n    correlation[i, 1] &lt;- gene\n    correlation[i, 2] &lt;- genelist[i]\n    correlation[i, 3] &lt;- dd$estimate\n    correlation[i, 4] &lt;- dd$p.value\n  }\n  \n  # Set column names for the temporary data frame\n  colnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\n  \n  # Remove NA values\n  correlation &lt;- na.omit(correlation)\n  \n  # Write to file (if needed, uncomment)\n  # write.table(correlation, file = paste0(\"correlation_\", gene, \".csv\"), sep = \",\", row.names = TRUE)\n  \n  # Calculate the number of correlations with an absolute value greater than the threshold\n  N &lt;- 0.5\n  TransPropycount &lt;- sum(abs(correlation$cor) &gt; N)\n  TransPropycountup &lt;- sum(correlation$cor &gt; N)\n  TransPropycountdown &lt;- sum(correlation$cor &lt; -N)\n  \n  # Print results\n  print(paste(\"TransPropyGene:\", gene, \n              \"TransPropycount:\", TransPropycount, \n              \"TransPropycountup:\", TransPropycountup, \n              \"TransPropycountdown:\", TransPropycountdown))\n  \n  # Add results to the final result data frame\n  TransPropy_final_result &lt;- rbind(TransPropy_final_result, data.frame(\n    gene = gene, \n    TransPropycount = TransPropycount, \n    TransPropycountup = TransPropycountup, \n    TransPropycountdown = TransPropycountdown))\n}\n\n# Set column names for the final result data frame\ncolnames(TransPropy_final_result) &lt;- c(\"gene\", \"TransPropycount\", \"TransPropycountup\", \"TransPropycountdown\")\n\n# View the final result\nprint(TransPropy_final_result)\n\n# Write the final result to a file\n# write.table(TransPropy_final_result, file = \"TransPropy_final_correlation_TransPropy.csv\", sep = \",\", row.names = FALSE)\n\n# Calculate ratios\nTransPropy_final_result$TransPropycountup_ratio &lt;- TransPropy_final_result$TransPropycountup / TransPropy_final_result$TransPropycount\nTransPropy_final_result$TransPropycountdown_ratio &lt;- TransPropy_final_result$TransPropycountdown / TransPropy_final_result$TransPropycount\n\n\n9.6.2 deseq2\ndeseq2_final_result &lt;- data.frame()\n\n# Loop through each gene name\nfor (gene in TransPro_all) {\n  \n  # Prepare a temporary data frame for the loop\n  correlation &lt;- data.frame()\n  \n  # Get the data for the current gene\n  genedata &lt;- as.numeric(deseq2[, gene])\n  \n  # Get the list of genes\n  genelist &lt;- colnames(deseq2)\n  \n  # For loop to calculate correlation\n  for (i in 1:length(genelist)) {\n    # Calculate correlation\n    dd &lt;- cor.test(genedata, as.numeric(deseq2[, i]), method = \"spearman\")\n    \n    # Fill the temporary data frame\n    correlation[i, 1] &lt;- gene\n    correlation[i, 2] &lt;- genelist[i]\n    correlation[i, 3] &lt;- dd$estimate\n    correlation[i, 4] &lt;- dd$p.value\n  }\n  \n  # Set column names for the temporary data frame\n  colnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\n  \n  # Remove NA values\n  correlation &lt;- na.omit(correlation)\n  \n  # Write to file (if needed, uncomment)\n  # write.table(correlation, file = paste0(\"correlation_\", gene, \".csv\"), sep = \",\", row.names = TRUE)\n  \n  # Calculate the number of correlations with an absolute value greater than the threshold\n  N &lt;- 0.5\n  deseq2count &lt;- sum(abs(correlation$cor) &gt; N)\n  deseq2countup &lt;- sum(correlation$cor &gt; N)\n  deseq2countdown &lt;- sum(correlation$cor &lt; -N)\n  \n  # Print results\n  print(paste(\"deseq2Gene:\", gene, \n              \"deseq2count:\", deseq2count, \n              \"deseq2countup:\", deseq2countup, \n              \"deseq2countdown:\", deseq2countdown))\n  \n  # Add results to the final result data frame\n  deseq2_final_result &lt;- rbind(deseq2_final_result, data.frame(\n    gene = gene, \n    deseq2count = deseq2count, \n    deseq2countup = deseq2countup, \n    deseq2countdown = deseq2countdown))\n}\n\n# Set column names for the final result data frame\ncolnames(deseq2_final_result) &lt;- c(\"gene\", \"deseq2count\", \"deseq2countup\", \"deseq2countdown\")\n\n# View the final result\nprint(deseq2_final_result)\n\n# Write the final result to a file\n# write.table(deseq2_final_result, file = \"deseq2_final_correlation_TransPropy.csv\", sep = \",\", row.names = FALSE)\n\n# Calculate ratios\ndeseq2_final_result$deseq2countup_ratio &lt;- deseq2_final_result$deseq2countup / deseq2_final_result$deseq2count\ndeseq2_final_result$deseq2countdown_ratio &lt;- deseq2_final_result$deseq2countdown / deseq2_final_result$deseq2count\n\n\n9.6.3 edgeR\nedgeR_final_result &lt;- data.frame()\n\n# Loop through each gene name\nfor (gene in TransPro_all) {\n  \n  # Prepare a temporary data frame for the loop\n  correlation &lt;- data.frame()\n  \n  # Get the data for the current gene\n  genedata &lt;- as.numeric(edgeR[, gene])\n  \n  # Get the list of genes\n  genelist &lt;- colnames(edgeR)\n  \n  # For loop to calculate correlation\n  for (i in 1:length(genelist)) {\n    # Calculate correlation\n    dd &lt;- cor.test(genedata, as.numeric(edgeR[, i]), method = \"spearman\")\n    \n    # Fill the temporary data frame\n    correlation[i, 1] &lt;- gene\n    correlation[i, 2] &lt;- genelist[i]\n    correlation[i, 3] &lt;- dd$estimate\n    correlation[i, 4] &lt;- dd$p.value\n  }\n  \n  # Set column names for the temporary data frame\n  colnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\n  \n  # Remove NA values\n  correlation &lt;- na.omit(correlation)\n  \n  # Write to file (if needed, uncomment)\n  # write.table(correlation, file = paste0(\"correlation_\", gene, \".csv\"), sep = \",\", row.names = TRUE)\n  \n  # Calculate the number of correlations with an absolute value greater than the threshold\n  N &lt;- 0.5\n  edgeRcount &lt;- sum(abs(correlation$cor) &gt; N)\n  edgeRcountup &lt;- sum(correlation$cor &gt; N)\n  edgeRcountdown &lt;- sum(correlation$cor &lt; -N)\n  \n  # Print results\n  print(paste(\"edgeRGene:\", gene, \n              \"edgeRcount:\", edgeRcount, \n              \"edgeRcountup:\", edgeRcountup, \n              \"edgeRcountdown:\", edgeRcountdown))\n  \n  # Add results to the final result data frame\n  edgeR_final_result &lt;- rbind(edgeR_final_result, data.frame(\n    gene = gene, \n    edgeRcount = edgeRcount, \n    edgeRcountup = edgeRcountup, \n    edgeRcountdown = edgeRcountdown))\n}\n\n# Set column names for the final result data frame\ncolnames(edgeR_final_result) &lt;- c(\"gene\", \"edgeRcount\", \"edgeRcountup\", \"edgeRcountdown\")\n\n# View the final result\nprint(edgeR_final_result)\n\n# Write the final result to a file\n# write.table(edgeR_final_result, file = \"edgeR_final_correlation.csv\", sep = \",\", row.names = FALSE)\n\n# Calculate ratios\nedgeR_final_result$edgeRcountup_ratio &lt;- edgeR_final_result$edgeRcountup / edgeR_final_result$edgeRcount\nedgeR_final_result$edgeRcountdown_ratio &lt;- edgeR_final_result$edgeRcountdown / edgeR_final_result$edgeRcount\n\n\n9.6.4 limma\nlimma_final_result &lt;- data.frame()\n\n# Loop through each gene name\nfor (gene in TransPro_all) {\n  \n  # Prepare a temporary data frame for the loop\n  correlation &lt;- data.frame()\n  \n  # Get the data for the current gene\n  genedata &lt;- as.numeric(limma[, gene])\n  \n  # Get the list of genes\n  genelist &lt;- colnames(limma)\n  \n  # For loop to calculate correlation\n  for (i in 1:length(genelist)) {\n    # Calculate correlation\n    dd &lt;- cor.test(genedata, as.numeric(limma[, i]), method = \"spearman\")\n    \n    # Fill the temporary data frame\n    correlation[i, 1] &lt;- gene\n    correlation[i, 2] &lt;- genelist[i]\n    correlation[i, 3] &lt;- dd$estimate\n    correlation[i, 4] &lt;- dd$p.value\n  }\n  \n  # Set column names for the temporary data frame\n  colnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\n  \n  # Remove NA values\n  correlation &lt;- na.omit(correlation)\n  \n  # Write to file (if needed, uncomment)\n  # write.table(correlation, file = paste0(\"correlation_\", gene, \".csv\"), sep = \",\", row.names = TRUE)\n  \n  # Calculate the number of correlations with an absolute value greater than the threshold\n  N &lt;- 0.5\n  limmacount &lt;- sum(abs(correlation$cor) &gt; N)\n  limmacountup &lt;- sum(correlation$cor &gt; N)\n  limmacountdown &lt;- sum(correlation$cor &lt; -N)\n  \n  # Print results\n  print(paste(\"limmaGene:\", gene, \n              \"limmacount:\", limmacount, \n              \"limmacountup:\", limmacountup, \n              \"limmacountdown:\", limmacountdown))\n  \n  # Add results to the final result data frame\n  limma_final_result &lt;- rbind(limma_final_result, data.frame(\n    gene = gene, \n    limmacount = limmacount, \n    limmacountup = limmacountup, \n    limmacountdown = limmacountdown))\n}\n\n# Set column names for the final result data frame\ncolnames(limma_final_result) &lt;- c(\"gene\", \"limmacount\", \"limmacountup\", \"limmacountdown\")\n\n# View the final result\nprint(limma_final_result)\n\n# Write the final result to a file\n# write.table(limma_final_result, file = \"limma_final_correlation.csv\", sep = \",\", row.names = FALSE)\n\n# Calculate ratios\nlimma_final_result$limmacountup_ratio &lt;- limma_final_result$limmacountup / limma_final_result$limmacount\nlimma_final_result$limmacountdown_ratio &lt;- limma_final_result$limmacountdown / limma_final_result$limmacount\n\n\n9.6.5 outRst\noutRst_final_result &lt;- data.frame()\n\n# Loop through each gene name\nfor (gene in TransPro_all) {\n  \n  # Prepare a temporary data frame for the loop\n  correlation &lt;- data.frame()\n  \n  # Get the data for the current gene\n  genedata &lt;- as.numeric(outRst[, gene])\n  \n  # Get the list of genes\n  genelist &lt;- colnames(outRst)\n  \n  # For loop to calculate correlation\n  for (i in 1:length(genelist)) {\n    # Calculate correlation\n    dd &lt;- cor.test(genedata, as.numeric(outRst[, i]), method = \"spearman\")\n    \n    # Fill the temporary data frame\n    correlation[i, 1] &lt;- gene\n    correlation[i, 2] &lt;- genelist[i]\n    correlation[i, 3] &lt;- dd$estimate\n    correlation[i, 4] &lt;- dd$p.value\n  }\n  \n  # Set column names for the temporary data frame\n  colnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\n  \n  # Remove NA values\n  correlation &lt;- na.omit(correlation)\n  \n  # Write to file (if needed, uncomment)\n  # write.table(correlation, file = paste0(\"correlation_\", gene, \".csv\"), sep = \",\", row.names = TRUE)\n  \n  # Calculate the number of correlations with an absolute value greater than the threshold\n  N &lt;- 0.5\n  outRstcount &lt;- sum(abs(correlation$cor) &gt; N)\n  outRstcountup &lt;- sum(correlation$cor &gt; N)\n  outRstcountdown &lt;- sum(correlation$cor &lt; -N)\n  \n  # Print results\n  print(paste(\"outRstGene:\", gene, \n              \"outRstcount:\", outRstcount, \n              \"outRstcountup:\", outRstcountup, \n              \"outRstcountdown:\", outRstcountdown))\n  \n  # Add results to the final result data frame\n  outRst_final_result &lt;- rbind(outRst_final_result, data.frame(\n    gene = gene, \n    outRstcount = outRstcount, \n    outRstcountup = outRstcountup, \n    outRstcountdown = outRstcountdown))\n}\n\n# Set column names for the final result data frame\ncolnames(outRst_final_result) &lt;- c(\"gene\", \"outRstcount\", \"outRstcountup\", \"outRstcountdown\")\n\n# View the final result\nprint(outRst_final_result)\n\n# Write the final result to a file\n# write.table(outRst_final_result, file = \"outRst_final_correlation.csv\", sep = \",\", row.names = FALSE)\n\n# Calculate ratios\noutRst_final_result$outRstcountup_ratio &lt;- outRst_final_result$outRstcountup / outRst_final_result$outRstcount\noutRst_final_result$outRstcountdown_ratio &lt;- outRst_final_result$outRstcountdown / outRst_final_result$outRstcount"
  },
  {
    "objectID": "funkyheatmap.html#funkyheatmap",
    "href": "funkyheatmap.html#funkyheatmap",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.7 funkyheatmap",
    "text": "9.7 funkyheatmap\n# Calculate the average of the last two columns\navg_outRstcountup_ratio &lt;- mean(outRst_final_result$outRstcountup_ratio, na.rm = TRUE)\navg_outRstcountdown_ratio &lt;- mean(outRst_final_result$outRstcountdown_ratio, na.rm = TRUE)\n# Print the averages\nprint(paste(\"Average of outRstcountup_ratio: \", avg_outRstcountup_ratio))\nprint(paste(\"Average of outRstcountdown_ratio: \", avg_outRstcountdown_ratio))\n\n# Calculate the average of the last two columns\navg_limmacountup_ratio &lt;- mean(limma_final_result$limmacountup_ratio, na.rm = TRUE)\navg_limmacountdown_ratio &lt;- mean(limma_final_result$limmacountdown_ratio, na.rm = TRUE)\n# Print the averages\nprint(paste(\"Average of limmacountup_ratio: \", avg_limmacountup_ratio))\nprint(paste(\"Average of limmacountdown_ratio: \", avg_limmacountdown_ratio))\n\n# Calculate the average of the last two columns\navg_edgeRcountup_ratio &lt;- mean(edgeR_final_result$edgeRcountup_ratio, na.rm = TRUE)\navg_edgeRcountdown_ratio &lt;- mean(edgeR_final_result$edgeRcountdown_ratio, na.rm = TRUE)\n# Print the averages\nprint(paste(\"Average of edgeRcountup_ratio: \", avg_edgeRcountup_ratio))\nprint(paste(\"Average of edgeRcountdown_ratio: \", avg_edgeRcountdown_ratio))\n\n# Calculate the average of the last two columns\navg_deseq2countup_ratio &lt;- mean(deseq2_final_result$deseq2countup_ratio, na.rm = TRUE)\navg_deseq2countdown_ratio &lt;- mean(deseq2_final_result$deseq2countdown_ratio, na.rm = TRUE)\n# Print the averages\nprint(paste(\"Average of deseq2countup_ratio: \", avg_deseq2countup_ratio))\nprint(paste(\"Average of deseq2countdown_ratio: \", avg_deseq2countdown_ratio))\n\n# Calculate the average of the last two columns\navg_TransPropycountup_ratio &lt;- mean(TransPropy_final_result$TransPropycountup_ratio, na.rm = TRUE)\navg_TransPropycountdown_ratio &lt;- mean(TransPropy_final_result$TransPropycountdown_ratio, na.rm = TRUE)\n# Print the averages\nprint(paste(\"Average of TransPropycountup_ratio: \", avg_TransPropycountup_ratio))\nprint(paste(\"Average of TransPropycountdown_ratio: \", avg_TransPropycountdown_ratio))\n# First, list all your data frames\ndata_frames &lt;- list(deseq2_final_result, edgeR_final_result, limma_final_result, outRst_final_result, TransPropy_final_result)\n\n# Use reduce function from purrr package to merge them by \"gene\" column\nmerged_df &lt;- purrr::reduce(data_frames, function(x, y) merge(x, y, by = \"gene\"))\n\n# Get column names\ncolumns &lt;- colnames(merged_df)\n\n# Create the ALL row\nall_values &lt;- c(2635, 2635, 2635, 1, 1)\nall_values_repeated &lt;- rep(all_values, length.out = length(columns) - 1)\nall_row &lt;- as.data.frame(t(all_values_repeated))\ncolnames(all_row) &lt;- columns[-1]\nall_row &lt;- cbind(gene = \"ALL\", all_row)\n\n# Create the HALF row (half of the ALL row values)\nhalf_row &lt;- all_row\nhalf_row[,-1] &lt;- half_row[,-1] / 2\nhalf_row$gene &lt;- \"HALF\"\n\n# Create the QUARTER row (quarter of the ALL row values)\nquarter_row &lt;- all_row\nquarter_row[,-1] &lt;- quarter_row[,-1] / 4\nquarter_row$gene &lt;- \"QUARTER\"\n\n# Create the ZERO row (all values are 0)\nZero_values_repeated &lt;- rep(0, length.out = length(columns) - 1)\nZero_row &lt;- as.data.frame(t(Zero_values_repeated))\ncolnames(Zero_row) &lt;- columns[-1]\nZero_row &lt;- cbind(gene = \"ZERO\", Zero_row)\n\n# Calculate the average values for each column, ignoring the first column (gene column)\naverage_values &lt;- colMeans(merged_df[,-1], na.rm = TRUE)\naverage_row &lt;- data.frame(gene = \"AVERAGE\", t(average_values))\n\n# Add the ALL, HALF, QUARTER, ZERO, and AVERAGE rows to the data frame\nmerged_df &lt;- bind_rows(merged_df, all_row, half_row, quarter_row, Zero_row, average_row)\n\n# Print the merged data frame\nprint(merged_df)\n\n# Rename the first column from \"gene\" to \"id\"\nmerged_df &lt;- merged_df %&gt;%\n  rename(id = gene)\n\n# Format values: keep integers for values &gt;= 1, and two decimal places for values &lt; 1\nformat_value &lt;- function(x) {\n  ifelse(x &gt;= 1, as.integer(x), round(x, 2))\n}\n\n# Apply the formatting function\ndf_formatted &lt;- merged_df %&gt;%\n  mutate(across(where(is.numeric), format_value))\n\n# Print the formatted data frame\nprint(df_formatted)"
  },
  {
    "objectID": "funkyheatmap.html#start-drawing",
    "href": "funkyheatmap.html#start-drawing",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.8 Start drawing",
    "text": "9.8 Start drawing\n\n9.8.1 name is the text displayed in the final image, which can be changed freely, but ~id must be accurate without any errors. The ~group can be repeated and is used to further merge ~id, assisting in the generation of column_groups in subsequent steps.\ncolumn_info &lt;- tribble( \n  ~id,                       ~group,                    ~name,                ~geom,              ~palette,        ~options,             \n  \"id\",                      \"\",                        \"\",                   \"text\",             NA,              list(hjust = 0, width = 8),\n  \"deseq2count\",             \"deseq2count\",             \"Count\",              \"funkyrect\",        \"palette1\",      list(legend = F), \n  \"deseq2countup\",           \"deseq2countup\",           \"CountUp\",            \"funkyrect\",        \"palette1\",      list(legend = F), \n  \"deseq2countdown\",         \"deseq2countdown\",         \"CountDown\",          \"funkyrect\",        \"palette1\",      list(legend = F),  \n  \"deseq2countup_ratio\",     \"deseq2countup_ratio\",     \"UpRatio\",            \"bar\",              \"palette1\",      list(width = 3, legend = F),  \n  \"deseq2countup_ratio\",     \"deseq2countup_ratio\",     \"UpRatio\",            \"text\",             \"palette1\",      list(width = 3),  \n  \"deseq2countdown_ratio\",   \"deseq2countdown_ratio\",   \"DownRatio\",          \"bar\",              \"palette1\",      list(width = 3, legend = F),  \n  \"deseq2countdown_ratio\",   \"deseq2countdown_ratio\",   \"DownRatio\",          \"text\",             \"palette1\",      list(width = 3),  \n  \"edgeRcount\",              \"edgeRcount\",              \"Count\",              \"circle\",           \"palette2\",      list(legend = F),   \n  \"edgeRcountup\",            \"edgeRcountup\",            \"CountUp\",            \"circle\",           \"palette2\",      list(legend = F),    \n  \"edgeRcountdown\",          \"edgeRcountdown\",          \"CountDown\",          \"circle\",           \"palette2\",      list(legend = F),    \n  \"edgeRcountup_ratio\",      \"edgeRcountup_ratio\",      \"UpRatio\",            \"bar\",              \"palette2\",      list(width = 3, legend = F),     \n  \"edgeRcountup_ratio\",      \"edgeRcountup_ratio\",      \"UpRatio\",            \"text\",             \"palette2\",      list(width = 3),     \n  \"edgeRcountdown_ratio\",    \"edgeRcountdown_ratio\",    \"DownRatio\",          \"bar\",              \"palette2\",      list(width = 3, legend = F),     \n  \"edgeRcountdown_ratio\",    \"edgeRcountdown_ratio\",    \"DownRatio\",          \"text\",             \"palette2\",      list(width = 3), \n  \"limmacount\",              \"limmacount\",              \"Count\",              \"funkyrect\",        \"palette3\",      list(legend = F), \n  \"limmacountup\",            \"limmacountup\",            \"CountUp\",            \"funkyrect\",        \"palette3\",      list(legend = F), \n  \"limmacountdown\",          \"limmacountdown\",          \"CountDown\",          \"funkyrect\",        \"palette3\",      list(legend = F),  \n  \"limmacountup_ratio\",      \"limmacountup_ratio\",      \"UpRatio\",            \"bar\",              \"palette3\",      list(width = 3, legend = F),  \n  \"limmacountup_ratio\",      \"limmacountup_ratio\",      \"UpRatio\",            \"text\",             \"palette3\",      list(width = 3),\n  \"limmacountdown_ratio\",    \"limmacountdown_ratio\",    \"DownRatio\",          \"bar\",              \"palette3\",      list(width = 3, legend = F),  \n  \"limmacountdown_ratio\",    \"limmacountdown_ratio\",    \"DownRatio\",          \"text\",             \"palette3\",      list(width = 3),\n  \"outRstcount\",             \"outRstcount\",             \"Count\",              \"circle\",           \"palette4\",      list(legend = F),   \n  \"outRstcountup\",           \"outRstcountup\",           \"CountUp\",            \"circle\",           \"palette4\",      list(legend = F),\n  \"outRstcountdown\",         \"outRstcountdown\",         \"CountDown\",          \"circle\",           \"palette4\",      list(legend = F), \n  \"outRstcountup_ratio\",     \"outRstcountup_ratio\",     \"UpRatio\",            \"bar\",              \"palette4\",      list(width = 3, legend = F),  \n  \"outRstcountup_ratio\",     \"outRstcountup_ratio\",     \"UpRatio\",            \"text\",             \"palette4\",      list(width = 3),  \n  \"outRstcountdown_ratio\",   \"outRstcountdown_ratio\",   \"DownRatio\",          \"bar\",              \"palette4\",      list(width = 3, legend = F),  \n  \"outRstcountdown_ratio\",   \"outRstcountdown_ratio\",   \"DownRatio\",          \"text\",             \"palette4\",      list(width = 3),  \n  \"TransPropycount\",         \"TransPropycount\",         \"Count\",              \"funkyrect\",        \"palette5\",      list(legend = F),   \n  \"TransPropycountup\",       \"TransPropycountup\",       \"CountUp\",            \"funkyrect\",        \"palette5\",      list(legend = F), \n  \"TransPropycountdown\",     \"TransPropycountdown\",     \"CountDown\",          \"funkyrect\",        \"palette5\",      list(legend = F), \n  \"TransPropycountup_ratio\", \"TransPropycountup_ratio\", \"UpRatio\",            \"bar\",              \"palette5\",      list(width = 3, legend = F),  \n  \"TransPropycountup_ratio\", \"TransPropycountup_ratio\", \"UpRatio\",            \"text\",             \"palette5\",      list(width = 3),  \n  \"TransPropycountdown_ratio\",\"TransPropycountdown_ratio\",\"DownRatio\",        \"bar\",              \"palette5\",      list(width = 3, legend = F), \n  \"TransPropycountdown_ratio\",\"TransPropycountdown_ratio\",\"DownRatio\",        \"text\",             \"palette5\",      list(width = 3) \n)\n\n\n\n9.8.2 ~Category and ~Experiment are the text on the final image and can be customized freely.\ncolumn_groups &lt;- tribble( \n  ~Experiment,            ~Category,   ~group,                  ~palette,            \n  \"deseq2\",               \"count\",     \"deseq2count\",           \"palette1\",        \n  \"deseq2\",               \"count\",     \"deseq2countup\",         \"palette1\",        \n  \"deseq2\",               \"count\",     \"deseq2countdown\",       \"palette1\",        \n  \"deseq2\",               \"ratio\",     \"deseq2countup_ratio\",   \"palette1\",        \n  \"deseq2\",               \"ratio\",     \"deseq2countdown_ratio\", \"palette1\",        \n  \"edgeR\",                \"count\",     \"edgeRcount\",            \"palette2\",        \n  \"edgeR\",                \"count\",     \"edgeRcountup\",          \"palette2\",          \n  \"edgeR\",                \"count\",     \"edgeRcountdown\",        \"palette2\",       \n  \"edgeR\",                \"ratio\",     \"edgeRcountup_ratio\",    \"palette2\",          \n  \"edgeR\",                \"ratio\",     \"edgeRcountdown_ratio\",  \"palette2\",           \n  \"limma\",                \"count\",     \"limmacount\",            \"palette3\",        \n  \"limma\",                \"count\",     \"limmacountup\",          \"palette3\",        \n  \"limma\",                \"count\",     \"limmacountdown\",        \"palette3\",        \n  \"limma\",                \"ratio\",     \"limmacountup_ratio\",    \"palette3\",        \n  \"limma\",                \"ratio\",     \"limmacountdown_ratio\",  \"palette3\",        \n  \"outRst\",               \"count\",     \"outRstcount\",           \"palette4\",       \n  \"outRst\",               \"count\",     \"outRstcountup\",         \"palette4\",        \n  \"outRst\",               \"count\",     \"outRstcountdown\",       \"palette4\",        \n  \"outRst\",               \"ratio\",     \"outRstcountup_ratio\",   \"palette4\",        \n  \"outRst\",               \"ratio\",     \"outRstcountdown_ratio\", \"palette4\",        \n  \"TransPropy\",           \"count\",     \"TransPropycount\",       \"palette5\",        \n  \"TransPropy\",           \"count\",     \"TransPropycountup\",     \"palette5\",       \n  \"TransPropy\",           \"count\",     \"TransPropycountdown\",   \"palette5\",       \n  \"TransPropy\",           \"ratio\",     \"TransPropycountup_ratio\",\"palette5\",         \n  \"TransPropy\",           \"ratio\",     \"TransPropycountdown_ratio\",\"palette5\",        \n)\nrow_info &lt;- tribble( \n  ~group,                ~id,             \n  \"GENE\",                \"A2ML1\",\n  \"GENE\",                \"AC159540.1\",\n  \"GENE\",                \"ACAD11\",\n  \"GENE\",                \"ADAM33\",            \n  \"GENE\",                \"AGAP5\",\n  \"GENE\",                \"AKAP2\",\n  \"GENE\",                \"ALOXE3\",\n  \"GENE\",                \"ALX1\",              \n  \"GENE\",                \"ANKRD35\",\n  \"GENE\",                \"AOX1\",\n  \"GENE\",                \"AP000892.6\",\n  \"GENE\",                \"ARL17A\",\n  \"GENE\",                \"ARPC4-TTLL3\",\n  \"GENE\",                \"ATP5J2-PTCD1\",\n  \"GENE\",                \"ATRIP\",\n  \"GENE\",                \"BATF2\",\n  \"GENE\",                \"C15orf38-AP3S2\",\n  \"GENE\",                \"C17orf49\",\n  \"GENE\",                \"C6orf132\",\n  \"GENE\",                \"CBWD3\",             \n  \"GENE\",                \"CD79A\",\n  \"GENE\",                \"CFD\",\n  \"GENE\",                \"CST6\",\n  \"GENE\",                \"CTC-231O11.1\",      \n  \"GENE\",                \"CTD-2231E14.8\",\n  \"GENE\",                \"DKK1\",\n  \"GENE\",                \"DNASE1L2\",\n  \"GENE\",                \"DNLZ\",              \n  \"GENE\",                \"EIF3C\",\n  \"GENE\",                \"FABP5P7\",\n  \"GENE\",                \"FCGR3A\",\n  \"GENE\",                \"FGF22\",             \n  \"GENE\",                \"GABRE\",\n  \"BACKGROUND\",          \"ALL\",\n  \"BACKGROUND\",          \"HALF\",\n  \"BACKGROUND\",          \"QUARTER\",\n  \"BACKGROUND\",          \"ZERO\",                        \n  \"DIFMethods_AVERAGE\",  \"AVERAGE\"      \n)\n\n\n9.8.3 ~Group is the text in the final image and can be named freely.\nrow_groups &lt;- tribble( \n  ~group,                ~Group,             \n  \"GENE\",                \"GENE\",\n  \"BACKGROUND\",          \"BACKGROUND\",              \n  \"DIFMethods_AVERAGE\",  \"Different Methods\"      \n)\n# Define a function to generate color gradients\ngenerate_palette &lt;- function(base_color, n) {\n  colorRampPalette(c(base_color, \"white\"))(n)\n}\n\n# Use the defined function to generate palettes\npalettes &lt;- list(\n  palette1 = (generate_palette(\"#577d78\", 9)),\n  palette2 = (generate_palette(\"#bd8452\", 9)),\n  palette3 = (generate_palette(\"#616b2e\", 9)),\n  palette4 = (generate_palette(\"#bd988f\", 9)),\n  palette5 = (generate_palette(\"#5d6c7e\", 9))\n)\n\n# Use the funky_heatmap function to generate the plot\nfunky_heatmap(\n    data = df_formatted,\n    column_info = column_info,\n    column_groups = column_groups,\n    row_info = row_info,\n    row_groups = row_groups,\n    palettes = palettes,\n    position_args = position_arguments(col_annot_offset = 3.2)\n)"
  },
  {
    "objectID": "funkyheatmap.html#methods",
    "href": "funkyheatmap.html#methods",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.9 Methods",
    "text": "9.9 Methods\n\n\nExtract the intersection of genes selected by each method within the five packages (totaling 33 genes).\nFor each intersecting gene, calculate the correlation with the remaining genes, and count the total number of genes with an absolute value greater than 0.5, as well as the number of positively and negatively correlated genes.\nCalculate the ratio of positively and negatively correlated genes to the total number of genes with an absolute correlation value greater than 0.5 for each gene.\nCompute the average of all ratios to observe the sensitivity of each method to inter-feature correlations."
  },
  {
    "objectID": "funkyheatmap.html#result",
    "href": "funkyheatmap.html#result",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.10 Result",
    "text": "9.10 Result\n\n\nFig1"
  },
  {
    "objectID": "funkyheatmap.html#discussion",
    "href": "funkyheatmap.html#discussion",
    "title": "9  Comparison of TransPropy with Other Tool Packages Using Funkyheatmap",
    "section": "9.11 Discussion",
    "text": "9.11 Discussion\n\ndeseq2/edgeRTransPropylimma/outRst\n\n\nThe statistical results indicate that the proportion of genes with a positive correlation and a correlation value greater than 0.5 is higher than the proportion of genes with a negative correlation and a correlation value less than -0.5. There is an imbalance in the number of positively and negatively correlated features.\n\n\nThe statistical results indicate that the proportion of genes with a positive correlation and a correlation value greater than 0.5 is equal to the proportion of genes with a negative correlation and a correlation value less than -0.5. The number of positively and negatively correlated features is very balanced (BEST).\n\n\nThe statistical results indicate that the proportion of genes with a positive correlation and a correlation value greater than 0.5 is higher than the proportion of genes with a negative correlation and a correlation value less than -0.5. There is an imbalance in the number of positively and negatively correlated features."
  },
  {
    "objectID": "Percentage Stacked Line Bar Chart.html#library",
    "href": "Percentage Stacked Line Bar Chart.html#library",
    "title": "10  Comparison of TransPropy with Other Tool Packages Using Percentage Stacked Line Bar Chart",
    "section": "10.1 library",
    "text": "10.1 library\nlibrary(readr)\nlibrary(TransProR)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(linkET)\nlibrary(funkyheatmap)\nlibrary(tidyverse)\nlibrary(RColorBrewer)\nlibrary(ggalluvial)\nlibrary(tidyr)\nlibrary(tibble)"
  },
  {
    "objectID": "Percentage Stacked Line Bar Chart.html#data",
    "href": "Percentage Stacked Line Bar Chart.html#data",
    "title": "10  Comparison of TransPropy with Other Tool Packages Using Percentage Stacked Line Bar Chart",
    "section": "10.2 data",
    "text": "10.2 data\ndata = tribble(\n  ~Methods,  ~DownRatio,  ~UpRatio,\n  \"deseq2\",  666,  899, \n  \"edgeR\",  685,  788, \n  \"limma\", 757, 1022, \n  \"Rank-Sum Test\",  579,  1089,\n  \"TransPropy\",  711,  726\n)\n\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\npal = c('#909231', '#f4bf5f')"
  },
  {
    "objectID": "Percentage Stacked Line Bar Chart.html#all-percentage-stacked-line-bar-chart",
    "href": "Percentage Stacked Line Bar Chart.html#all-percentage-stacked-line-bar-chart",
    "title": "10  Comparison of TransPropy with Other Tool Packages Using Percentage Stacked Line Bar Chart",
    "section": "10.3 All Percentage Stacked Line Bar Chart",
    "text": "10.3 All Percentage Stacked Line Bar Chart\ndf %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:5, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\",\n        subtitle = \"Comparison of Five Feature Extraction Methods. \\nProportion Comparison of Negatively and Positively Correlated Feature Genes. \") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\n\n\nAll Percentage Stacked Line Bar Chart.png"
  },
  {
    "objectID": "Percentage Stacked Line Bar Chart.html#separate-percentage-stacked-line-bar-chart",
    "href": "Percentage Stacked Line Bar Chart.html#separate-percentage-stacked-line-bar-chart",
    "title": "10  Comparison of TransPropy with Other Tool Packages Using Percentage Stacked Line Bar Chart",
    "section": "10.4 Separate Percentage Stacked Line Bar Chart",
    "text": "10.4 Separate Percentage Stacked Line Bar Chart\n# Create the transformed data frame with all Down columns first and Up columns at the end\ndata &lt;- tribble(\n  ~Methods,    ~Down_A2ML1, ~Down_AC159540.1, ~Down_ACAD11, ~Down_ADAM33, ~Down_AGAP5,\n  ~Down_AKAP2, ~Down_ALOXE3, ~Down_ALX1, ~Down_ANKRD35, ~Down_AOX1, \n  ~Down_AP000892.6, ~Down_ARL17A, ~Down_ARPC4.TTLL3, ~Down_ATP5J2.PTCD1, ~Down_ATRIP, ~Down_BATF2, ~Down_C15orf38.AP3S2, ~Down_C17orf49, ~Down_C6orf132,\n  ~Down_CBWD3, ~Down_CD79A, ~Down_CFD, ~Down_CST6, ~Down_CTC.231O11.1, \n  ~Down_CTD.2231E14.8, ~Down_DKK1, ~Down_DNASE1L2, ~Down_DNLZ, ~Down_EIF3C,\n  ~Down_FABP5P7, ~Down_FCGR3A, ~Down_FGF22, ~Down_GABRE,\n  ~Up_A2ML1, ~Up_AC159540.1, ~Up_ACAD11, ~Up_ADAM33, ~Up_AGAP5,\n  ~Up_AKAP2, ~Up_ALOXE3, ~Up_ALX1, ~Up_ANKRD35, ~Up_AOX1, \n  ~Up_AP000892.6, ~Up_ARL17A, ~Up_ARPC4.TTLL3, ~Up_ATP5J2.PTCD1, ~Up_ATRIP, ~Up_BATF2, ~Up_C15orf38.AP3S2, ~Up_C17orf49, ~Up_C6orf132,\n  ~Up_CBWD3, ~Up_CD79A, ~Up_CFD, ~Up_CST6, ~Up_CTC.231O11.1, \n  ~Up_CTD.2231E14.8, ~Up_DKK1, ~Up_DNASE1L2, ~Up_DNLZ, ~Up_EIF3C,\n  ~Up_FABP5P7, ~Up_FCGR3A, ~Up_FGF22, ~Up_GABRE,\n  \"deseq2\",        194,           877,           852,          880,       849, \n  900,           292,          621,           619,       767,\n  737,           816,          859,          804,       837, \n  1143,           904,          884,           710,       805,\n  586,            453,          290,           548,       865,\n  104,            40,           881,           882,       685,\n  491,            28,           775,\n  978,            666,         1028,         615,        912,\n  583,          1035,         876,         1190,        513,\n  1232,          1224,          748,          504,       1169,\n  889,           627,          653,         1212,       1243,\n  882,          1133,         1075,          942,        927,\n  131,           976,          673,          739,       1188,\n  938,           923,         1255,\n  \"edgeR\",         175,           943,           911,          938,       910,\n  956,           282,          540,           648,       791,\n  777,           875,          920,          837,       899,\n  958,           975,          946,           752,       863,\n  514,            464,          284,           478,       924,\n  106,             35,          950,           954,       730,\n  428,             25,          826,\n  810,            564,          864,          528,        774,\n  501,           861,          930,          984,        446,\n  1022,          1015,          634,          438,        981,\n  967,           541,          561,         1000,       1031,\n  961,           935,          885,         1012,        803,\n  122,           810,          585,          637,        988,\n  1024,           765,         1036,\n  \"limma\",         343,          1031,           934,         1014,       972,\n  969,           389,          744,           605,       884,\n  673,           838,         1025,          886,       927,\n  1257,           987,          998,           664,       806,\n  676,            489,          379,           669,      1033,\n  346,            253,         1049,          954,       610,\n  551,            228,          735,\n  1070,            804,         1130,          735,       1035,\n  674,          1129,         1104,         1307,        610,\n  1383,          1349,          895,          598,       1278,\n  1048,           744,          790,         1330,       1368,\n  1101,          1290,         1145,         1130,       1063,\n  167,          1047,          810,          892,       1290,\n  1041,          1002,         1380,\n  \"Rank-Sum Test\", 183,           758,           681,          742,       695,\n  745,           218,          787,           393,       683,\n  454,           600,          732,          687,       665,\n  1404,           750,          747,           443,       576,\n  728,            288,          216,           700,       739,\n  274,            116,          758,           747,       396,\n  370,            100,          512,\n  1288,            863,         1241,          791,      1128,\n  734,          1345,          773,         1518,        659,\n  1575,          1537,          970,          652,       1415,\n  727,           801,          848,         1539,       1579,\n  767,          1480,         1363,         1130,       1138,\n  198,          1264,          865,          944,       1512,\n  805,          1217,         1596,\n  \"TransPropy\",    388,           969,           942,          954,       957,\n  918,           502,          437,           782,       780,\n  820,           930,          973,          776,       957,\n  676,           933,          912,           844,       905,\n  397,            646,          490,           409,      1000,\n  177,            242,          997,          981,       797,\n  370,            219,          863,\n  655,            548,          695,          529,       645,\n  502,           699,         1083,           822,       460,\n  851,            817,          602,          432,       737,\n  1092,           514,          539,           834,       850,\n  1083,            755,          715,         1127,        612,\n  143,           666,          545,          553,        817,\n  1030,            621,          877\n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n# Define the color palette\npal &lt;- rev(c('#f5b7bb', '#f5b090','#f5b86d', '#eec040','#ddb918', '#cab600','#a2ac07', '#5d9000','#007308', '#007201','#005c25', '#00453a'))\n# Generate 33 gradient colors from the first two colors\ngradient1 &lt;- rev(colorRampPalette(pal[1:6])(33))\n# Generate 33 gradient colors from the last two colors\ngradient2 &lt;- rev(colorRampPalette(pal[7:12])(33))\n# Combine the gradients\ncombined_gradient &lt;- c(gradient1, gradient2)\n# Print the combined gradient\nprint(combined_gradient)\ndf %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#e9dfd3\", width=0.65, linewidth=0.2, fill=NA, alpha=1) +\n  scale_fill_manual(values = combined_gradient) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:5, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\",\n        subtitle = \"Comparison of Five Feature Extraction Methods. \\nProportion Comparison of Negatively and Positively Correlated Feature Genes. \") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())+\n  guides(fill = guide_legend(ncol = 2))  # Set the number of legend columns to 2\n\n\nSeparate Percentage Stacked Line Bar Chart"
  },
  {
    "objectID": "Percentage Stacked Line Bar Chart.html#methods",
    "href": "Percentage Stacked Line Bar Chart.html#methods",
    "title": "10  Comparison of TransPropy with Other Tool Packages Using Percentage Stacked Line Bar Chart",
    "section": "10.5 Methods",
    "text": "10.5 Methods\n\n\nBased on the results of Chapter 9, further calculate the sum of genes with an absolute value of positive or negative correlation greater than 0.5 for each intersection gene in each method, and create an All Percentage Stacked Line Bar Chart.\nBased on the results of Chapter 9, further calculate the number of genes with an absolute value of positive or negative correlation greater than 0.5 for each intersection gene in each method, and create separate Percentage Stacked Line Bar Charts for each method."
  },
  {
    "objectID": "Percentage Stacked Line Bar Chart.html#discussion",
    "href": "Percentage Stacked Line Bar Chart.html#discussion",
    "title": "10  Comparison of TransPropy with Other Tool Packages Using Percentage Stacked Line Bar Chart",
    "section": "10.6 Discussion",
    "text": "10.6 Discussion\n\ndeseq2/edgeRTransPropylimma/outRst\n\n\nDownRatio &gt; UpRatio\n\n\nDownRatio = UpRatio = 0.5 （BEST）\n\n\nDownRatio &gt; UpRatio"
  },
  {
    "objectID": "Ridge Plot.html#finding-the-top-three-genes-with-the-highest-countdown-cfd-ankrd35-aloxe3",
    "href": "Ridge Plot.html#finding-the-top-three-genes-with-the-highest-countdown-cfd-ankrd35-aloxe3",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.1 Finding the top three genes with the highest countdown: CFD, ANKRD35, ALOXE3",
    "text": "11.1 Finding the top three genes with the highest countdown: CFD, ANKRD35, ALOXE3\n# Select all *countdown columns\ntest_formatted &lt;- df_formatted[ ,c(\"id\",\"deseq2countdown\",\"edgeRcountdown\",\"limmacountdown\",\"outRstcountdown\",\"TransPropycountdown\")]\n\n# Extract the rows where the values in the last column are greater than all previous columns\ntest_formatted1 &lt;- test_formatted[apply(test_formatted[, -1], 1, function(row) all(row[length(row)] &gt; row[1:(length(row)-1)])), ]\nprint(test_formatted1) # Show the total number of genes where the countdown is higher than that selected by the previous four methods\n\n# Set the value of N\nN &lt;- 100  # Replace with your desired value\n# Exclude the ID column from the comparison and find the rows where the value in the last column is greater than the maximum value of the previous columns by more than N\ntest_formatted2 &lt;- test_formatted1[apply(test_formatted1[, -1], 1, function(row) max(row[1:(length(row)-1)]) + N &lt; row[length(row)]), ]\n# Display the result\nprint(test_formatted2)\n\n# Sort by the difference between the last column and the maximum value of the previous columns, select the top N rows with the largest differences\nN1 &lt;- 3  # Replace with your desired value\n# Calculate the difference and add it as a new column\ntest_formatted$Difference &lt;- apply(test_formatted[, -1], 1, function(row) row[length(row)] - max(row[1:(length(row)-1)]))\n# Sort the data frame by the Difference column in descending order\nsorted_df &lt;- test_formatted[order(-test_formatted$Difference), ]\n# Select the top N rows\ntop_N1_rows &lt;- head(sorted_df, N1)\n\n# Display the result\nprint(top_N1_rows)"
  },
  {
    "objectID": "Ridge Plot.html#cfd",
    "href": "Ridge Plot.html#cfd",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.2 CFD",
    "text": "11.2 CFD\n\n11.2.1 TRANSPROPY\n#### TRANSPRO\n\n# Set up the container for the final generated data\ncorrelation &lt;- data.frame()\n\nTransPropy_CFD &lt;- as.data.frame(TransPropy[,\"CFD\"])\ncolnames(TransPropy_CFD) &lt;- c(\"CFD\")\n\n# Get the range for batch operations, which should be a vector\ngenelist &lt;- colnames(TransPropy)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"CFD\"\ngenedata &lt;- as.numeric(TransPropy[,gene])\n\nfor(i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Compute correlation\n  dd &lt;- cor.test(genedata, as.numeric(TransPropy[,i]), method=\"spearman\")\n  # 3. Fill in the data\n  correlation[i,1] &lt;- gene\n  correlation[i,2] &lt;- genelist[i]\n  correlation[i,3] &lt;- dd$estimate\n  correlation[i,4] &lt;- dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation &lt;- na.omit(correlation)\ncorrelation_TransPropy_CFD &lt;- correlation\n\n# write.table(correlation_TransPropy_CFD, file=\"correlation_TransPropy_CFD.csv\", sep=\",\", row.names=TRUE)\n\nN &lt;- 0.5 # Set the threshold to 0.5, for example\n# Calculate the number of rows where the absolute value of 'cor' is greater than N\nTransPropycount_CFD &lt;- sum(abs(correlation_TransPropy_CFD$cor) &gt; N)\n\n# Print results\nTransPropycountup_CFD &lt;- sum(correlation_TransPropy_CFD$cor &gt; N)\nTransPropycountdown_CFD &lt;- sum(correlation_TransPropy_CFD$cor &lt; -N)\nprint(paste(\"TransPropycount_CFD:\", TransPropycount_CFD, \n            \"TransPropycountup_CFD:\", TransPropycountup_CFD, \n            \"TransPropycountdown_CFD:\", TransPropycountdown_CFD))\n\n\n11.2.2 DESEQ2\n# Set up the container for the final generated data\ncorrelation &lt;- data.frame()\n\n# Get the range for batch operations, which should be a vector\ngenelist &lt;- colnames(deseq2)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"CFD\"\ngenedata &lt;- as.numeric(deseq2[,gene])\n\nfor(i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Compute correlation\n  dd &lt;- cor.test(genedata, as.numeric(deseq2[,i]), method=\"spearman\")\n  # 3. Fill in the data\n  correlation[i,1] &lt;- gene\n  correlation[i,2] &lt;- genelist[i]\n  correlation[i,3] &lt;- dd$estimate\n  correlation[i,4] &lt;- dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation &lt;- na.omit(correlation)\ncorrelation_deseq2_CFD &lt;- correlation\n\n# write.table(correlation_deseq2_CFD, file=\"correlation_deseq2_CFD.csv\", sep=\",\", row.names=TRUE)\n\nN &lt;- 0.5 # Set the threshold to 0.5, for example\n# Calculate the number of rows where the absolute value of 'cor' is greater than N\ndeseq2count_CFD &lt;- sum(abs(correlation_deseq2_CFD$cor) &gt; N)\n\n# Print results\ndeseq2countup_CFD &lt;- sum(correlation_deseq2_CFD$cor &gt; N)\ndeseq2countdown_CFD &lt;- sum(correlation_deseq2_CFD$cor &lt; -N)\nprint(paste(\"deseq2count_CFD:\", deseq2count_CFD, \n            \"deseq2countup_CFD:\", deseq2countup_CFD, \n            \"deseq2countdown_CFD:\", deseq2countdown_CFD))\n\n\n11.2.3 edgeR\n# Set up the container for the final generated data\ncorrelation &lt;- data.frame()\n\n# Get the range for batch operations, which should be a vector\ngenelist &lt;- colnames(edgeR)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"CFD\"\ngenedata &lt;- as.numeric(edgeR[,gene])\n\nfor(i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Compute correlation\n  dd &lt;- cor.test(genedata, as.numeric(edgeR[,i]), method=\"spearman\")\n  # 3. Fill in the data\n  correlation[i,1] &lt;- gene\n  correlation[i,2] &lt;- genelist[i]\n  correlation[i,3] &lt;- dd$estimate\n  correlation[i,4] &lt;- dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation &lt;- na.omit(correlation)\ncorrelation_edgeR_CFD &lt;- correlation\n\n# write.table(correlation_edgeR_CFD, file=\"correlation_edgeR_CFD.csv\", sep=\",\", row.names=TRUE)\n\nN &lt;- 0.5 # Set the threshold to 0.5, for example\n# Calculate the number of rows where the absolute value of 'cor' is greater than N\nedgeRcount_CFD &lt;- sum(abs(correlation_edgeR_CFD$cor) &gt; N)\n\n# Print results\nedgeRcountup_CFD &lt;- sum(correlation_edgeR_CFD$cor &gt; N)\nedgeRcountdown_CFD &lt;- sum(correlation_edgeR_CFD$cor &lt; -N)\nprint(paste(\"edgeRcount_CFD:\", edgeRcount_CFD, \n            \"edgeRcountup_CFD:\", edgeRcountup_CFD, \n            \"edgeRcountdown_CFD:\", edgeRcountdown_CFD))\n\n\n11.2.4 limma\n# Set up the container for the final generated data\ncorrelation &lt;- data.frame()\n\n# Get the range for batch operations, which should be a vector\ngenelist &lt;- colnames(limma)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"CFD\"\ngenedata &lt;- as.numeric(limma[,gene])\n\nfor(i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Compute correlation\n  dd &lt;- cor.test(genedata, as.numeric(limma[,i]), method=\"spearman\")\n  # 3. Fill in the data\n  correlation[i,1] &lt;- gene\n  correlation[i,2] &lt;- genelist[i]\n  correlation[i,3] &lt;- dd$estimate\n  correlation[i,4] &lt;- dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation &lt;- na.omit(correlation)\ncorrelation_limma_CFD &lt;- correlation\n\n# write.table(correlation_limma_CFD, file=\"correlation_limma_CFD.csv\", sep=\",\", row.names=TRUE)\n\nN &lt;- 0.5 # Set the threshold to 0.5, for example\n# Calculate the number of rows where the absolute value of 'cor' is greater than N\nlimmacount_CFD &lt;- sum(abs(correlation_limma_CFD$cor) &gt; N)\n\n# Print results\nlimmacountup_CFD &lt;- sum(correlation_limma_CFD$cor &gt; N)\nlimmacountdown_CFD &lt;- sum(correlation_limma_CFD$cor &lt; -N)\nprint(paste(\"limmacount_CFD:\", limmacount_CFD, \n            \"limmacountup_CFD:\", limmacountup_CFD, \n            \"limmacountdown_CFD:\", limmacountdown_CFD))\n\n\n11.2.5 outRst\n# Set up the container for the final generated data\ncorrelation &lt;- data.frame()\n\n# Get the range for batch operations, which should be a vector\ngenelist &lt;- colnames(outRst)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"CFD\"\ngenedata &lt;- as.numeric(outRst[,gene])\n\nfor(i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Compute correlation\n  dd &lt;- cor.test(genedata, as.numeric(outRst[,i]), method=\"spearman\")\n  # 3. Fill in the data\n  correlation[i,1] &lt;- gene\n  correlation[i,2] &lt;- genelist[i]\n  correlation[i,3] &lt;- dd$estimate\n  correlation[i,4] &lt;- dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation &lt;- na.omit(correlation)\ncorrelation_outRst_CFD &lt;- correlation\n\n# write.table(correlation_outRst_CFD, file=\"correlation_outRst_CFD.csv\", sep=\",\", row.names=TRUE)\n\nN &lt;- 0.5 # Set the threshold to 0.5, for example\n# Calculate the number of rows where the absolute value of 'cor' is greater than N\noutRstcount_CFD &lt;- sum(abs(correlation_outRst_CFD$cor) &gt; N)\n\n# Print results\noutRstcountup_CFD &lt;- sum(correlation_outRst_CFD$cor &gt; N)\noutRstcountdown_CFD &lt;- sum(correlation_outRst_CFD$cor &lt; -N)\nprint(paste(\"outRstcount_CFD:\", outRstcount_CFD, \n            \"outRstcountup_CFD:\", outRstcountup_CFD, \n            \"outRstcountdown_CFD:\", outRstcountdown_CFD))"
  },
  {
    "objectID": "Ridge Plot.html#ankrd35",
    "href": "Ridge Plot.html#ankrd35",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.3 ANKRD35",
    "text": "11.3 ANKRD35\n\n11.3.1 TRANSPROPY\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(TransPropy)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"ANKRD35\"\ngenedata &lt;- as.numeric(TransPropy[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(TransPropy[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_TransPropy_ANKRD35 &lt;- correlation\n\n# write.table(correlation_TransPropy_ANKRD35, file=\"correlation_TransPropy_ANKRD35.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\nTransPropycount_ANKRD35 &lt;- sum(abs(correlation_TransPropy_ANKRD35$cor) &gt; N)\n\nTransPropycountup_ANKRD35 &lt;- sum(correlation_TransPropy_ANKRD35$cor &gt; N)\nTransPropycountdown_ANKRD35 &lt;- sum(correlation_TransPropy_ANKRD35$cor &lt; -N)\nprint(paste(\"TransPropycount_ANKRD35:\", TransPropycount_ANKRD35, \n            \"TransPropycountup_ANKRD35:\", TransPropycountup_ANKRD35, \n            \"TransPropycountdown_ANKRD35:\", TransPropycountdown_ANKRD35))\n\n\n11.3.2 DESEQ2\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(deseq2)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"ANKRD35\"\ngenedata &lt;- as.numeric(deseq2[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(deseq2[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_deseq2_ANKRD35 &lt;- correlation\n\n# write.table(correlation_deseq2_ANKRD35, file=\"correlation_deseq2_ANKRD35.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\ndeseq2count_ANKRD35 &lt;- sum(abs(correlation_deseq2_ANKRD35$cor) &gt; N)\n\ndeseq2countup_ANKRD35 &lt;- sum(correlation_deseq2_ANKRD35$cor &gt; N)\ndeseq2countdown_ANKRD35 &lt;- sum(correlation_deseq2_ANKRD35$cor &lt; -N)\nprint(paste(\"deseq2count_ANKRD35:\", deseq2count_ANKRD35, \n            \"deseq2countup_ANKRD35:\", deseq2countup_ANKRD35, \n            \"deseq2countdown_ANKRD35:\", deseq2countdown_ANKRD35))\n\n\n11.3.3 edgeR\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(edgeR)\n\n# Start the for loop, exporting data to the container\ngene &lt;- \"ANKRD35\"\ngenedata &lt;- as.numeric(edgeR[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(edgeR[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_edgeR_ANKRD35 &lt;- correlation\n\n# write.table(correlation_edgeR_ANKRD35, file=\"correlation_edgeR_ANKRD35.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\nedgeRcount_ANKRD35 &lt;- sum(abs(correlation_edgeR_ANKRD35$cor) &gt; N)\n\nedgeRcountup_ANKRD35 &lt;- sum(correlation_edgeR_ANKRD35$cor &gt; N)\nedgeRcountdown_ANKRD35 &lt;- sum(correlation_edgeR_ANKRD35$cor &lt; -N)\nprint(paste(\"edgeRcount_ANKRD35:\", edgeRcount_ANKRD35, \n            \"edgeRcountup_ANKRD35:\", edgeRcountup_ANKRD35, \n            \"edgeRcountdown_ANKRD35:\", edgeRcountdown_ANKRD35))\n\n\n11.3.4 limma\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(limma)\n# Start the for loop, exporting data to the container\ngene &lt;- \"ANKRD35\"\ngenedata &lt;- as.numeric(limma[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(limma[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_limma_ANKRD35 &lt;- correlation\n\n# write.table(correlation_limma_ANKRD35, file=\"correlation_limma_ANKRD35.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\nlimmacount_ANKRD35 &lt;- sum(abs(correlation_limma_ANKRD35$cor) &gt; N)\n\nlimmacountup_ANKRD35 &lt;- sum(correlation_limma_ANKRD35$cor &gt; N)\nlimmacountdown_ANKRD35 &lt;- sum(correlation_limma_ANKRD35$cor &lt; -N)\nprint(paste(\"limmacount_ANKRD35:\", limmacount_ANKRD35, \n            \"limmacountup_ANKRD35:\", limmacountup_ANKRD35, \n            \"limmacountdown_ANKRD35:\", limmacountdown_ANKRD35))\n\n\n11.3.5 outRst\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(outRst)\n# Start the for loop, exporting data to the container\ngene &lt;- \"ANKRD35\"\ngenedata &lt;- as.numeric(outRst[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(outRst[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_outRst_ANKRD35 &lt;- correlation\n\n# write.table(correlation_outRst_ANKRD35, file=\"correlation_outRst_ANKRD35.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\noutRstcount_ANKRD35 &lt;- sum(abs(correlation_outRst_ANKRD35$cor) &gt; N)\n\noutRstcountup_ANKRD35 &lt;- sum(correlation_outRst_ANKRD35$cor &gt; N)\noutRstcountdown_ANKRD35 &lt;- sum(correlation_outRst_ANKRD35$cor &lt; -N)\nprint(paste(\"outRstcount_ANKRD35:\", outRstcount_ANKRD35, \n            \"outRstcountup_ANKRD35:\", outRstcountup_ANKRD35, \n            \"outRstcountdown_ANKRD35:\", outRstcountdown_ANKRD35))"
  },
  {
    "objectID": "Ridge Plot.html#aloxe3",
    "href": "Ridge Plot.html#aloxe3",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.4 ALOXE3",
    "text": "11.4 ALOXE3\n\n11.4.1 TRANSPROPY\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(TransPropy)\n# Start the for loop, exporting data to the container\ngene &lt;- \"ALOXE3\"\ngenedata &lt;- as.numeric(TransPropy[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(TransPropy[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_TransPropy_ALOXE3 &lt;- correlation\n\n# write.table(correlation_TransPropy_ALOXE3, file=\"correlation_TransPropy_ALOXE3.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\nTransPropycount_ALOXE3 &lt;- sum(abs(correlation_TransPropy_ALOXE3$cor) &gt; N)\n\nTransPropycountup_ALOXE3 &lt;- sum(correlation_TransPropy_ALOXE3$cor &gt; N)\nTransPropycountdown_ALOXE3 &lt;- sum(correlation_TransPropy_ALOXE3$cor &lt; -N)\nprint(paste(\"TransPropycount_ALOXE3:\", TransPropycount_ALOXE3, \n            \"TransPropycountup_ALOXE3:\", TransPropycountup_ALOXE3, \n            \"TransPropycountdown_ALOXE3:\", TransPropycountdown_ALOXE3))\n\n\n11.4.2 DESEQ2\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(deseq2)\n# Start the for loop, exporting data to the container\ngene &lt;- \"ALOXE3\"\ngenedata &lt;- as.numeric(deseq2[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(deseq2[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_deseq2_ALOXE3 &lt;- correlation\n\n# write.table(correlation_deseq2_ALOXE3, file=\"correlation_deseq2_ALOXE3.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\ndeseq2count_ALOXE3 &lt;- sum(abs(correlation_deseq2_ALOXE3$cor) &gt; N)\n\ndeseq2countup_ALOXE3 &lt;- sum(correlation_deseq2_ALOXE3$cor &gt; N)\ndeseq2countdown_ALOXE3 &lt;- sum(correlation_deseq2_ALOXE3$cor &lt; -N)\nprint(paste(\"deseq2count_ALOXE3:\", deseq2count_ALOXE3, \n            \"deseq2countup_ALOXE3:\", deseq2countup_ALOXE3, \n            \"deseq2countdown_ALOXE3:\", deseq2countdown_ALOXE3))\n\n\n11.4.3 edgeR\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(edgeR)\n# Start the for loop, exporting data to the container\ngene &lt;- \"ALOXE3\"\ngenedata &lt;- as.numeric(edgeR[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(edgeR[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_edgeR_ALOXE3 &lt;- correlation\n\n# write.table(correlation_edgeR_ALOXE3, file=\"correlation_edgeR_ALOXE3.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\nedgeRcount_ALOXE3 &lt;- sum(abs(correlation_edgeR_ALOXE3$cor) &gt; N)\n\nedgeRcountup_ALOXE3 &lt;- sum(correlation_edgeR_ALOXE3$cor &gt; N)\nedgeRcountdown_ALOXE3 &lt;- sum(correlation_edgeR_ALOXE3$cor &lt; -N)\nprint(paste(\"edgeRcount_ALOXE3:\", edgeRcount_ALOXE3, \n            \"edgeRcountup_ALOXE3:\", edgeRcountup_ALOXE3, \n            \"edgeRcountdown_ALOXE3:\", edgeRcountdown_ALOXE3))\n\n\n11.4.4 limma\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(limma)\n# Start the for loop, exporting data to the container\ngene &lt;- \"ALOXE3\"\ngenedata &lt;- as.numeric(limma[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(limma[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_limma_ALOXE3 &lt;- correlation\n\n# write.table(correlation_limma_ALOXE3, file=\"correlation_limma_ALOXE3.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\nlimmacount_ALOXE3 &lt;- sum(abs(correlation_limma_ALOXE3$cor) &gt; N)\n\nlimmacountup_ALOXE3 &lt;- sum(correlation_limma_ALOXE3$cor &gt; N)\nlimmacountdown_ALOXE3 &lt;- sum(correlation_limma_ALOXE3$cor &lt; -N)\nprint(paste(\"limmacount_ALOXE3:\", limmacount_ALOXE3, \n            \"limmacountup_ALOXE3:\", limmacountup_ALOXE3, \n            \"limmacountdown_ALOXE3:\", limmacountdown_ALOXE3))\n\n\n11.4.5 outRst\n# Set the container to store the final generated data\ncorrelation &lt;- data.frame()\n# Get the range for batch processing, which should be a vector\ngenelist &lt;- colnames(outRst)\n# Start the for loop, exporting data to the container\ngene &lt;- \"ALOXE3\"\ngenedata &lt;- as.numeric(outRst[, gene])\n\nfor (i in 1:length(genelist)) {\n  # 1. Indicate progress\n  print(i)\n  # 2. Calculate correlation\n  dd = cor.test(genedata, as.numeric(outRst[, i]), method=\"spearman\")\n  # 3. Fill the container\n  correlation[i, 1] = gene\n  correlation[i, 2] = genelist[i]\n  correlation[i, 3] = dd$estimate\n  correlation[i, 4] = dd$p.value\n}\n\ncolnames(correlation) &lt;- c(\"gene1\", \"gene2\", \"cor\", \"p.value\")\nclass(correlation)\n\ncorrelation = na.omit(correlation)\ncorrelation_outRst_ALOXE3 &lt;- correlation\n\n# write.table(correlation_outRst_ALOXE3, file=\"correlation_outRst_ALOXE3.csv\", sep=\",\", row.names=T)\n\nN &lt;- 0.5  # Set threshold to 0.5\noutRstcount_ALOXE3 &lt;- sum(abs(correlation_outRst_ALOXE3$cor) &gt; N)\n\noutRstcountup_ALOXE3 &lt;- sum(correlation_outRst_ALOXE3$cor &gt; N)\noutRstcountdown_ALOXE3 &lt;- sum(correlation_outRst_ALOXE3$cor &lt; -N)\nprint(paste(\"outRstcount_ALOXE3:\", outRstcount_ALOXE3, \n            \"outRstcountup_ALOXE3:\", outRstcountup_ALOXE3, \n            \"outRstcountdown_ALOXE3:\", outRstcountdown_ALOXE3))"
  },
  {
    "objectID": "Ridge Plot.html#creating-a-new-column-to-mark-the-positive-and-negative-correlations",
    "href": "Ridge Plot.html#creating-a-new-column-to-mark-the-positive-and-negative-correlations",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.5 Creating a new column to mark the positive and negative correlations",
    "text": "11.5 Creating a new column to mark the positive and negative correlations\n# correlation_TransPropy_CFD\ncorrelation_TransPropy_CFD$cor_type &lt;- ifelse(correlation_TransPropy_CFD$cor &gt; 0, \n                                              \"TransPropy_Positive\", \"TransPropy_Negative\")\ncorrelation_TransPropy_CFD$methods &lt;- \"TransPropy\"\n\n# correlation_deseq2_CFD\ncorrelation_deseq2_CFD$cor_type &lt;- ifelse(correlation_deseq2_CFD$cor &gt; 0, \n                                              \"deseq2_Positive\", \"deseq2_Negative\")\ncorrelation_deseq2_CFD$methods &lt;- \"deseq2\"\n\n# correlation_edgeR_CFD\ncorrelation_edgeR_CFD$cor_type &lt;- ifelse(correlation_edgeR_CFD$cor &gt; 0, \n                                              \"edgeR_Positive\", \"edgeR_Negative\")\ncorrelation_edgeR_CFD$methods &lt;- \"edgeR\"\n\n# correlation_limma_CFD\ncorrelation_limma_CFD$cor_type &lt;- ifelse(correlation_limma_CFD$cor &gt; 0, \n                                              \"limma_Positive\", \"limma_Negative\")\ncorrelation_limma_CFD$methods &lt;- \"limma\"\n\n# correlation_outRst_CFD\ncorrelation_outRst_CFD$cor_type &lt;- ifelse(correlation_outRst_CFD$cor &gt; 0, \n                                              \"outRst_Positive\", \"outRst_Negative\")\ncorrelation_outRst_CFD$methods &lt;- \"outRst\"\n\ncombined_CFD &lt;- rbind(correlation_TransPropy_CFD,\n                      correlation_deseq2_CFD,\n                      correlation_edgeR_CFD,\n                      correlation_limma_CFD,\n                      correlation_outRst_CFD)\n\n# correlation_TransPropy_ANKRD35\ncorrelation_TransPropy_ANKRD35$cor_type &lt;- ifelse(correlation_TransPropy_ANKRD35$cor &gt; 0, \n                                              \"TransPropy_Positive\", \"TransPropy_Negative\")\ncorrelation_TransPropy_ANKRD35$methods &lt;- \"TransPropy\"\n\n# correlation_deseq2_ANKRD35\ncorrelation_deseq2_ANKRD35$cor_type &lt;- ifelse(correlation_deseq2_ANKRD35$cor &gt; 0, \n                                              \"deseq2_Positive\", \"deseq2_Negative\")\ncorrelation_deseq2_ANKRD35$methods &lt;- \"deseq2\"\n\n# correlation_edgeR_ANKRD35\ncorrelation_edgeR_ANKRD35$cor_type &lt;- ifelse(correlation_edgeR_ANKRD35$cor &gt; 0, \n                                              \"edgeR_Positive\", \"edgeR_Negative\")\ncorrelation_edgeR_ANKRD35$methods &lt;- \"edgeR\"\n\n# correlation_limma_ANKRD35\ncorrelation_limma_ANKRD35$cor_type &lt;- ifelse(correlation_limma_ANKRD35$cor &gt; 0, \n                                              \"limma_Positive\", \"limma_Negative\")\ncorrelation_limma_ANKRD35$methods &lt;- \"limma\"\n\n# correlation_outRst_ANKRD35\ncorrelation_outRst_ANKRD35$cor_type &lt;- ifelse(correlation_outRst_ANKRD35$cor &gt; 0, \n                                              \"outRst_Positive\", \"outRst_Negative\")\ncorrelation_outRst_ANKRD35$methods &lt;- \"outRst\"\n\ncombined_ANKRD35 &lt;- rbind(correlation_TransPropy_ANKRD35,\n                      correlation_deseq2_ANKRD35,\n                      correlation_edgeR_ANKRD35,\n                      correlation_limma_ANKRD35,\n                      correlation_outRst_ANKRD35)\n\n# correlation_TransPropy_ALOXE3\ncorrelation_TransPropy_ALOXE3$cor_type &lt;- ifelse(correlation_TransPropy_ALOXE3$cor &gt; 0, \n                                              \"TransPropy_Positive\", \"TransPropy_Negative\")\ncorrelation_TransPropy_ALOXE3$methods &lt;- \"TransPropy\"\n\n# correlation_deseq2_ALOXE3\ncorrelation_deseq2_ALOXE3$cor_type &lt;- ifelse(correlation_deseq2_ALOXE3$cor &gt; 0, \n                                              \"deseq2_Positive\", \"deseq2_Negative\")\ncorrelation_deseq2_ALOXE3$methods &lt;- \"deseq2\"\n\n# correlation_edgeR_ALOXE3\ncorrelation_edgeR_ALOXE3$cor_type &lt;- ifelse(correlation_edgeR_ALOXE3$cor &gt; 0, \n                                              \"edgeR_Positive\", \"edgeR_Negative\")\ncorrelation_edgeR_ALOXE3$methods &lt;- \"edgeR\"\n\n# correlation_limma_ALOXE3\ncorrelation_limma_ALOXE3$cor_type &lt;- ifelse(correlation_limma_ALOXE3$cor &gt; 0, \n                                              \"limma_Positive\", \"limma_Negative\")\ncorrelation_limma_ALOXE3$methods &lt;- \"limma\"\n\n# correlation_outRst_ALOXE3\ncorrelation_outRst_ALOXE3$cor_type &lt;- ifelse(correlation_outRst_ALOXE3$cor &gt; 0, \n                                              \"outRst_Positive\", \"outRst_Negative\")\ncorrelation_outRst_ALOXE3$methods &lt;- \"outRst\"\n\ncombined_ALOXE3 &lt;- rbind(correlation_TransPropy_ALOXE3,\n                          correlation_deseq2_ALOXE3,\n                          correlation_edgeR_ALOXE3,\n                          correlation_limma_ALOXE3,\n                          correlation_outRst_ALOXE3)"
  },
  {
    "objectID": "Ridge Plot.html#cfd-ridge-plot",
    "href": "Ridge Plot.html#cfd-ridge-plot",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.6 CFD Ridge Plot",
    "text": "11.6 CFD Ridge Plot\n# Define colors for CFD Gene\ncolors &lt;- rev(c(\"#ee3e42\", \"#25789a\", \"#e96e29\", \"#547089\", \"#ee8f1d\", \"#488a87\", \"#ee7f46\", \"#41a286\", \"#efbe4d\", \"#8ab569\"))\n\n# Plot Ridge Plot for CFD Gene\nggplot(combined_CFD, aes(x = cor, y = methods, fill = cor_type)) +\n  geom_density_ridges(\n    alpha = 0.7,\n    color = 'white',\n    scale = 1,  # Adjust overlap degree, scale = 1 just touches the baseline, larger values increase overlap\n    rel_min_height = 0.01,  # Tail trimming, larger values trim more\n    quantile_lines = TRUE,\n    quantiles = 2,\n    linewidth = 1\n  ) +\n  scale_fill_manual(values = colors) +\n  labs(\n    title = \"Ridge Plot for Positive and Negative Correlations of CFD Gene\",\n    x = \"Correlation\",\n    y = \"CFD\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  ) +\n  geom_vline(\n    xintercept = c(-0.5, 0.5),\n    linewidth = 1,\n    color = 'grey50',\n    lty = 'dashed',\n    alpha = 0.3\n  ) +\n  geom_vline(\n    xintercept = c(-1, 0, 1),\n    linewidth = 0.4,\n    color = 'grey',\n    lty = 'dashed',\n    alpha = 0.8\n  ) +\n  theme_classic() +\n  scale_y_discrete(expand = c(0,0)) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    # axis.text.y = element_blank(),\n    legend.title = element_blank()\n  )\n\n\n\nFig1"
  },
  {
    "objectID": "Ridge Plot.html#ankrd35-ridge-plot",
    "href": "Ridge Plot.html#ankrd35-ridge-plot",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.7 ANKRD35 Ridge Plot",
    "text": "11.7 ANKRD35 Ridge Plot\n# Define colors for ANKRD35 Gene\ncolors &lt;- c(\"#7b1fa2\", \"#afb42b\", \"#512da8\", \"#fbc02d\", \"#303f9f\", \"#ffa000\", \"#1565c0\", \"#f57c00\", \"#0288d1\", \"#e64a19\")\n\n# Plot Ridge Plot for ANKRD35 Gene\nggplot(combined_ANKRD35, aes(x = cor, y = methods, fill = cor_type)) +\n  geom_density_ridges(\n    alpha = 0.7,\n    color = 'white',\n    scale = 1,  # Adjust overlap degree, scale = 1 just touches the baseline, larger values increase overlap\n    rel_min_height = 0.01,  # Tail trimming, larger values trim more\n    quantile_lines = TRUE,\n    quantiles = 2,\n    linewidth = 1\n  ) +\n  scale_fill_manual(values = colors) +\n  labs(\n    title = \"Ridge Plot for Positive and Negative Correlations of ANKRD35 Gene\",\n    x = \"Correlation\",\n    y = \"ANKRD35\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  ) +\n  geom_vline(\n    xintercept = c(-0.5, 0.5),\n    linewidth = 1,\n    color = 'grey50',\n    lty = 'dashed',\n    alpha = 0.3\n  ) +\n  geom_vline(\n    xintercept = c(-1, 0, 1),\n    linewidth = 0.4,\n    color = 'grey',\n    lty = 'dashed',\n    alpha = 0.8\n  ) +\n  theme_classic() +\n  scale_y_discrete(expand = c(0,0)) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    # axis.text.y = element_blank(),\n    legend.title = element_blank()\n  )\n\n\n\nFig1"
  },
  {
    "objectID": "Ridge Plot.html#aloxe3-ridge-plot",
    "href": "Ridge Plot.html#aloxe3-ridge-plot",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.8 ALOXE3 Ridge Plot",
    "text": "11.8 ALOXE3 Ridge Plot\n# Define colors for ALOXE3 Gene\ncolors &lt;- c(\"#00838f\", \"#c62828\", \"#00695c\", \"#ad1457\", \"#2e7d32\", \"#6a1b9a\", \"#558b2f\", \"#4527a0\", \"#9e9d24\", \"#283593\")\n\n# Plot Ridge Plot for ALOXE3 Gene\nggplot(combined_ALOXE3, aes(x = cor, y = methods, fill = cor_type)) +\n  geom_density_ridges(\n    alpha = 0.6,\n    color = 'white',\n    scale = 1,  # Adjust overlap degree, scale = 1 just touches the baseline, larger values increase overlap\n    rel_min_height = 0.01,  # Tail trimming, larger values trim more\n    quantile_lines = TRUE,\n    quantiles = 2,\n    linewidth = 1\n  ) +\n  scale_fill_manual(values = colors) +\n  labs(\n    title = \"Ridge Plot for Positive and Negative Correlations of ALOXE3 Gene\",\n    x = \"Correlation\",\n    y = \"ALOXE3\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 90, hjust = 1)\n  ) +\n  geom_vline(\n    xintercept = c(-0.5, 0.5),\n    linewidth = 1,\n    color = 'grey50',\n    lty = 'dashed',\n    alpha = 0.3\n  ) +\n  geom_vline(\n    xintercept = c(-1, 0, 1),\n    linewidth = 0.4,\n    color = 'grey',\n    lty = 'dashed',\n    alpha = 0.8\n  ) +\n  theme_classic() +\n  scale_y_discrete(expand = c(0,0)) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    # axis.text.y = element_blank(),\n    legend.title = element_blank()\n  )\n\n\nFig1"
  },
  {
    "objectID": "Ridge Plot.html#methods",
    "href": "Ridge Plot.html#methods",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.9 Methods",
    "text": "11.9 Methods\n\n\nFinding the top three genes with the highest countdown: CFD, ANKRD35, ALOXE3\nSince the TransPropy method has the most balanced proportion of positively and negatively correlated genes, while other methods have a higher UpRatio than DownRatio, we chose the top three genes with the highest DownRatio in the TransPropy method. This approach will further amplify the difference compared to the other four methods. If the distribution trend remains consistent with the other methods while maintaining its advantage of balanced positive and negative correlations, it suggests that this method has greater potential for practical application."
  },
  {
    "objectID": "Ridge Plot.html#discussion",
    "href": "Ridge Plot.html#discussion",
    "title": "11  Comparison of TransPropy with Other Tool Packages Using Ridge Plot",
    "section": "11.10 Discussion",
    "text": "11.10 Discussion\n\ndeseq2/edgeRTransPropylimma/outRst\n\n\nThe data exhibit a bimodal distribution with few low-correlation genes, showing a steep increase on both sides. However, the proportion of Positive genes remains higher than that of Negative genes.\n\n\nConsistent with the trends observed in DESeq2, edgeR, limma, and outRst methods, the data from the TransPropy method also exhibit a bimodal distribution with few low-correlation genes and a steep increase on both sides. However, compared to these four methods, the TransPropy method shows a more balanced proportion of Positive and Negative genes, with the median distribution being most symmetrically centered around 0 (BEST).\n\n\nSimilar to DESeq2 and edgeR, the data exhibit a bimodal distribution with few low-correlation genes, showing a steep increase on both sides. However, the proportion of Positive genes remains higher than that of Negative genes."
  },
  {
    "objectID": "CFD FullGSEA.html#cfd",
    "href": "CFD FullGSEA.html#cfd",
    "title": "12  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: CFD)",
    "section": "12.1 CFD",
    "text": "12.1 CFD\n\n12.1.1 correlation_TransPropy_CFD\n\n12.1.1.1 HALLMARKS\n# Create a named vector from the correlation data\ngeneList &lt;- correlation_TransPropy_CFD$cor\nnames(geneList) = correlation_TransPropy_CFD$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read the hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\n\n# Perform Gene Set Enrichment Analysis (GSEA)\nTransPropy_CFD_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n\n# Sort the results by NES (Normalized Enrichment Score)\nTransPropysorted_df &lt;- TransPropy_CFD_hallmarks_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\nTransPropysorted_df$core_gene_count &lt;- sapply(strsplit(as.character(TransPropysorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\nTransPropysorted_df$ID &lt;- sapply(TransPropysorted_df$ID, process_string)\nTransPropysorted_df$Description &lt;- sapply(TransPropysorted_df$Description, process_string)\n\n# Process the row names\nrownames(TransPropysorted_df) &lt;- sapply(rownames(TransPropysorted_df), process_string)\n\n# Display the results\nprint(TransPropysorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\nTransPropy_CFD_hallmarks_y@result &lt;- TransPropysorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(TransPropy_CFD_hallmarks_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(TransPropy_CFD_hallmarks_y@geneSets) &lt;- new_gene_set_names\n# Display the modified geneSet names\nprint(names(TransPropy_CFD_hallmarks_y@geneSets))\n\n\nprint(TransPropy_CFD_hallmarks_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#6a1b9a\", \"#00838f\"))(9)\n\n# Plot all gene sets in one image\nnew_gseaNb(object = TransPropy_CFD_hallmarks_y,\n            geneSetID = c(\"Xenobiotic Metabolism\",\n                          \"Kras Signaling Dn\",\n                          \"Myogenesis\",\n                          \"Allograft Rejection\",  \n                          \"Glycolysis\",\n                          \"Spermatogenesis\",\n                          \"Mitotic Spindle\",\n                          \"E2f Targets\",          \n                          \"G2m Checkpoint\"\n            ),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size in the first plot\n            lineAlpha = 0.6,           # Control the line transparency in the first plot\n            segmentSize = 3,           # Control the vertical line size in the second plot\n            segmentAlpha = 0.6,        # Control the vertical line transparency in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            legend.position = \"none\",\n            htCol = rev(c(\"#6a1b9a\", \"#00838f\")), \n            rankCol = rev(c(\"#6a1b9a\", \"white\", \"#00838f\"))\n)\n\n\nTransPropy_CFD_hallmarks_GSEA_legend\n\n\n\n12.1.1.2 KEGG\n# KEGG\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nTransPropy_CFD_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES (Normalized Enrichment Score)\nTransPropysorted_df &lt;- TransPropy_CFD_kegg_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\nTransPropysorted_df$core_gene_count &lt;- sapply(strsplit(as.character(TransPropysorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\nTransPropysorted_df$ID &lt;- sapply(TransPropysorted_df$ID, process_string)\nTransPropysorted_df$Description &lt;- sapply(TransPropysorted_df$Description, process_string)\n\n# Process the row names\nrownames(TransPropysorted_df) &lt;- sapply(rownames(TransPropysorted_df), process_string)\n\n# Display the results\nprint(TransPropysorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\nTransPropy_CFD_kegg_y@result &lt;- TransPropysorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(TransPropy_CFD_kegg_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(TransPropy_CFD_kegg_y@geneSets) &lt;- new_gene_set_names\n\n# Display the modified geneSet names\nprint(names(TransPropy_CFD_kegg_y@geneSets))\n\n# Save the processed results to a CSV file\n# write.table(TransPropy_CFD_kegg_y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=TRUE)\n\nprint(TransPropy_CFD_kegg_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#6a1b9a\", \"#00838f\"))(14)\n\n# Plot all gene sets in one image\nnew_gseaNb(object = TransPropy_CFD_kegg_y,\n            geneSetID = c(\"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",             \n                          \"Retinol Metabolism\",\n                          \"Arachidonic Acid Metabolism\",                 \n                          \"Calcium Signaling Pathway\",\n                          \"Ppar Signaling Pathway\",                      \n                          \"Vascular Smooth Muscle Contraction\",\n                          \"Glycolysis Gluconeogenesis\",                  \n                          \"Endocytosis\",\n                          \"Type I Diabetes Mellitus\",                    \n                          \"Hematopoietic Cell Lineage\",\n                          \"Graft Versus Host Disease\",                   \n                          \"Leishmania Infection\",\n                          \"Cell Cycle\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size in the first plot\n            lineAlpha = 0.6,           # Control the line transparency in the first plot\n            segmentSize = 3,           # Control the vertical line size in the second plot\n            segmentAlpha = 0.6,        # Control the vertical line transparency in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            # legend.position = \"none\",\n            htCol = rev(c(\"#6a1b9a\", \"#00838f\")), \n            rankCol = rev(c(\"#6a1b9a\", \"white\", \"#00838f\"))\n)\n\n\nTransPropy_CFD_kegg_GSEA_legend\n\n\n\n\n12.1.2 correlation_deseq2_CFD\n\n12.1.2.1 HALLMARKS\n# Create a named vector from the correlation data\ngeneList &lt;- correlation_deseq2_CFD$cor\nnames(geneList) = correlation_deseq2_CFD$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read the hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\n\n# Perform Gene Set Enrichment Analysis (GSEA)\ndeseq2_CFD_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n\n# Sort the results by NES (Normalized Enrichment Score)\ndeseq2sorted_df &lt;- deseq2_CFD_hallmarks_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\ndeseq2sorted_df$core_gene_count &lt;- sapply(strsplit(as.character(deseq2sorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\ndeseq2sorted_df$ID &lt;- sapply(deseq2sorted_df$ID, process_string)\ndeseq2sorted_df$Description &lt;- sapply(deseq2sorted_df$Description, process_string)\n\n# Process the row names\nrownames(deseq2sorted_df) &lt;- sapply(rownames(deseq2sorted_df), process_string)\n\n# Display the results\nprint(deseq2sorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\ndeseq2_CFD_hallmarks_y@result &lt;- deseq2sorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(deseq2_CFD_hallmarks_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(deseq2_CFD_hallmarks_y@geneSets) &lt;- new_gene_set_names\n\n# Display the modified geneSet names\nprint(names(deseq2_CFD_hallmarks_y@geneSets))\n\n# Save the processed results to a CSV file\n# write.table(deseq2sorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=FALSE)\n\nprint(deseq2_CFD_hallmarks_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#4527a0\", \"#00695c\"))(7)\n\n# Plot all gene sets in one image\nnew_gseaNb(object = deseq2_CFD_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"P53 Pathway\",\n                          \"Estrogen Response Early\",\n                          \"Kras Signaling Dn\", \n                          \"Apical Junction\", \n                          \"Myogenesis\",             \n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size in the first plot\n            lineAlpha = 0.6,           # Control the line transparency in the first plot\n            segmentSize = 3,           # Control the vertical line size in the second plot\n            segmentAlpha = 0.6,        # Control the vertical line transparency in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            # legend.position = \"none\",\n            htCol = rev(c(\"#4527a0\", \"#00695c\")), \n            rankCol = rev(c(\"#4527a0\", \"white\", \"#00695c\"))\n)\n\n\ndeseq2_CFD_hallmarks_GSEA_legend\n\n\n\n12.1.2.2 kegg\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\ndeseq2_CFD_kegg_y &lt;- GSEA(geneList,TERM2GENE =kegg)\n\n# Sort by NES\ndeseq2sorted_df &lt;- deseq2_CFD_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enrichment genes per row\ndeseq2sorted_df$core_gene_count &lt;- sapply(strsplit(as.character(deseq2sorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscores\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make the rest lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\ndeseq2sorted_df$ID &lt;- sapply(deseq2sorted_df$ID, process_string)\ndeseq2sorted_df$Description &lt;- sapply(deseq2sorted_df$Description, process_string)\n# Process row names\nrownames(deseq2sorted_df) &lt;- sapply(rownames(deseq2sorted_df), process_string)\n# Display the result\nprint(deseq2sorted_df)\n\n# Transfer the processed data back to y@result for the GSEA collective pathway plot\ndeseq2_CFD_kegg_y@result &lt;- deseq2sorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSets names\ngene_set_names &lt;- names(deseq2_CFD_kegg_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSets names\nnames(deseq2_CFD_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the modified geneSets names\nprint(names(deseq2_CFD_kegg_y@geneSets))\n\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\",sep=\",\",row.names=T)\n\n\nprint(deseq2_CFD_kegg_y@result$ID)\ncolor = colorRampPalette(c(\"#4527a0\",\"#00695c\"))(7)\n\n# All plot one image\nnew_gseaNb(object = deseq2_CFD_kegg_y,\n            geneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Mapk Signaling Pathway\",                      \n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Linoleic Acid Metabolism\",                    \n                          \"Gnrh Signaling Pathway\"\n                          ), \n            curveCol = color,\n            lineSize = 2.5,            # Control the size of the lines in the first plot\n            lineAlpha = 0.6,         # Control the transparency of the lines in the first plot\n            segmentSize = 3,       # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,      # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical proportions of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#4527a0\",\"#00695c\")), \n            rankCol = rev(c(\"#4527a0\",\"white\",\"#00695c\"))\n)\n\n\ndeseq2_CFD_kegg_GSEA_legend\n\n\n\n\n12.1.3 correlation_edgeR_CFD\n\n12.1.3.1 HALLMARKS\n# Translate the gene list from the correlation_edgeR_CFD data\ngeneList &lt;- correlation_edgeR_CFD$cor\nnames(geneList) = correlation_edgeR_CFD$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\nedgeR_CFD_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by Normalized Enrichment Score (NES)\nedgeRsorted_df &lt;- edgeR_CFD_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count core enrichment genes per pathway\nedgeRsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(edgeRsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to modify string (change pathway name prefix and casing)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string on underscores\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, rest lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Concatenate the words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nedgeRsorted_df$ID &lt;- sapply(edgeRsorted_df$ID, process_string)\nedgeRsorted_df$Description &lt;- sapply(edgeRsorted_df$Description, process_string)\n# Modify row names\nrownames(edgeRsorted_df) &lt;- sapply(rownames(edgeRsorted_df), process_string)\n# Display the modified dataframe\nprint(edgeRsorted_df)\n\n# Update processed data back to y@result for a collective GSEA pathway diagram\nedgeR_CFD_hallmarks_y@result &lt;- edgeRsorted_df\n\n# Process y@geneSets for collective pathway diagrams\n# Get current geneSets names\ngene_set_names &lt;- names(edgeR_CFD_hallmarks_y@geneSets)\n# Apply process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update geneSets names\nnames(edgeR_CFD_hallmarks_y@geneSets) &lt;- new_gene_based_names\n# Display updated geneSets names\nprint(names(edgeR_CFD_hallmarks_y@geneSets))\n\nprint(edgeR_CFD_hallmarks_y@result$ID)\n# Generate GSEA plots for selected gene sets\ncolor = colorRampPalette(c(\"#283593\",\"#2e7d32\"))(5)\n\n# Plot all on one image\nnew_gseaNb(object = edgeR_CFD_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"Kras Signaling Dn\",\n                          \"Apical Junction\",\n                          \"Estrogen Response Early\",\n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the size of the first plot's lines\n            lineAlpha = 0.6,         # Control the transparency of the first plot's lines\n            segmentSize = 3,       # Control the size of the second plot's vertical lines\n            segmentAlpha = 0.6,      # Control the transparency of the second plot's vertical lines\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the proportion of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#283593\",\"#2e7d32\")),\n            rankCol = rev(c(\"#283593\",\"white\",\"#2e7d32\"))\n)\n\n\nedgeR_CFD_hallmarks_GESA_legend\n\n\n\n12.1.3.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nedgeR_CFD_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\nedgeRsorted_df &lt;- edgeR_CFD_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nedgeRsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(edgeRsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nedgeRsorted_df$ID &lt;- sapply(edgeRsorted_df$ID, process_string)\nedgeRsorted_df$Description &lt;- sapply(edgeRsorted_df$Description, process_string)\n# Process row names\nrownames(edgeRsorted_df) &lt;- sapply(rownames(edgeRsorted_df), process_string)\n# Display results\nprint(edgeRsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nedgeR_CFD_kegg_y@result &lt;- edgeRsorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(edgeR_CFD_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(edgeR_CFD_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(edgeR_CFD_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(edgeR_CFD_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#283593\",\"#2e7d32\"))(5)\n\n# Plot all in one image\nnew_gseaNb(object = edgeR_CFD_kegg_y,\n            geneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Mapk Signaling Pathway\",\n                          \"Steroid Hormone Biosynthesis\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,         # Control the transparency of the line in the first plot\n            segmentSize = 3,       # Control the size of the vertical lines in the second plot\n            segment Alpha = 0.6,      # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#283593\",\"#2e7d32\")), \n            rankCol = rev(c(\"#283593\",\"white\",\"#2e7d32\"))\n)\n\n\nedgeR_CFD_kegg_GESA_legend\n\n\n\n\n12.1.4 correlation_limma_CFD\n\n12.1.4.1 HALLMARKS\ngeneList &lt;- correlation_limma_CFD$cor\nnames(geneList) = correlation_limma_CFD$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n#hallmark\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\nlimma_CFD_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by NES\nlimmasorted_df &lt;- limma_CFD_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nlimmasorted_df$core_gene_count &lt;- sapply(strsplit(as.character(limmasorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nlimmasorted_df$ID &lt;- sapply(limmasorted_df$ID, process_string)\nlimmasorted_df$Description &lt;- sapply(limmasorted_df$Description, process_string)\n# Process row names\nrownames(limmasorted_df) &lt;- sapply(rownames(limmasorted_df), process_string)\n# Display results\nprint(limmasorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nlimma_CFD_hallmarks_y@result &lt;- limmasorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(limma_CFD_hallmarks_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(limma_CFD_hallmarks_y@geneSets) &lt;- new_gene_set&lt;- names\n# Display the updated geneSets names\nprint(names(limma_CFD_hallmarks_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(TransPropysorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=F)\n\n\nprint(limma_CFD_hallmarks_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#1565c0\",\"#558b2f\"))(13)\n\n# Plot all in one image\nnew_gseaNb(object = limma_CFD_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"Adipogenesis\",\n                          \"P53 Pathway\",              \n                          \"Myogenesis\",\n                          \"Apical Junction\",\n                          \"Mtorc1 Signaling\",         \n                          \"Complement\",\n                          \"Spermatogenesis\",\n                          \"Inflammatory Response\",    \n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\",\n                          \"E2f Targets\",              \n                          \"G2m Checkpoint\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the line in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#1565c0\",\"#558b2f\")), \n            rankCol = rev(c(\"#1565c0\",\"white\",\"#558b2f\"))\n)\n\n\nlimma_CFD_hallmarks_GSEA_legend\n\n\n\n12.1.4.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nlimma_CFD_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\nlimmasorted_df &lt;- limma_CFD_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nlimmasorted_df$core_gene_count &lt;- sapply(strsplit(as.character(limmasorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nlimmasorted_df$ID &lt;- sapply(limmasorted_df$ID, process_string)\nlimmasorted_df$Description &lt;- sapply(limmasorted_df$Description, process_string)\n# Process row names\nrownames(limmasorted_df) &lt;- sapply(rownames(limmasorted_df), process_string)\n# Display results\nprint(limmasorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nlimma_CFD_kegg_y@result &lt;- limmasorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(limma_CFD_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(limma_CFD_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(limma_CFD_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(limma_CFD_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#1565c0\", \"#558b2f\"))(12)\n\n# Plot all in one image\nnew_gseaNb(object = limma_CFD_kegg_y,\n            geneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Chemokine Signaling Pathway\",\n                          \"Systemic Lupus Erythematosus\",\n                          \"Primary Immunodeficiency\",\n                          \"Leishmania Infection\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",\n                          \"Autoimmune Thyroid Disease\",\n                          \"Type I Diabetes Mellitus\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the line in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#1565c0\", \"#558b2f\")), \n            rankandRev = rev(c(\"#1565c0\", \"white\", \"#558b2f\"))\n)\n\n\nlimma_CFD_kegg_GSEA_legend\n\n\n\n\n12.1.5 correlation_outRst_CFD\n\n12.1.5.1 HALLMARKS\ngeneList &lt;- correlation_outRst_CFD$cor\nnames(geneList) = correlation_outRst_CFD$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n#hallmark\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\noutRst_CFD_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by NES\noutRstsorted_df &lt;- outRst_CFD_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\noutRstsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(outRstsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\noutRstsorted_df$ID &lt;- sapply(outRstsorted_df$ID, process_string)\noutRstsorted_df$Description &lt;- sapply(outRstsorted_df$Description, process_string)\n# Process row names\nrownames(outRstsorted_df) &lt;- sapply(rownames(outRstsorted_df), process_string)\n# Display results\nprint(outRstsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\noutRst_CFD_hallmarks_y@result &lt;- outRstsorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(outRst_CFD_hallmarks_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(outRgr_CFD_hallmarks_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(outRst_CFD_hallmarks_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(TransPropysorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=F)\n\n# Display IDs\nprint(outRst_CFD_hallmarks_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#0277bd\",\"#9e9d24\"))(8)\n\n# Plot all in one image\nnew_gseaNb(object = outRst_CFD_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"Il2 Stat5 Signaling\",\n                          \"Inflammatory Response\",\n                          \"Complement\",\n                          \"Interferon Alpha Response\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.7,           # Control the transparency of the line in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.7,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#0277bd\",\"#9e9d24\")), \n            rankCol = rev(c(\"#0277bd\",\"white\",\"#9e9d24\"))\n)\n\n\noutRst_CFD_hallmarks_GSEA_legend\n\n\n\n12.1.5.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\noutRst_CFD_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\noutRstsorted_df &lt;- outRst_CFD_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\noutRstsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(outRstsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\noutRstsorted_df$ID &lt;- sapply(outRstsorted_df$ID, process_string)\noutRstsorted_df$Description &lt;- sapply(outRstsorted_df$Description, process_string)\n# Process row names\nrownames(outRstsorted_df) &lt;- sapply(rownames(outRstsorted_df), process_string)\n# Display results\nprint(outRstsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway visualization\noutRst_CFD_kegg_y@result &lt;- outRstsorted_df\n\n# Process y@geneSets for easy GSEA pathway visualization\n# Get the current geneSets names\ngene_set_names &lt;- names(outRst_CFD_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(outRst_CFD_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(outRst_CFD_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(outRst_CFD_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#0277bd\", \"#9e9d24\"))(13)\n\n# Plot all in one image\nnew_gseaNb(object = outRst_CFD_kegg_y,\n            geneSetID = c(\"Steroid Hormone Biosynthesis\",\n                          \"Toll Like Receptor Signaling Pathway\",     \n                          \"Leishmania Infection\",\n                          \"Antigen Processing And Presentation\",      \n                          \"Cell Adhesion Molecules Cams\",\n                          \"Hematopoietic Cell Lineage\",               \n                          \"Natural Killer Cell Mediated Cytotoxicity\",\n                          \"Autoimmune Thyroid Disease\",               \n                          \"Systemic Lupus Erythematosus\",\n                          \"Chemokine Signaling Pathway\",              \n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",                \n                          \"Type I Diabetes Mellitus\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.7,         # Control the transparency of the first plot's lines\n            segmentSize = 3,       # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.7,      # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the height ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#0277bd\", \"#9e9d24\")), \n            rankCol = rev(c(\"#0277bd\", \"white\", \"#9e9d24\"))\n)\n\n\noutRst_CFD_kegg_GSEA_legend"
  },
  {
    "objectID": "CFD FullGSEA.html#cfd_kegg_hallmarks_all",
    "href": "CFD FullGSEA.html#cfd_kegg_hallmarks_all",
    "title": "12  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: CFD)",
    "section": "12.2 CFD_KEGG_HALLMARKS_ALL",
    "text": "12.2 CFD_KEGG_HALLMARKS_ALL\n\n\nCFD_KEGG_HALLMARKS_ALL"
  },
  {
    "objectID": "CFD FullGSEA.html#discussion",
    "href": "CFD FullGSEA.html#discussion",
    "title": "12  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: CFD)",
    "section": "12.3 Discussion",
    "text": "12.3 Discussion\n\ndeseq2/edgeRTransPropylimma/outRst\n\n\nIn the Ranked List, the proportion of positively correlated genes is greater than that of negatively correlated ones. Although the proportions of positive and negative values in edgeR are roughly equal, the proportion of genes with absolute correlation values greater than 0.5 remains higher for positive values. GSEA analysis shows a similar trend, with significantly more activated pathways (NES &gt; 0) than inhibited pathways (NES &lt; 0). Pathways enriched for inhibition are very few (or even none), indicating a significant bias in the pathway analysis results.\n\n\nThe proportion of positive and negative genes is balanced, and the proportion of activated and inhibited pathways is also moderate. This avoids the polarization trend seen with other methods. Additionally, the proportions of activated and inhibited pathways are consistent with the trend of positive and negative correlated genes.（Best）\n\n\nIn the Ranked List, positively correlated genes are more abundant than negatively correlated ones, which is consistent with the results of deseq2 and edgeR. However, GSEA analysis shows the opposite trend, with fewer activated pathways (NES &gt; 0) than inhibited pathways (NES &lt; 0). This phenomenon is particularly pronounced in outRst, where the proportion of negatively correlated genes is smaller, yet the number of enriched inhibited pathways is significantly higher. This imbalance in the proportion of positive and negative pathways is contrary to the trend observed in gene correlation.\nFurther observation and analysis reveal that the pathways enriched using the limma and RST methods often exhibit very similar rankings and numbers of genes (as indicated by the segment distribution in the middle part of each diagram). This suggests that these pathways are likely the same or highly similar, possibly representing different naming conventions or sub-pathways of a certain type, rather than distinct pathways.Strictly speaking, the primary advantage of the limma and RST methods (which aim to enrich as many pathways as possible, with this advantage originally manifested in the number of inhibited pathways in this study) appears less pronounced."
  },
  {
    "objectID": "ANKRD35 FullGSEA.html#ankrd35",
    "href": "ANKRD35 FullGSEA.html#ankrd35",
    "title": "13  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: ANKRD35)",
    "section": "13.1 ANKRD35",
    "text": "13.1 ANKRD35\n\n13.1.1 correlation_TransPropy_ANKRD35\n\n13.1.1.1 HALLMARKS\n# Create a named vector from the correlation data\ngeneList &lt;- correlation_TransPropy_ANKRD35$cor\nnames(geneList) = correlation_TransPropy_ANKRD35$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read the hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\n\n# Perform Gene Set Enrichment Analysis (GSEA)\nTransPropy_ANKRD35_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n\n# Sort the results by NES (Normalized Enrichment Score)\nTransPropysorted_df &lt;- TransPropy_ANKRD35_hallmarks_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\nTransPropysorted_df$core_gene_count &lt;- sapply(strsplit(as.character(TransPropysorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\nTransPropysorted_df$ID &lt;- sapply(TransPropysorted_df$ID, process_string)\nTransPropysorted_df$Description &lt;- sapply(TransPropysorted_df$Description, process_string)\n\n# Process the row names\nrownames(TransPropysorted_df) &lt;- sapply(rownames(TransPropysorted_df), process_string)\n\n# Display the results\nprint(TransPropysorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\nTransPropy_ANKRD35_hallmarks_y@result &lt;- TransPropysorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(TransPropy_ANKRD35_hallmarks_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(TransPropy_ANKRD35_hallmarks_y@geneSets) &lt;- new_gene_set_names\n# Display the modified geneSet names\nprint(names(TransPropy_ANKRD35_hallmarks_y@geneSets))\n\n\nprint(TransPropy_ANKRD35_hallmarks_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#6a1b9a\",\"#00838f\"))(12)\n\n# all plot one image\nnew_gseaNb(object = TransPropy_ANKRD35_hallmarks_y,\n            geneSetID = c(\"Xenobiotic Metabolism\",\n                          \"Kras Signaling Dn\",\n                          \"Myogenesis\",               \n                          \"Apical Junction\",\n                          \"Tnfa Signaling Via Nfkb\",\n                          \"Il2 Stat5 Signaling\",      \n                          \"Spermatogenesis\",\n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\",      \n                          \"Mitotic Spindle\",\n                          \"E2f Targets\",\n                          \"G2m Checkpoint\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#6a1b9a\",\"#00838f\")), \n            rankCol = rev(c(\"#6a1b9a\",\"white\",\"#00838f\"))\n)\n\n\nTransPropy_ANKRD35_hallmarks_GSEA_legend\n\n\n\n13.1.1.2 KEGG\n# KEGG\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nTransPropy_ANKRD35_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES (Normalized Enrichment Score)\nTransPropysorted_df &lt;- TransPropy_ANKRD35_kegg_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\nTransPropysorted_df$core_gene_count &lt;- sapply(strsplit(as.character(TransPropysorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\nTransPropysorted_df$ID &lt;- sapply(TransPropysorted_df$ID, process_string)\nTransPropysorted_df$Description &lt;- sapply(TransPropysorted_df$Description, process_string)\n\n# Process the row names\nrownames(TransPropysorted_df) &lt;- sapply(rownames(TransPropysorted_df), process_string)\n\n# Display the results\nprint(TransPropysorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\nTransPropy_ANKRD35_kegg_y@result &lt;- TransPropysorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(TransPropy_ANKRD35_kegg_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(TransPropy_ANKRD35_kegg_y@geneSets) &lt;- new_gene_set_names\n\n# Display the modified geneSet names\nprint(names(TransPropy_ANKRD35_kegg_y@geneSets))\n\n# Save the processed results to a CSV file\n# write.table(TransPropy_ANKRD35_kegg_y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=TRUE)\n\nprint(TransPropy_ANKRD35_kegg_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#6a1b9a\", \"#00838f\"))(14)\n\n# Plot all gene sets in one image\n# all plot one image\nnew_gseaNb(object = TransPropy_ANKRD35_kegg_y,\n            geneSetID = c(\"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Arachidonic Acid Metabolism\",                 \n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Retinol Metabolism\",                          \n                          \"Endocytosis\",\n                          \"Calcium Signaling Pathway\",                   \n                          \"Mapk Signaling Pathway\",\n                          \"Vascular Smooth Muscle Contraction\",          \n                          \"Ppar Signaling Pathway\",\n                          \"Type I Diabetes Mellitus\",                    \n                          \"Graft Versus Host Disease\",\n                          \"Leishmania Infection\",                        \n                          \"Hematopoietic Cell Lineage\",\n                          \"Cell Cycle\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#6a1b9a\",\"#00838f\")), \n            rankCol = rev(c(\"#6a1b9a\",\"white\",\"#00838f\"))\n)\n\n\nTransPropy_ANKRD35_kegg_GSEA_legend\n\n\n\n\n13.1.2 correlation_deseq2_ANKRD35\n\n13.1.2.1 HALLMARKS\n# Create a named vector from the correlation data\ngeneList &lt;- correlation_deseq2_ANKRD35$cor\nnames(geneList) = correlation_deseq2_ANKRD35$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read the hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\n\n# Perform Gene Set Enrichment Analysis (GSEA)\ndeseq2_ANKRD35_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n\n# Sort the results by NES (Normalized Enrichment Score)\ndeseq2sorted_df &lt;- deseq2_ANKRD35_hallmarks_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\ndeseq2sorted_df$core_gene_count &lt;- sapply(strsplit(as.character(deseq2sorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\ndeseq2sorted_df$ID &lt;- sapply(deseq2sorted_df$ID, process_string)\ndeseq2sorted_df$Description &lt;- sapply(deseq2sorted_df$Description, process_string)\n\n# Process the row names\nrownames(deseq2sorted_df) &lt;- sapply(rownames(deseq2sorted_df), process_string)\n\n# Display the results\nprint(deseq2sorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\ndeseq2_ANKRD35_hallmarks_y@result &lt;- deseq2sorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(deseq2_ANKRD35_hallmarks_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(deseq2_ANKRD35_hallmarks_y@geneSets) &lt;- new_gene_set_names\n\n# Display the modified geneSet names\nprint(names(deseq2_ANKRD35_hallmarks_y@geneSets))\n\n# Save the processed results to a CSV file\n# write.table(deseq2sorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=FALSE)\n\nprint(deseq2_ANKRD35_hallmarks_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#4527a0\",\"#00695c\"))(8)\n\n# all plot one image\nnew_gseaNb(object = deseq2_ANKRD35_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"Apical Junction\",\n                          \"Kras Signaling Dn\",      \n                          \"P53 Pathway\",\n                          \"Estrogen Response Early\", \n                          \"Myogenesis\",             \n                          \"Hypoxia\",\n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#4527a0\",\"#00695c\")), \n            rankCol = rev(c(\"#4527a0\",\"white\",\"#00695c\"))\n)\n\n\ndeseq2_ANKRD35_hallmarks_GSEA_legend\n\n\n\n13.1.2.2 kegg\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\ndeseq2_ANKRD35_kegg_y &lt;- GSEA(geneList,TERM2GENE =kegg)\n\n# Sort by NES\ndeseq2sorted_df &lt;- deseq2_ANKRD35_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enrichment genes per row\ndeseq2sorted_df$core_gene_count &lt;- sapply(strsplit(as.character(deseq2sorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscores\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make the rest lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\ndeseq2sorted_df$ID &lt;- sapply(deseq2sorted_df$ID, process_string)\ndeseq2sorted_df$Description &lt;- sapply(deseq2sorted_df$Description, process_string)\n# Process row names\nrownames(deseq2sorted_df) &lt;- sapply(rownames(deseq2sorted_df), process_string)\n# Display the result\nprint(deseq2sorted_df)\n\n# Transfer the processed data back to y@result for the GSEA collective pathway plot\ndeseq2_ANKRD35_kegg_y@result &lt;- deseq2sorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSets names\ngene_set_names &lt;- names(deseq2_ANKRD35_kegg_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSets names\nnames(deseq2_ANKRD35_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the modified geneSets names\nprint(names(deseq2_ANKRD35_kegg_y@geneSets))\n\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\",sep=\",\",row.names=T)\n\n\nprint(deseq2_ANKRD35_kegg_y@result$ID)\ncolor = colorRampPalette(c(\"#4527a0\",\"#00695c\"))(7)\n\n# All plot one image\nnew_gseaNb(object = deseq2_ANKRD35_kegg_y,\n            geneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Mapk Signaling Pathway\",                      \n                          \"Gnrh Signaling Pathway\",\n                          \"Linoleic Acid Metabolism\",                    \n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",             \n                          \"Steroid Hormone Biosynthesis\",\n                          \"Chemokine Signaling Pathway\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the  three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#4527a0\",\"#00695c\")), \n            rankCol = rev(c(\"#4527a0\",\"white\",\"#00695c\"))\n)\n\n\ndeseq2_ANKRD35_kegg_GSEA_legend\n\n\n\n\n13.1.3 correlation_edgeR_ANKRD35\n\n13.1.3.1 HALLMARKS\n# Translate the gene list from the correlation_edgeR_ANKRD35 data\ngeneList &lt;- correlation_edgeR_ANKRD35$cor\nnames(geneList) = correlation_edgeR_ANKRD35$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\nedgeR_ANKRD35_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by Normalized Enrichment Score (NES)\nedgeRsorted_df &lt;- edgeR_ANKRD35_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count core enrichment genes per pathway\nedgeRsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(edgeRsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to modify string (change pathway name prefix and casing)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string on underscores\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, rest lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Concatenate the words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nedgeRsorted_df$ID &lt;- sapply(edgeRsorted_df$ID, process_string)\nedgeRsorted_df$Description &lt;- sapply(edgeRsorted_df$Description, process_string)\n# Modify row names\nrownames(edgeRsorted_df) &lt;- sapply(rownames(edgeRsorted_df), process_string)\n# Display the modified dataframe\nprint(edgeRsorted_df)\n\n# Update processed data back to y@result for a collective GSEA pathway diagram\nedgeR_ANKRD35_hallmarks_y@result &lt;- edgeRsorted_df\n\n# Process y@geneSets for collective pathway diagrams\n# Get current geneSets names\ngene_set_names &lt;- names(edgeR_ANKRD35_hallmarks_y@geneSets)\n# Apply process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update geneSets names\nnames(edgeR_ANKRD35_hallmarks_y@geneSets) &lt;- new_gene_based_names\n# Display updated geneSets names\nprint(names(edgeR_ANKRD35_hallmarks_y@geneSets))\n\nprint(edgeR_ANKRD35_hallmarks_y@result$ID)\n# Generate GSEA plots for selected gene sets\ncolor = colorRampPalette(c(\"#283593\",\"#2e7d32\"))(5)\n\n# Plot all on one image\nnew_gseaNb(object = edgeR_ANKRD35_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"Kras Signaling Dn\",\n                          \"Apical Junction\",\n                          \"Estrogen Response Early\",\n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the size of the first plot's lines\n            lineAlpha = 0.6,         # Control the transparency of the first plot's lines\n            segmentSize = 3,       # Control the size of the second plot's vertical lines\n            segmentAlpha = 0.6,      # Control the transparency of the second plot's vertical lines\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the proportion of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#283593\",\"#2e7d32\")),\n            rankCol = rev(c(\"#283593\",\"white\",\"#2e7d32\"))\n)\n\n\nedgeR_ANKRD35_hallmarks_GESA_legend\n\n\n\n13.1.3.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nedgeR_ANKRD35_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\nedgeRsorted_df &lt;- edgeR_ANKRD35_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nedgeRsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(edgeRsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nedgeRsorted_df$ID &lt;- sapply(edgeRsorted_df$ID, process_string)\nedgeRsorted_df$Description &lt;- sapply(edgeRsorted_df$Description, process_string)\n# Process row names\nrownames(edgeRsorted_df) &lt;- sapply(rownames(edgeRsorted_df), process_string)\n# Display results\nprint(edgeRsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nedgeR_ANKRD35_kegg_y@result &lt;- edgeRsorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(edgeR_ANKRD35_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(edgeR_ANKRD35_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(edgeR_ANKRD35_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(edgeR_ANKRD35_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#283593\",\"#2e7d32\"))(7)\n\n# all plot one image\nnew_gseaNb(object = edgeR_ANKRD35_kegg_y,\n            geneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Mapk Signaling Pathway\",                      \n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",             \n                          \"Steroid Hormone Biosynthesis\",\n                          \"Starch And Sucrose Metabolism\",               \n                          \"Retinol Metabolism\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#283593\",\"#2e7d32\")), \n            rankCol = rev(c(\"#283593\",\"white\",\"#2e7d32\"))\n)\n\n\nedgeR_ANKRD35_kegg_GESA_legend\n\n\n\n\n13.1.4 correlation_limma_ANKRD35\n\n13.1.4.1 HALLMARKS\ngeneList &lt;- correlation_limma_ANKRD35$cor\nnames(geneList) = correlation_limma_ANKRD35$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n#hallmark\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\nlimma_ANKRD35_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by NES\nlimmasorted_df &lt;- limma_ANKRD35_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nlimmasorted_df$core_gene_count &lt;- sapply(strsplit(as.character(limmasorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nlimmasorted_df$ID &lt;- sapply(limmasorted_df$ID, process_string)\nlimmasorted_df$Description &lt;- sapply(limmasorted_df$Description, process_string)\n# Process row names\nrownames(limmasorted_df) &lt;- sapply(rownames(limmasorted_df), process_string)\n# Display results\nprint(limmasorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nlimma_ANKRD35_hallmarks_y@result &lt;- limmasorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(limma_ANKRD35_hallmarks_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(limma_ANKRD35_hallmarks_y@geneSets) &lt;- new_gene_set&lt;- names\n# Display the updated geneSets names\nprint(names(limma_ANKRD35_hallmarks_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(TransPropysorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=F)\n\n\nprint(limma_ANKRD35_hallmarks_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#1565c0\",\"#558b2f\"))(16)\n\n# all plot one image\nnew_gseaNb(object = limma_ANKRD35_hallmarks_y,\n            geneSetID = c(\"P53 Pathway\",\n                          \"Estrogen Response Late\",\n                          \"Estrogen Response Early\", \n                          \"Apical Junction\",\n                          \"Myogenesis\",\n                          \"Kras Signaling Dn\",        \n                          \"Il2 Stat5 Signaling\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Interferon Alpha Response\",\n                          \"Spermatogenesis\",\n                          \"Complement\",\n                          \"Inflammatory Response\",    \n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\",\n                          \"E2f Targets\",              \n                          \"G2m Checkpoint\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#1565c0\",\"#558b2f\")), \n            rankCol = rev(c(\"#1565c0\",\"white\",\"#558b2f\"))\n)\n\n\nlimma_ANKRD35_hallmarks_GSEA_legend\n\n\n\n13.1.4.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nlimma_ANKRD35_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\nlimmasorted_df &lt;- limma_ANKRD35_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nlimmasorted_df$core_gene_count &lt;- sapply(strsplit(as.character(limmasorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nlimmasorted_df$ID &lt;- sapply(limmasorted_df$ID, process_string)\nlimmasorted_df$Description &lt;- sapply(limmasorted_df$Description, process_string)\n# Process row names\nrownames(limmasorted_df) &lt;- sapply(rownames(limmasorted_df), process_string)\n# Display results\nprint(limmasorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nlimma_ANKRD35_kegg_y@result &lt;- limmasorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(limma_ANKRD35_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(limma_ANKRD35_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(limma_ANKRD35_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(limma_ANKRD35_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#1565c0\",\"#558b2f\"))(21)\n\n# all plot one image\nnew_gseaNb(object = limma_ANKRD35_kegg_y,\n            geneSetID = c(\"Gnrh Signaling Pathway\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Linoleic Acid Metabolism\",                    \n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Arachidonic Acid Metabolism\",                 \n                          \"Natural Killer Cell Mediated Cytotoxicity\",\n                          \"Viral Myocarditis\",                           \n                          \"Cytokine Cytokine Receptor Interaction\",\n                          \"Antigen Processing And Presentation\",         \n                          \"Cell Adhesion Molecules Cams\",\n                          \"Toll Like Receptor Signaling Pathway\",        \n                          \"Primary Immunodeficiency\",\n                          \"Leishmania Infection\",                        \n                          \"Systemic Lupus Erythematosus\",\n                          \"Chemokine Signaling Pathway\",                 \n                          \"Hematopoietic Cell Lineage\",\n                          \"Allograft Rejection\",                         \n                          \"Graft Versus Host Disease\",\n                          \"Autoimmune Thyroid Disease\",                 \n                          \"Type I Diabetes Mellitus\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#1565c0\",\"#558b2f\")), \n            rankCol = rev(c(\"#1565c0\",\"white\",\"#558b2f\"))\n)\n\n\nlimma_ANKRD35_kegg_GSEA_legend\n\n\n\n\n13.1.5 correlation_outRst_ANKRD35\n\n13.1.5.1 HALLMARKS\ngeneList &lt;- correlation_outRst_ANKRD35$cor\nnames(geneList) = correlation_outRst_ANKRD35$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n#hallmark\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\noutRst_ANKRD35_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by NES\noutRstsorted_df &lt;- outRst_ANKRD35_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\noutRstsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(outRstsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\noutRstsorted_df$ID &lt;- sapply(outRstsorted_df$ID, process_string)\noutRstsorted_df$Description &lt;- sapply(outRstsorted_df$Description, process_string)\n# Process row names\nrownames(outRstsorted_df) &lt;- sapply(rownames(outRstsorted_df), process_string)\n# Display results\nprint(outRstsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\noutRst_ANKRD35_hallmarks_y@result &lt;- outRstsorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(outRst_ANKRD35_hallmarks_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(outRgr_ANKRD35_hallmarks_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(outRst_ANKRD35_hallmarks_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(TransPropysorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=F)\n\n# Display IDs\nprint(outRst_ANKRD35_hallmarks_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#0277bd\",\"#9e9d24\"))(12)\n\n# all plot one image\nnew_gseaNb(object = outRst_ANKRD35_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"P53 Pathway\",               \n                          \"Apical Junction\",          \n                          \"Estrogen Response Early\",\n                          \"Apoptosis\",\n                          \"Il2 Stat5 Signaling\",      \n                          \"Inflammatory Response\",\n                          \"Complement\",\n                          \"Interferon Alpha Response\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.7,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.7,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#0277bd\",\"#9e9d24\")), \n            rankCol = rev(c(\"#0277bd\",\"white\",\"#9e9d24\"))\n)\n\n\noutRst_ANKRD35_hallmarks_GSEA_legend\n\n\n\n13.1.5.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\noutRst_ANKRD35_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\noutRstsorted_df &lt;- outRst_ANKRD35_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\noutRstsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(outRstsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\noutRstsorted_df$ID &lt;- sapply(outRstsorted_df$ID, process_string)\noutRstsorted_df$Description &lt;- sapply(outRstsorted_df$Description, process_string)\n# Process row names\nrownames(outRstsorted_df) &lt;- sapply(rownames(outRstsorted_df), process_string)\n# Display results\nprint(outRstsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway visualization\noutRst_ANKRD35_kegg_y@result &lt;- outRstsorted_df\n\n# Process y@geneSets for easy GSEA pathway visualization\n# Get the current geneSets names\ngene_set_names &lt;- names(outRst_ANKRD35_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(outRst_ANKRD35_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(outRst_ANKRD35_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(outRst_ANKRD35_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#0277bd\",\"#9e9d24\"))(17)\n\n# all plot one image\nnew_gseaNb(object = outRst_ANKRD35_kegg_y,\n            geneSetID = c(\"Gnrh Signaling Pathway\",\n                          \"Arachidonic Acid Metabolism\",              \n                          \"Mapk Signaling Pathway\",\n                          \"Cytokine Cytokine Receptor Interaction\",   \n                          \"Viral Myocarditis\",\n                          \"Leishmania Infection\",                     \n                          \"Antigen Processing And Presentation\",\n                          \"Toll Like Receptor Signaling Pathway\",     \n                          \"Cell Adhesion Molecules Cams\",\n                          \"Natural Killer Cell Mediated Cytotoxicity\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Autoimmune Thyroid Disease\",               \n                          \"Systemic Lupus Erythematosus\",\n                          \"Chemokine Signaling Pathway\",              \n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",                \n                          \"Type I Diabetes Mellitus\"), \n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.7,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.7,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#0277bd\",\"#9e9d24\")), \n            rankCol = rev(c(\"#0277bd\",\"white\",\"#9e9d24\"))\n)\n\n\noutRst_ANKRD35_kegg_GSEA_legend"
  },
  {
    "objectID": "ANKRD35 FullGSEA.html#ankrd35_kegg_hallmarks_all",
    "href": "ANKRD35 FullGSEA.html#ankrd35_kegg_hallmarks_all",
    "title": "13  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: ANKRD35)",
    "section": "13.2 ANKRD35_KEGG_HALLMARKS_ALL",
    "text": "13.2 ANKRD35_KEGG_HALLMARKS_ALL\n\n\nANKRD35_KEGG_HALLMARKS_ALL"
  },
  {
    "objectID": "ANKRD35 FullGSEA.html#discussion",
    "href": "ANKRD35 FullGSEA.html#discussion",
    "title": "13  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: ANKRD35)",
    "section": "13.3 Discussion",
    "text": "13.3 Discussion\n\ndeseq2/edgeRTransPropylimma/outRst\n\n\nIn the Ranked List, the proportion of positively correlated genes is greater than that of negatively correlated ones. Although the proportions of positive and negative values in edgeR are roughly equal, the proportion of genes with absolute correlation values greater than 0.5 remains higher for positive values. GSEA analysis shows a similar trend, with significantly more activated pathways (NES &gt; 0) than inhibited pathways (NES &lt; 0). Pathways enriched for inhibition are very few (or even none), indicating a significant bias in the pathway analysis results.\n\n\nThe proportion of positive and negative genes is balanced, and the proportion of activated and inhibited pathways is also moderate. This avoids the polarization trend seen with other methods. Additionally, the proportions of activated and inhibited pathways are consistent with the trend of positive and negative correlated genes.（Best）\n\n\nIn the Ranked List, positively correlated genes are more abundant than negatively correlated ones, which is consistent with the results of deseq2 and edgeR. However, GSEA analysis shows the opposite trend, with fewer activated pathways (NES &gt; 0) than inhibited pathways (NES &lt; 0). This phenomenon is particularly pronounced in outRst, where the proportion of negatively correlated genes is smaller, yet the number of enriched inhibited pathways is significantly higher. This imbalance in the proportion of positive and negative pathways is contrary to the trend observed in gene correlation.\nFurther observation and analysis reveal that the pathways enriched using the limma and RST methods often exhibit very similar rankings and numbers of genes (as indicated by the segment distribution in the middle part of each diagram). This suggests that these pathways are likely the same or highly similar, possibly representing different naming conventions or sub-pathways of a certain type, rather than distinct pathways.Strictly speaking, the primary advantage of the limma and RST methods (which aim to enrich as many pathways as possible, with this advantage originally manifested in the number of inhibited pathways in this study) appears less pronounced."
  },
  {
    "objectID": "ALOXE3 FullGSEA.html#aloxe3",
    "href": "ALOXE3 FullGSEA.html#aloxe3",
    "title": "14  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: ALOXE3)",
    "section": "14.1 ALOXE3",
    "text": "14.1 ALOXE3\n\n14.1.1 correlation_TransPropy_ALOXE3\n\n14.1.1.1 HALLMARKS\n# Create a named vector from the correlation data\ngeneList &lt;- correlation_TransPropy_ALOXE3$cor\nnames(geneList) = correlation_TransPropy_ALOXE3$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read the hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\n\n# Perform Gene Set Enrichment Analysis (GSEA)\nTransPropy_ALOXE3_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n\n# Sort the results by NES (Normalized Enrichment Score)\nTransPropysorted_df &lt;- TransPropy_ALOXE3_hallmarks_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\nTransPropysorted_df$core_gene_count &lt;- sapply(strsplit(as.character(TransPropysorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\nTransPropysorted_df$ID &lt;- sapply(TransPropysorted_df$ID, process_string)\nTransPropysorted_df$Description &lt;- sapply(TransPropysorted_df$Description, process_string)\n\n# Process the row names\nrownames(TransPropysorted_df) &lt;- sapply(rownames(TransPropysorted_df), process_string)\n\n# Display the results\nprint(TransPropysorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\nTransPropy_ALOXE3_hallmarks_y@result &lt;- TransPropysorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(TransPropy_ALOXE3_hallmarks_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(TransPropy_ALOXE3_hallmarks_y@geneSets) &lt;- new_gene_set_names\n# Display the modified geneSet names\nprint(names(TransPropy_ALOXE3_hallmarks_y@geneSets))\n\n\nprint(TransPropy_ALOXE3_hallmarks_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#6a1b9a\",\"#00838f\"))(10)\n\n# all plot one image\nnew_gseaNb(object = TransPropy_ALOXE3_hallmarks_y,\n            geneSetID = c(\"Kras Signaling Dn\",\n                          \"Estrogen Response Early\",\n                          \"Xenobiotic Metabolism\",\n                          \"Apical Junction\",\n                          \"Tnfa Signaling Via Nfkb\",\n                          \"Epithelial Mesenchymal Transition\",\n                          \"Spermatogenesis\",\n                          \"Mitotic Spindle\",\n                          \"E2f Targets\",\n                          \"G2m Checkpoint\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#6a1b9a\",\"#00838f\")),\n            rankCol = rev(c(\"#6a1b9a\",\"white\",\"#00838f\"))\n)\n\n\nTransPropy_ALOXE3_hallmarks_GSEA_legend\n\n\n\n14.1.1.2 KEGG\n# KEGG\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nTransPropy_ALOXE3_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES (Normalized Enrichment Score)\nTransPropysorted_df &lt;- TransPropy_ALOXE3_kegg_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\nTransPropysorted_df$core_gene_count &lt;- sapply(strsplit(as.character(TransPropysorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\nTransPropysorted_df$ID &lt;- sapply(TransPropysorted_df$ID, process_string)\nTransPropysorted_df$Description &lt;- sapply(TransPropysorted_df$Description, process_string)\n\n# Process the row names\nrownames(TransPropysorted_df) &lt;- sapply(rownames(TransPropysorted_df), process_string)\n\n# Display the results\nprint(TransPropysorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\nTransPropy_ALOXE3_kegg_y@result &lt;- TransPropysorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(TransPropy_ALOXE3_kegg_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(TransPropy_ALOXE3_kegg_y@geneSets) &lt;- new_gene_set_names\n\n# Display the modified geneSet names\nprint(names(TransPropy_ALOXE3_kegg_y@geneSets))\n\n# Save the processed results to a CSV file\n# write.table(TransPropy_ALOXE3_kegg_y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=TRUE)\n\nprint(TransPropy_ALOXE3_kegg_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#6a1b9a\",\"#00838f\"))(10)\n\n# all plot one image\nnew_gseaNb(object = TransPropy_ALOXE3_kegg_y,\n            geneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Endocytosis\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Retinol Metabolism\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Ppar Signaling Pathway\",\n                          \"Calcium Signaling Pathway\",\n                          \"Vascular Smooth Muscle Contraction\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Cell Cycle\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#6a1b9a\",\"#00838f\")),\n            rankCol = rev(c(\"#6a1b9a\",\"white\",\"#00838f\"))\n)\n\n\n\nTransPropy_ALOXE3_kegg_GSEA_legend\n\n\n\n\n14.1.2 correlation_deseq2_ALOXE3\n\n14.1.2.1 HALLMARKS\n# Create a named vector from the correlation data\ngeneList &lt;- correlation_deseq2_ALOXE3$cor\nnames(geneList) = correlation_deseq2_ALOXE3$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read the hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\n\n# Perform Gene Set Enrichment Analysis (GSEA)\ndeseq2_ALOXE3_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n\n# Sort the results by NES (Normalized Enrichment Score)\ndeseq2sorted_df &lt;- deseq2_ALOXE3_hallmarks_y@result %&gt;% arrange(desc(NES))\n\n# Count the number of core enriched genes in each row\ndeseq2sorted_df$core_gene_count &lt;- sapply(strsplit(as.character(deseq2sorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefixes and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words back into a single string\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\ndeseq2sorted_df$ID &lt;- sapply(deseq2sorted_df$ID, process_string)\ndeseq2sorted_df$Description &lt;- sapply(deseq2sorted_df$Description, process_string)\n\n# Process the row names\nrownames(deseq2sorted_df) &lt;- sapply(rownames(deseq2sorted_df), process_string)\n\n# Display the results\nprint(deseq2sorted_df)\n\n# Assign the processed data back to y@result for the GSEA collective pathway plot\ndeseq2_ALOXE3_hallmarks_y@result &lt;- deseq2sorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSet names\ngene_set_names &lt;- names(deseq2_ALOXE3_hallmarks_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSet names\nnames(deseq2_ALOXE3_hallmarks_y@geneSets) &lt;- new_gene_set_names\n\n# Display the modified geneSet names\nprint(names(deseq2_ALOXE3_hallmarks_y@geneSets))\n\n# Save the processed results to a CSV file\n# write.table(deseq2sorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=FALSE)\n\nprint(deseq2_ALOXE3_hallmarks_y@result$ID)\n# Set the color palette for the plot\ncolor = colorRampPalette(c(\"#4527a0\",\"#00695c\"))(9)\n\n# all plot one image\nnew_gseaNb(object = deseq2_ALOXE3_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"Apical Junction\",\n                          \"Kras Signaling Dn\",\n                          \"Estrogen Response Early\",\n                          \"Hypoxia\",\n                          \"P53 Pathway\",\n                          \"Myogenesis\",\n                          \"Kras Signaling Up\",\n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#4527a0\",\"#00695c\")),\n            rankCol = rev(c(\"#4527a0\",\"white\",\"#00695c\"))\n)\n\n\ndeseq2_ALOXE3_hallmarks_GSEA_legend\n\n\n\n14.1.2.2 kegg\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\ndeseq2_ALOXE3_kegg_y &lt;- GSEA(geneList,TERM2GENE =kegg)\n\n# Sort by NES\ndeseq2sorted_df &lt;- deseq2_ALOXE3_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enrichment genes per row\ndeseq2sorted_df$core_gene_count &lt;- sapply(strsplit(as.character(deseq2sorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscores\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word and make the rest lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine the words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to the ID and Description columns\ndeseq2sorted_df$ID &lt;- sapply(deseq2sorted_df$ID, process_string)\ndeseq2sorted_df$Description &lt;- sapply(deseq2sorted_df$Description, process_string)\n# Process row names\nrownames(deseq2sorted_df) &lt;- sapply(rownames(deseq2sorted_df), process_string)\n# Display the result\nprint(deseq2sorted_df)\n\n# Transfer the processed data back to y@result for the GSEA collective pathway plot\ndeseq2_ALOXE3_kegg_y@result &lt;- deseq2sorted_df\n\n# Process y@geneSets for the GSEA collective pathway plot\n# Get the current geneSets names\ngene_set_names &lt;- names(deseq2_ALOXE3_kegg_y@geneSets)\n# Apply the process_string function to the names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the geneSets names\nnames(deseq2_ALOXE3_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the modified geneSets names\nprint(names(deseq2_ALOXE3_kegg_y@geneSets))\n\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\",sep=\",\",row.names=T)\n\n\nprint(deseq2_ALOXE3_kegg_y@result$ID)\ncolor = colorRampPalette(c(\"#4527a0\",\"#00695c\"))(9)\n\n# all plot one image\nnew_gseaNb(object = deseq2_ALOXE3_kegg_y,\n            geneSetID = c(\"Mapk Signaling Pathway\",\n                          \"Arachidonic Acid Metabolism\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Linoleic Acid Metabolism\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Gnrh Signaling Pathway\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Retinol Metabolism\",\n                          \"Pathways In Cancer\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#4527a0\",\"#00695c\")),\n            rankCol = rev(c(\"#4527a0\",\"white\",\"#00695c\"))\n)\n\n\ndeseq2_ALOXE3_kegg_GSEA_legend\n\n\n\n\n14.1.3 correlation_edgeR_ALOXE3\n\n14.1.3.1 HALLMARKS\n# Translate the gene list from the correlation_edgeR_ALOXE3 data\ngeneList &lt;- correlation_edgeR_ALOXE3$cor\nnames(geneList) = correlation_edgeR_ALOXE3$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n# Read hallmark gene sets\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\nedgeR_ALOXE3_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by Normalized Enrichment Score (NES)\nedgeRsorted_df &lt;- edgeR_ALOXE3_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count core enrichment genes per pathway\nedgeRsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(edgeRsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to modify string (change pathway name prefix and casing)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string on underscores\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, rest lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Concatenate the words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nedgeRsorted_df$ID &lt;- sapply(edgeRsorted_df$ID, process_string)\nedgeRsorted_df$Description &lt;- sapply(edgeRsorted_df$Description, process_string)\n# Modify row names\nrownames(edgeRsorted_df) &lt;- sapply(rownames(edgeRsorted_df), process_string)\n# Display the modified dataframe\nprint(edgeRsorted_df)\n\n# Update processed data back to y@result for a collective GSEA pathway diagram\nedgeR_ALOXE3_hallmarks_y@result &lt;- edgeRsorted_df\n\n# Process y@geneSets for collective pathway diagrams\n# Get current geneSets names\ngene_set_names &lt;- names(edgeR_ALOXE3_hallmarks_y@geneSets)\n# Apply process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update geneSets names\nnames(edgeR_ALOXE3_hallmarks_y@geneSets) &lt;- new_gene_based_names\n# Display updated geneSets names\nprint(names(edgeR_ALOXE3_hallmarks_y@geneSets))\n\nprint(edgeR_ALOXE3_hallmarks_y@result$ID)\n# Generate GSEA plots for selected gene sets\ncolor = colorRampPalette(c(\"#283593\",\"#2e7d32\"))(4)\n\n# all plot one image\nnew_gseaNb(object = edgeR_ALOXE3_hallmarks_y,\n            geneSetID = c(\"Apical Junction\",\n                          \"Estrogen Response Late\",\n                          \"Kras Signaling Dn\",\n                          \"Estrogen Response Early\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#283593\",\"#2e7d32\")),\n            rankCol = rev(c(\"#283593\",\"white\",\"#2e7d32\"))\n)\n\n\nedgeR_ALOXE3_hallmarks_GESA_legend\n\n\n\n14.1.3.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nedgeR_ALOXE3_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\nedgeRsorted_df &lt;- edgeR_ALOXE3_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nedgeRsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(edgeRsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nedgeRsorted_df$ID &lt;- sapply(edgeRsorted_df$ID, process_string)\nedgeRsorted_df$Description &lt;- sapply(edgeRsorted_df$Description, process_string)\n# Process row names\nrownames(edgeRsorted_df) &lt;- sapply(rownames(edgeRsorted_df), process_string)\n# Display results\nprint(edgeRsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nedgeR_ALOXE3_kegg_y@result &lt;- edgeRsorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(edgeR_ALOXE3_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(edgeR_ALOXE3_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(edgeR_ALOXE3_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(edgeR_ALOXE3_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#283593\",\"#2e7d32\"))(7)\n\n# all plot one image\nnew_gseaNb(object = edgeR_ALOXE3_kegg_y,\n            geneSetID = c(\"Mapk Signaling Pathway\",\n                          \"Arachidonic Acid Metabolism\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Retinol Metabolism\",\n                          \"Starch And Sucrose Metabolism\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#283593\",\"#2e7d32\")),\n            rankCol = rev(c(\"#283593\",\"white\",\"#2e7d32\"))\n)\n\n\nedgeR_ALOXE3_kegg_GESA_legend\n\n\n\n\n14.1.4 correlation_limma_ALOXE3\n\n14.1.4.1 HALLMARKS\ngeneList &lt;- correlation_limma_ALOXE3$cor\nnames(geneList) = correlation_limma_ALOXE3$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n#hallmark\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\nlimma_ALOXE3_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by NES\nlimmasorted_df &lt;- limma_ALOXE3_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nlimmasorted_df$core_gene_count &lt;- sapply(strsplit(as.character(limmasorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nlimmasorted_df$ID &lt;- sapply(limmasorted_df$ID, process_string)\nlimmasorted_df$Description &lt;- sapply(limmasorted_df$Description, process_string)\n# Process row names\nrownames(limmasorted_df) &lt;- sapply(rownames(limmasorted_df), process_string)\n# Display results\nprint(limmasorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nlimma_ALOXE3_hallmarks_y@result &lt;- limmasorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(limma_ALOXE3_hallmarks_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(limma_ALOXE3_hallmarks_y@geneSets) &lt;- new_gene_set&lt;- names\n# Display the updated geneSets names\nprint(names(limma_ALOXE3_hallmarks_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(TransPropysorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=F)\n\n\nprint(limma_ALOXE3_hallmarks_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#1565c0\",\"#558b2f\"))(16)\n\n# all plot one image\nnew_gseaNb(object = limma_ALOXE3_hallmarks_y,\n            geneSetID = c(\"P53 Pathway\",\n                          \"Kras Signaling Dn\",\n                          \"Estrogen Response Early\",\n                          \"Estrogen Response Late\",\n                          \"Apical Junction\",\n                          \"Myogenesis\",\n                          \"Complement\",\n                          \"Epithelial Mesenchymal Transition\",\n                          \"Interferon Alpha Response\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Inflammatory Response\",\n                          \"Spermatogenesis\",\n                          \"Allograft Rejection\",\n                          \"Interferon Gamma Response\",\n                          \"E2f Targets\",\n                          \"G2m Checkpoint\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#1565c0\",\"#558b2f\")),\n            rankCol = rev(c(\"#1565c0\",\"white\",\"#558b2f\"))\n)\n\n\nlimma_ALOXE3_hallmarks_GSEA_legend\n\n\n\n14.1.4.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\nlimma_ALOXE3_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\nlimmasorted_df &lt;- limma_ALOXE3_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\nlimmasorted_df$core_gene_count &lt;- sapply(strsplit(as.character(limmasorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\nlimmasorted_df$ID &lt;- sapply(limmasorted_df$ID, process_string)\nlimmasorted_df$Description &lt;- sapply(limmasorted_df$Description, process_string)\n# Process row names\nrownames(limmasorted_df) &lt;- sapply(rownames(limmasorted_df), process_string)\n# Display results\nprint(limmasorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\nlimma_ALOXE3_kegg_y@result &lt;- limmasorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(limma_ALOXE3_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(limma_ALOXE3_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(limma_ALOXE3_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(limma_ALOXE3_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#1565c0\",\"#558b2f\"))(14)\n\n# all plot one image\nnew_gseaNb(object = limma_ALOXE3_kegg_y,\n            geneSetID = c(\"Retinol Metabolism\",\n                          \"Linoleic Acid Metabolism\",\n                          \"Gnrh Signaling Pathway\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Arachidonic Acid Metabolism\",\n                          \"Leishmania Infection\",\n                          \"Systemic Lupus Erythematosus\",\n                          \"Primary Immunodeficiency\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",\n                          \"Autoimmune Thyroid Disease\",\n                          \"Type I Diabetes Mellitus\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.6,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.6,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = rev(c(\"#1565c0\",\"#558b2f\")),\n            rankCol = rev(c(\"#1565c0\",\"white\",\"#558b2f\"))\n)\n\n\nlimma_ALOXE3_kegg_GSEA_legend\n\n\n\n\n14.1.5 correlation_outRst_ALOXE3\n\n14.1.5.1 HALLMARKS\ngeneList &lt;- correlation_outRst_ALOXE3$cor\nnames(geneList) = correlation_outRst_ALOXE3$gene2\ngeneList = sort(geneList, decreasing = TRUE)\nhead(geneList)\n\n#hallmark\nhallmarks &lt;- read.gmt(\"h.all.v7.4.symbols.gmt\")\noutRst_ALOXE3_hallmarks_y &lt;- GSEA(geneList, TERM2GENE = hallmarks, pvalueCutoff = 0.05)\n# Sort by NES\noutRstsorted_df &lt;- outRst_ALOXE3_hallmarks_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\noutRstsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(outRstsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^HALLMARK_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\noutRstsorted_df$ID &lt;- sapply(outRstsorted_df$ID, process_string)\noutRstsorted_df$Description &lt;- sapply(outRstsorted_df$Description, process_string)\n# Process row names\nrownames(outRstsorted_df) &lt;- sapply(rownames(outRstsorted_df), process_string)\n# Display results\nprint(outRstsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway diagram\noutRst_ALOXE3_hallmarks_y@result &lt;- outRstsorted_df\n\n# Process y@geneSets for easy GSEA pathway diagram\n# Get the current geneSets names\ngene_set_names &lt;- names(outRst_ALOXE3_hallmarks_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(outRgr_ALOXE3_hallmarks_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(outRst_ALOXE3_hallmarks_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(TransPropysorted_df, file=\"TransPropy_HALLMARKS_GSEA_all.csv\", sep=\",\", row.names=F)\n\n# Display IDs\nprint(outRst_ALOXE3_hallmarks_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#0277bd\",\"#9e9d24\"))(12)\n\n# all plot one image\nnew_gseaNb(object = outRst_ALOXE3_hallmarks_y,\n            geneSetID = c(\"Estrogen Response Late\",\n                          \"P53 Pathway\",\n                          \"Apical Junction\",\n                          \"Estrogen Response Early\",\n                          \"Kras Signaling Dn\",\n                          \"Il2 Stat5 Signaling\",\n                          \"Complement\",\n                          \"Inflammatory Response\",\n                          \"Interferon Alpha Response\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.7,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.7,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            legend.position = \"none\",\n            htCol = rev(c(\"#0277bd\",\"#9e9d24\")),\n            rankCol = rev(c(\"#0277bd\",\"white\",\"#9e9d24\"))\n)\n\n\noutRst_ALOXE3_hallmarks_GSEA_legend\n\n\n\n14.1.5.2 KEGG\n#kegg\nkegg &lt;- read.gmt(\"c2.cp.kegg.v7.4.symbols.gmt\")\n\noutRst_ALOXE3_kegg_y &lt;- GSEA(geneList, TERM2GENE = kegg)\n\n# Sort by NES\noutRstsorted_df &lt;- outRst_ALOXE3_kegg_y@result %&gt;% arrange(desc(NES))\n# Count the number of core enriched genes per row\noutRstsorted_df$core_gene_count &lt;- sapply(strsplit(as.character(outRstsorted_df$core_enrichment), \"/\"), length)\n\n# Define a function to process strings (change pathway name prefix and case)\nprocess_string &lt;- function(s) {\n  # Remove the first word and underscore at the beginning\n  s &lt;- sub(\"^KEGG_\", \"\", s)\n  # Split the string by underscore\n  words &lt;- unlist(strsplit(s, \"_\"))\n  # Capitalize the first letter of each word, make other letters lowercase\n  words &lt;- tolower(words)\n  words &lt;- paste(toupper(substring(words, 1, 1)), substring(words, 2), sep = \"\")\n  # Combine words\n  result &lt;- paste(words, collapse = \" \")\n  return(result)\n}\n\n# Apply the function to ID and Description columns\noutRstsorted_df$ID &lt;- sapply(outRstsorted_df$ID, process_string)\noutRstsorted_df$Description &lt;- sapply(outRstsorted_df$Description, process_string)\n# Process row names\nrownames(outRstsorted_df) &lt;- sapply(rownames(outRstsorted_df), process_string)\n# Display results\nprint(outRstsorted_df)\n\n# Send the processed data back to y@result for easy GSEA pathway visualization\noutRst_ALOXE3_kegg_y@result &lt;- outRstsorted_df\n\n# Process y@geneSets for easy GSEA pathway visualization\n# Get the current geneSets names\ngene_set_names &lt;- names(outRst_ALOXE3_kegg_y@geneSets)\n# Apply the process_string function to names\nnew_gene_set_names &lt;- sapply(gene_set_names, process_string)\n# Update the names of geneSets\nnames(outRst_ALOXE3_kegg_y@geneSets) &lt;- new_gene_set_names\n# Display the updated geneSets names\nprint(names(outRst_ALOXE3_kegg_y@geneSets))\n\n# Write the result to a CSV file\n# write.table(y@result, file=\"Transpropy_KEGG_GSEA_all.csv\", sep=\",\", row.names=T)\n\n# Display IDs\nprint(outRst_ALOXE3_kegg_y@result$ID)\n# Define a color gradient\ncolor = colorRampPalette(c(\"#0277bd\",\"#9e9d24\"))(21)\n\n# all plot one image\nnew_gseaNb(object = outRst_ALOXE3_kegg_y,\n            geneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Gnrh Signaling Pathway\",\n                          \"Retinol Metabolism\",\n                          \"Wnt Signaling Pathway\",\n                          \"Long Term Depression\",\n                          \"Mapk Signaling Pathway\",\n                          \"Pathways In Cancer\",\n                          \"Cell Adhesion Molecules Cams\",\n                          \"Viral Myocarditis\",\n                          \"Complement And Coagulation Cascades\",\n                          \"Leishmania Infection\",\n                          \"Antigen Processing And Presentation\",\n                          \"Toll Like Receptor Signaling Pathway\",\n                          \"Natural Killer Cell Mediated Cytotoxicity\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Autoimmune Thyroid Disease\",\n                          \"Systemic Lupus Erythematosus\",\n                          \"Chemokine Signaling Pathway\",\n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",\n                          \"Type I Diabetes Mellitus\"),\n            curveCol = color,\n            lineSize = 2.5,            # Control the line size of the first plot\n            lineAlpha = 0.7,           # Control the transparency of the lines in the first plot\n            segmentSize = 3,           # Control the size of the vertical lines in the second plot\n            segmentAlpha = 0.7,        # Control the transparency of the vertical lines in the second plot\n            plotHeightRatio = c(0.3, 0.5, 0.2),  # Control the vertical ratio of the three plots\n            #legend.position = \"none\",\n            htCol = c(\"#9e9d24\", \"#0277bd\"),\n            rankCol = rev(c(\"#0277bd\",\"white\",\"#9e9d24\")),\n)\n\n\noutRst_ALOXE3_kegg_GSEA_legend"
  },
  {
    "objectID": "ALOXE3 FullGSEA.html#aloxe3_kegg_hallmarks_all",
    "href": "ALOXE3 FullGSEA.html#aloxe3_kegg_hallmarks_all",
    "title": "14  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: ALOXE3)",
    "section": "14.2 ALOXE3_KEGG_HALLMARKS_ALL",
    "text": "14.2 ALOXE3_KEGG_HALLMARKS_ALL\n\n\nALOXE3_KEGG_HALLMARKS_ALL"
  },
  {
    "objectID": "ALOXE3 FullGSEA.html#discussion",
    "href": "ALOXE3 FullGSEA.html#discussion",
    "title": "14  Comparison of TransPropy with Other Tool Packages Using GSEA (Gene: ALOXE3)",
    "section": "14.3 Discussion",
    "text": "14.3 Discussion\n\ndeseq2/edgeRTransPropylimma/outRst\n\n\nIn the Ranked List, the proportion of positively correlated genes is greater than that of negatively correlated ones. Although the proportions of positive and negative values in edgeR are roughly equal, the proportion of genes with absolute correlation values greater than 0.5 remains higher for positive values. GSEA analysis shows a similar trend, with significantly more activated pathways (NES &gt; 0) than inhibited pathways (NES &lt; 0). Pathways enriched for inhibition are very few (or even none), indicating a significant bias in the pathway analysis results.\n\n\nThe proportion of positive and negative genes is balanced, and the proportion of activated and inhibited pathways is also moderate. This avoids the polarization trend seen with other methods. Additionally, the proportions of activated and inhibited pathways are consistent with the trend of positive and negative correlated genes.（Best）\n\n\nIn the Ranked List, positively correlated genes are more abundant than negatively correlated ones, which is consistent with the results of deseq2 and edgeR. However, GSEA analysis shows the opposite trend, with fewer activated pathways (NES &gt; 0) than inhibited pathways (NES &lt; 0). This phenomenon is particularly pronounced in outRst, where the proportion of negatively correlated genes is smaller, yet the number of enriched inhibited pathways is significantly higher. This imbalance in the proportion of positive and negative pathways is contrary to the trend observed in gene correlation.\nFurther observation and analysis reveal that the pathways enriched using the limma and RST methods often exhibit very similar rankings and numbers of genes (as indicated by the segment distribution in the middle part of each diagram). This suggests that these pathways are likely the same or highly similar, possibly representing different naming conventions or sub-pathways of a certain type, rather than distinct pathways.Strictly speaking, the primary advantage of the limma and RST methods (which aim to enrich as many pathways as possible, with this advantage originally manifested in the number of inhibited pathways in this study) appears less pronounced."
  },
  {
    "objectID": "GeneCount and GseaNES.html#define-a-function-to-mix-colors",
    "href": "GeneCount and GseaNES.html#define-a-function-to-mix-colors",
    "title": "15  Comparison of TransPropy with Other Tool Packages Using GeneCount and GseaNES Data (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "15.1 Define a function to mix colors",
    "text": "15.1 Define a function to mix colors\nadd_white &lt;- function(color, white_ratio) {\n  # Convert hex color to RGB values\n  rgb_val &lt;- col2rgb(color) / 255\n  # RGB values of white\n  white &lt;- c(1, 1, 1)\n  # Mix color with white\n  mixed_color &lt;- (1 - white_ratio) * rgb_val + white_ratio * white\n  # Convert the mixed color back to hex format\n  rgb(mixed_color[1], mixed_color[2], mixed_color[3], maxColorValue = 1)\n}"
  },
  {
    "objectID": "GeneCount and GseaNES.html#cfd",
    "href": "GeneCount and GseaNES.html#cfd",
    "title": "15  Comparison of TransPropy with Other Tool Packages Using GeneCount and GseaNES Data (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "15.2 CFD",
    "text": "15.2 CFD\n# Script for correlation_TransPropy_CFD\ndata &lt;- correlation_TransPropy_CFD\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_TransPropy_CFD\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1165,  1470, \n  \"Abs(Cor)&gt;0.5\",  755,  646, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#4a148c', '#006064')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np1&lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np1\n\n\ncorrelation_TransPropy_CFD_genecount_RATIO\n\nNES_values &lt;- TransPropy_CFD_hallmarks_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- TransPropy_CFD_kegg_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  3,  6, \n  \"kegg_NES\",  9,  5, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#4a148c', '#006064')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np2 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np2\n\n\ncorrelation_TransPropy_CFD_NES_RATIO\n\n# Script for correlation_deseq2_CFD\ndata &lt;- correlation_deseq2_CFD\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_deseq2_CFD\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\n\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1511,  1124, \n  \"Abs(Cor)&gt;0.5\",  1133,  453, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#311b92', '#004d40')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np3 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np3\n\n\ncorrelation_deseq2_CFD_genecount_RATIO\n\n\n\n\nNES_values &lt;- deseq2_CFD_hallmarks_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- deseq2_CFD_kegg_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  6,  1, \n  \"kegg_NES\",  7,  0, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#311b92', '#004d40')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np4 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np4\n\n\ncorrelation_deseq2_CFD_NES_RATIO\n\n# Script for correlation_edgeR_CFD\ndata &lt;- correlation_edgeR_CFD\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_edgeR_CFD\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1272,  1363, \n  \"Abs(Cor)&gt;0.5\",  935,  464, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#1a237e', '#1b5e20')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np5 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np5\n\n\n\ncorrelation_edgeR_CFD_genecount_RATIO\n\nNES_values &lt;- edgeR_CFD_hallmarks_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- edgeR_CFD_kegg_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  4,  1, \n  \"kegg_NES\",  5,  0, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#1a237e', '#1b5e20')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np6 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np6\n\n\ncorrelation_edgeR_CFD_NES_RATIO\n\n# Script for correlation_limma_CFD\ndata &lt;- correlation_limma_CFD\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_limma_CFD\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\n\n\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1455,  1180, \n  \"Abs(Cor)&gt;0.5\",  1290,  489, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#0d47a1', '#33691e')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np7 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np7\n\n\ncorrelation_limma_CFD_genecount_RATIO\n\nNES_values &lt;- limma_CFD_hallmarks_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- limma_CFD_kegg_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  5,  8, \n  \"kegg_NES\",  3,  9, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#0d47a1', '#33691e')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np8 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np8\n\n\ncorrelation_limma_CFD_NES_RATIO\n\n# Script for correlation_outRst_CFD\ndata &lt;- correlation_outRst_CFD\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_outRst_CFD\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\n\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1763,  872, \n  \"Abs(Cor)&gt;0.5\",  1480,  288, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#01579b', '#827717')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np9 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np9\n\n\ncorrelation_outRst_CFD_genecount_RATIO\n\nNES_values &lt;- outRst_CFD_hallmarks_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- outRst_CFD_kegg_y@result[ ,\"NES\"]\n# Count the number of positives and negatives\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print the results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  1,  7, \n  \"kegg_NES\",  1,  12, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#01579b', '#827717')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np10 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np10\n\n\ncorrelation_outRst_CFD_NES_RATIO\n\n\n15.2.1 CFD_ALL\n\n\nCFD_ALL_RATIO\n\n\n\n15.2.2 CFD_seprate\n\n\nCFD_seprate_RATIO"
  },
  {
    "objectID": "GeneCount and GseaNES.html#ankrd35",
    "href": "GeneCount and GseaNES.html#ankrd35",
    "title": "15  Comparison of TransPropy with Other Tool Packages Using GeneCount and GseaNES Data (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "15.3 ANKRD35",
    "text": "15.3 ANKRD35\n# Script for correlation_TransPropy_ANKRD35\ndata &lt;- correlation_TransPropy_ANKRD35\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_TransPropy_ANKRD35\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1158,  1477, \n  \"Abs(Cor)&gt;0.5\",  822,  782, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#4a148c', '#006064')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np11 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np11\n\n\ncorrelation_TransPropy_ANKRD35_genecount_RATIO\n\nNES_values &lt;- TransPropy_ANKRD35_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- TransPropy_ANKRD35_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  5,  7, \n  \"kegg_NES\",  9,  5, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#4a148c', '#006064')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np12 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np12\n\n\ncorrelation_TransPropy_ANKRD35_NES_RATIO\n\n# Script for correlation_deseq2_ANKRD35\ndata &lt;- correlation_deseq2_ANKRD35\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_deseq2_ANKRD35\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1508,  1127, \n  \"Abs(Cor)&gt;0.5\",  1190,  619, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#311b92', '#004d40')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np13 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np13\n\n\ncorrelation_deseq2_ANKRD35_genecount_RATIO\n\nNES_values &lt;- deseq2_ANKRD35_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- deseq2_ANKRD35_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  7,  1, \n  \"kegg_NES\",  7,  1, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#311b92', '#004d40')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np14 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np14\n\n\n\ncorrelation_deseq2_ANKRD35_NES_RATIO\n\n# Script for correlation_edgeR_ANKRD35\ndata &lt;- correlation_edgeR_ANKRD35\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_edgeR_ANKRD35\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1269,  1366, \n  \"Abs(Cor)&gt;0.5\",  984,  648, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#1a237e', '#1b5e20')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np15 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np15\n\n\ncorrelation_edgeR_ANKRD35_genecount_RATIO\n\nNES_values &lt;- edgeR_ANKRD35_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- edgeR_ANKRD35_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  4,  1, \n  \"kegg_NES\",  7,  0, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#1a237e', '#1b5e20')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np16 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np16\n\n\ncorrelation_edgeR_ANKRD35_NES_RATIO\n\n# Script for correlation_limma_ANKRD35\ndata &lt;- correlation_limma_ANKRD35\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_limma_ANKRD35\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1455,  1180, \n  \"Abs(Cor)&gt;0.5\",  1307,  605, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#0d47a1', '#33691e')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np17 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np17\n\n\ncorrelation_limma_ANKRD35_genecount_RATIO\n\n\nNES_values &lt;- limma_ANKRD35_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- limma_ANKRD35_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  6,  10, \n  \"kegg_NES\",  6,  15, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#0d47a1', '#33691e')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np18 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np18\n\n\ncorrelation_limma_ANKRD35_NES_RATIO\n\n\n# Script for correlation_outRst_ANKRD35\ndata &lt;- correlation_outRst_ANKRD35\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_outRst_ANKRD35\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1756,  879, \n  \"Abs(Cor)&gt;0.5\",  1518,  393, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#01579b', '#827717')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np19 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np19\n\n\ncorrelation_outRst_ANKRD35_genecount_RATIO\n\nNES_values &lt;- outRst_ANKRD35_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- outRst_ANKRD35_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  4,  8, \n  \"kegg_NES\",  3,  14, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#01579b', '#827717')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np20 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      # limits = c(0, 10000),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np20\n\n\ncorrelation_outRst_ANKRD35_NES_RATIO\n\n\n15.3.1 ANKRD35_ALL\n\n\nANKRD35_ALL_RATIO\n\n\n\n15.3.2 ANKRD35_seprate\n\n\nANKRD35_seprate_RATIO"
  },
  {
    "objectID": "GeneCount and GseaNES.html#aloxe3",
    "href": "GeneCount and GseaNES.html#aloxe3",
    "title": "15  Comparison of TransPropy with Other Tool Packages Using GeneCount and GseaNES Data (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "15.4 ALOXE3",
    "text": "15.4 ALOXE3\n# Script for correlation_TransPropy_ALOXE3\ndata &lt;- correlation_TransPropy_ALOXE3\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_TransPropy_ALOXE3\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1159,  1476, \n  \"Abs(Cor)&gt;0.5\",  699,  502, \n)\n\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#4a148c', '#006064')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np21&lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np21\n\n\ncorrelation_TransPropy_ALOXE3_genecount_RATIO\n\nNES_values &lt;- TransPropy_ALOXE3_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- TransPropy_ALOXE3_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  5,  5, \n  \"kegg_NES\",  8,  2, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#4a148c', '#006064')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np22 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np22\n\n\ncorrelation_TransPropy_ALOXE3_NES_RATIO\n\n# Script for correlation_deseq2_ALOXE3\ndata &lt;- correlation_deseq2_ALOXE3\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_deseq2_ALOXE3\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1495,  1140, \n  \"Abs(Cor)&gt;0.5\",  1035,  292, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#311b92', '#004d40')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np23 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np23\n\n\ncorrelation_deseq2_ALOXE3_genecount_RATIO\n\nNES_values &lt;- deseq2_ALOXE3_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- deseq2_ALOXE3_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  8,  1, \n  \"kegg_NES\",  9,  0, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#311b92', '#004d40')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np24 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np24\n\n\ncorrelation_deseq2_ALOXE3_NES_RATIO\n\n# Script for correlation_edgeR_ALOXE3\ndata &lt;- correlation_edgeR_ALOXE3\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_edgeR_ALOXE3\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1258,  1377, \n  \"Abs(Cor)&gt;0.5\",  861,  282, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#1a237e', '#1b5e20')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np25 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np25\n\n\n\ncorrelation_edgeR_ALOXE3_genecount_RATIO\n\nNES_values &lt;- edgeR_ALOXE3_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- edgeR_ALOXE3_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  4,  0, \n  \"kegg_NES\",  7,  0, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#1a237e', '#1b5e20')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np26 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np26\n\n\ncorrelation_edgeR_ALOXE3_NES_RATIO\n\n# Script for correlation_limma_ALOXE3\ndata &lt;- correlation_limma_ALOXE3\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_limma_ALOXE3\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1454,  1181, \n  \"Abs(Cor)&gt;0.5\",  1129,  389, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#0d47a1', '#33691e')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np27 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np27\n\n\ncorrelation_limma_ALOXE3_genecount_RATIO\n\nNES_values &lt;- limma_ALOXE3_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- limma_ALOXE3_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  6,  10, \n  \"kegg_NES\",  6,  8, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#0d47a1', '#33691e')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np28 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np28\n\n\ncorrelation_limma_ALOXE3_NES_RATIO\n\n# Script for correlation_outRst_ALOXE3\ndata &lt;- correlation_outRst_ALOXE3\ntotal_positive &lt;- sum(data$cor &gt; 0)\ntotal_negative &lt;- sum(data$cor &lt; 0)\npositive_above_0_5 &lt;- sum(data$cor &gt; 0.5)\nnegative_below_minus_0_5 &lt;- sum(data$cor &lt; -0.5)\ncat(\"correlation_outRst_ALOXE3\\n\")\ncat(\"Total positive correlations:\", total_positive, \"\\n\")\ncat(\"Total negative correlations:\", total_negative, \"\\n\")\ncat(\"Positive correlations above 0.5:\", positive_above_0_5, \"\\n\")\ncat(\"Negative correlations below -0.5:\", negative_below_minus_0_5, \"\\n\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"AllCor\",  1765,  870, \n  \"Abs(Cor)&gt;0.5\",  1345,  218, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\n# Add whiteness\nwhite_ratio &lt;- 0.2  # 20% white\n# Define original colors\npal &lt;- c('#01579b', '#827717')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\n\np29 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\np29\n\n\ncorrelation_outRst_ALOXE3_genecount_RATIO\n\nNES_values &lt;- outRst_ALOXE3_hallmarks_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\nNES_values &lt;- outRst_ALOXE3_kegg_y@result[ ,\"NES\"]\n# Calculate the number of positive and negative values\npositive_count &lt;- sum(NES_values &gt; 0)\nnegative_count &lt;- sum(NES_values &lt; 0)\n# Print results\ncat(\"Number of positive values:\", positive_count, \"\\n\")\ncat(\"Number of negative values:\", negative_count, \"\\n\")\n\ndata = tribble(\n  ~Methods,  ~PositiveRatio,  ~NegativeRatio,\n  \"hallmarks_NES\",  5,  7, \n  \"kegg_NES\",  7,  14, \n)\ndata %&gt;% \n  mutate(id = 1:n()) %&gt;% \n  pivot_longer(-c(id, Methods), names_to = \"shade\", values_to = \"value\") -&gt; df\n\n# Plotting\nwhite_ratio &lt;- 0.4\npal &lt;- c('#01579b', '#827717')\npal &lt;- as.vector(sapply(pal, add_white, white_ratio = white_ratio))\np30 &lt;- df %&gt;% \n  mutate(prop = round(value/sum(value)*100, 2), .by = Methods) %&gt;% \n  ggplot(aes(x=id, y=prop, fill=shade)) +\n  geom_stratum(aes(stratum=shade), color=NA, width = 0.65) +\n  geom_flow(aes(alluvium=shade), knot.pos = 0.25, width = 0.65, alpha=0.5) +\n  geom_alluvium(aes(alluvium=shade),\n                knot.pos = 0.25, color=\"#f4e2de\", width=0.65, linewidth=0.5, fill=NA, alpha=1) +\n  scale_fill_manual(values = pal) +\n  scale_x_continuous(expand = c(0, 0), breaks = 1:2, labels = data$Methods, name = NULL) +\n  scale_y_continuous(expand = c(0, 0),\n                      name = NULL) +\n  geom_hline(yintercept = c(50),\n              linewidth = 3,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  geom_hline(yintercept = c(25,75),\n              linewidth = 1.5,\n              color = 'white',\n              lty = 'dashed',\n              alpha = 0.5)+\n  labs(title = \"Percentage Stacked Line Bar Chart\") +\n  theme_minimal() +\n  theme(plot.background = element_rect(fill='white', color='white'),\n        panel.grid = element_blank())\n\np30\n\n\ncorrelation_outRst_ALOXE3_NES_RATIO\n\n\n15.4.1 ALOXE3_ALL\n\n\nALOXE3_ALL_RATIO\n\n\n\n15.4.2 ALOXE3_seprate\n\n\nALOXE3_seprate_RATIO"
  },
  {
    "objectID": "GeneCount and GseaNES.html#all-percentage-stacked-line-bar",
    "href": "GeneCount and GseaNES.html#all-percentage-stacked-line-bar",
    "title": "15  Comparison of TransPropy with Other Tool Packages Using GeneCount and GseaNES Data (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "15.5 ALL Percentage Stacked Line Bar",
    "text": "15.5 ALL Percentage Stacked Line Bar\n\n\nALL Percentage Stacked Line Bar"
  },
  {
    "objectID": "GeneCount and GseaNES.html#discussion",
    "href": "GeneCount and GseaNES.html#discussion",
    "title": "15  Comparison of TransPropy with Other Tool Packages Using GeneCount and GseaNES Data (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "15.6 Discussion",
    "text": "15.6 Discussion\n\ndeseq2/edgeRTransPropylimma/outRst\n\n\nIn both methods, although the ratio of positively and negatively correlated genes is 0.5 for all genes, when the absolute correlation value exceeds 0.5, the proportion of positively correlated genes starts to exceed that of negatively correlated genes. This indicates that with stronger correlations, the selection bias of the methods changes significantly. This trend is further amplified in pathway enrichment, with the number of activated pathways far exceeding that of inhibited pathways, sometimes with no inhibited pathways at all, which differs significantly from the trend observed in the gene correlation ratios.\n\n\nTransPropy is the only method among the five that achieves a near 0.5 ratio for both positively and negatively correlated genes, as well as for genes with absolute correlation values greater than 0.5, while maintaining the smallest fluctuation range. It also shows the most consistent trend between the proportions of activated and inhibited pathways and the proportions of positively and negatively correlated genes, remaining relatively close to 0.5. This indicates that TransPropy can balance the identification of various characteristics (such as positive and negative gene correlations and pathway activation and inhibition) both at the gene level and the pathway level (gene sets). This balance not only prevents biases and non-biological characteristics in results caused by data imbalance or parameter assumptions of the algorithm but also comprehensively considers feature performance and their interactions. (Better)\n\n\nIn both methods, the proportion of positively correlated genes is greater than that of negatively correlated genes. This phenomenon is especially evident in genes with absolute correlation values greater than 0.5, indicating that for features with stronger correlations, both methods further amplify their selection bias. However, this trend is reversed in pathway enrichment, where the number of activated pathways is less than that of inhibited pathways. In the RST method, the number of activated pathways is particularly small, which significantly differs from the trend observed in the gene correlation ratios."
  },
  {
    "objectID": "Seprate All GSEA.html#cfd",
    "href": "Seprate All GSEA.html#cfd",
    "title": "16  Comparison of TransPropy with Other Tool Packages Using Seprate All GSEA (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "16.1 CFD",
    "text": "16.1 CFD\n\n16.1.1 TransPropy HALLMARKS\nprint(TransPropy_CFD_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Xenobiotic Metabolism\",\n              \"Kras Signaling Dn\",\n              \"Myogenesis\",\n              \"Allograft Rejection\",  \n              \"Glycolysis\",\n              \"Spermatogenesis\",\n              \"Mitotic Spindle\",\n              \"E2f Targets\",          \n              \"G2m Checkpoint\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = TransPropy_CFD_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00838f\", \"white\", \"#6a1b9a\"), \n          newHtCol = c(\"#6a1b9a\", \"white\", \"#00838f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\nTransPropy_CFD_hallmarks\n\n\n16.1.1.1 Show the top one (NES) pathway gene\ncore &lt;- TransPropy_CFD_hallmarks_y@result[TransPropy_CFD_hallmarks_y@result$ID == \"Xenobiotic Metabolism\", \"core_enrichment\"]\nlength(core) # One vector composed of all core genes, separated by '/'\ncore\n# Split the core into a vector of individual genes:\ncore_genes &lt;- str_split(core, '/')[[1]]\ncore_genes\n# 2.3—Mark the candidate genes of interest in the standard GSEA enrichment result plot:\n\ngseaNb(\n  object = TransPropy_CFD_hallmarks_y,\n  geneSetID = \"Xenobiotic Metabolism\",\n  subPlot = 3,\n  addPval = TRUE,\n  pvalX = 0.2,\n  pvalY = 0,\n  lineSize = 3.8,\n  curveCol = rev(c(\"#6a1b9a\", \"#00838f\")),\n  htCol = rev(c(\"#6a1b9a\", \"#00838f\")), \n  rankCol = rev(c(\"#6a1b9a\", \"white\", \"#00838f\")),\n  addGene = core_genes,\n  #kegg = TRUE,\n  geneCol = 'grey40',\n  rmSegment = TRUE # Remove red line\n)\n\n\nTransPropy_CFD_hallmarks_y_topone (NES)\n\n\n\n\n16.1.2 TransPropy KEGG\nprint(TransPropy_CFD_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Metabolism Of Xenobiotics By Cytochrome P450\",\n              \"Drug Metabolism Cytochrome P450\",             \n              \"Retinol Metabolism\",\n              \"Arachidonic Acid Metabolism\",                 \n              \"Calcium Signaling Pathway\",\n              \"Ppar Signaling Pathway\",                      \n              \"Vascular Smooth Muscle Contraction\",\n              \"Glycolysis Gluconeogenesis\",                  \n              \"Endocytosis\",\n              \"Type I Diabetes Mellitus\",                    \n              \"Hematopoietic Cell Lineage\",\n              \"Graft Versus Host Disease\",                   \n              \"Leishmania Infection\",\n              \"Cell Cycle\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = TransPropy_CFD_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00838f\", \"white\", \"#6a1b9a\"), \n          newHtCol = c(\"#6a1b9a\", \"white\", \"#00838f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\nTransPropy_CFD_kegg\n\n\n\n16.1.3 deseq2 HALLMARKS\nprint(deseq2_CFD_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n              \"P53 Pathway\",\n              \"Estrogen Response Early\",\n              \"Kras Signaling Dn\", \n              \"Apical Junction\", \n              \"Myogenesis\",             \n              \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = deseq2_CFD_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00695c\", \"white\", \"#4527a0\"), \n          newHtCol = c(\"#4527a0\", \"white\", \"#00695c\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\ndeseq2_CFD_hallmarks\n\n\n\n16.1.4 deseq2 KEGG\nprint(deseq2_CFD_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Arachidonic Acid Metabolism\",\n              \"Mapk Signaling Pathway\",                      \n              \"Drug Metabolism Cytochrome P450\",\n              \"Metabolism Of Xenobiotics By Cytochrome P450\",\n              \"Steroid Hormone Biosynthesis\",\n              \"Linoleic Acid Metabolism\",                    \n              \"Gnrh Signaling Pathway\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = deseq2_CFD_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00695c\", \"white\", \"#4527a0\"), \n          newHtCol = c(\"#4527a0\", \"white\", \"#00695c\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\ndeseq2_CFD_kegg\n\n\n\n16.1.5 edgeR HALLMARKS\nprint(edgeR_CFD_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n              \"Kras Signaling Dn\",\n              \"Apical Junction\",\n              \"Estrogen Response Early\",\n              \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = edgeR_CFD_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#2e7d32\", \"white\", \"#283593\"), \n          newHtCol = c(\"#283593\", \"white\", \"#2e7d32\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\nedgeR_CFD_hallmarks\n\n\n\n16.1.6 edgeR KEGG\n\nprint(edgeR_CFD_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Arachidonic Acid Metabolism\",\n              \"Drug Metabolism Cytochrome P450\",\n              \"Metabolism Of Xenobiotics By Cytochrome P450\",\n              \"Mapk Signaling Pathway\",\n              \"Steroid Hormone Biosynthesis\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = edgeR_CFD_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#2e7d32\", \"white\", \"#283593\"), \n          newHtCol = c(\"#283593\", \"white\", \"#2e7d32\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\nedgeR_CFD_kegg\n\n\n\n16.1.7 limma HALLMARKS\nprint(limma_CFD_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n              \"Adipogenesis\",\n              \"P53 Pathway\",              \n              \"Myogenesis\",\n              \"Apical Junction\",\n              \"Mtorc1 Signaling\",         \n              \"Complement\",\n              \"Spermatogenesis\",\n              \"Inflammatory Response\",    \n              \"Interferon Gamma Response\",\n              \"Allograft Rejection\",\n              \"E2f Targets\",              \n              \"G2m Checkpoint\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = limma_CFD_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#558b2f\", \"white\", \"#1565c0\"), \n          newHtCol = c(\"#1565c0\", \"white\", \"#558b2f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\nlimma_CFD_hallmarks\n\n\n\n16.1.8 limma KEGG\nprint(limma_CFD_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Arachidonic Acid Metabolism\",\n              \"Steroid Hormone Biosynthesis\",\n              \"Metabolism Of Xenobiotics By Cytochrome P450\",\n              \"Chemokine Signaling Pathway\",\n              \"Systemic Lupus Erythematosus\",\n              \"Primary Immunodeficiency\",\n              \"Leishmania Infection\",\n              \"Hematopoietic Cell Lineage\",\n              \"Allograft Rejection\",\n              \"Graft Versus Host Disease\",\n              \"Autoimmune Thyroid Disease\",\n              \"Type I Diabetes Mellitus\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = limma_CFD_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#558b2f\", \"white\", \"#1565c0\"), \n          newHtCol = c(\"#1565c0\", \"white\", \"#558b2f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\n\nlimma_CFD_kegg\n\n\n\n16.1.9 outRst HALLMARKS\nprint(outRst_CFD_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n              \"Il2 Stat5 Signaling\",\n              \"Inflammatory Response\",\n              \"Complement\",\n              \"Interferon Alpha Response\",\n              \"Il6 Jak Stat3 Signaling\",\n              \"Interferon Gamma Response\",\n              \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = outRst_CFD_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#9e9d24\", \"white\", \"#0277bd\"), \n          newHtCol = c(\"#0277bd\", \"white\", \"#9e9d24\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\noutRst_CFD_hallmarks\n\n\n\n16.1.10 outRst KEGG\nprint(outRst_CFD_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Steroid Hormone Biosynthesis\",\n              \"Toll Like Receptor Signaling Pathway\",     \n              \"Leishmania Infection\",\n              \"Antigen Processing And Presentation\",      \n              \"Cell Adhesion Molecules Cams\",\n              \"Hematopoietic Cell Lineage\",               \n              \"Natural Killer Cell Mediated Cytotoxicity\",\n              \"Autoimmune Thyroid Disease\",               \n              \"Systemic Lupus Erythematosus\",\n              \"Chemokine Signaling Pathway\",              \n              \"Allograft Rejection\",\n              \"Graft Versus Host Disease\",                \n              \"Type I Diabetes Mellitus\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = outRst_CFD_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#9e9d24\", \"white\", \"#0277bd\"), \n          newHtCol = c(\"#0277bd\", \"white\", \"#9e9d24\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\noutRst_CFD_kegg"
  },
  {
    "objectID": "Seprate All GSEA.html#ankrd35",
    "href": "Seprate All GSEA.html#ankrd35",
    "title": "16  Comparison of TransPropy with Other Tool Packages Using Seprate All GSEA (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "16.2 ANKRD35",
    "text": "16.2 ANKRD35\n\n16.2.1 TransPropy HALLMARKS\nprint(TransPropy_ANKRD35_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Xenobiotic Metabolism\",\n                          \"Kras Signaling Dn\",\n                          \"Myogenesis\",               \n                          \"Apical Junction\",\n                          \"Tnfa Signaling Via Nfkb\",\n                          \"Il2 Stat5 Signaling\",      \n                          \"Spermatogenesis\",\n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\",      \n                          \"Mitotic Spindle\",\n                          \"E2f Targets\",\n                          \"G2m Checkpoint\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = TransPropy_ANKRD35_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00838f\", \"white\", \"#6a1b9a\"), \n          newHtCol = c(\"#6a1b9a\", \"white\", \"#00838f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\nTransPropy_ANKRD35_hallmarks\n\n\n\n16.2.2 TransPropy KEGG\nprint(TransPropy_ANKRD35_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Arachidonic Acid Metabolism\",                 \n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Retinol Metabolism\",                          \n                          \"Endocytosis\",\n                          \"Calcium Signaling Pathway\",                   \n                          \"Mapk Signaling Pathway\",\n                          \"Vascular Smooth Muscle Contraction\",          \n                          \"Ppar Signaling Pathway\",\n                          \"Type I Diabetes Mellitus\",                    \n                          \"Graft Versus Host Disease\",\n                          \"Leishmania Infection\",                        \n                          \"Hematopoietic Cell Lineage\",\n                          \"Cell Cycle\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = TransPropy_ANKRD35_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00838f\", \"white\", \"#6a1b9a\"), \n          newHtCol = c(\"#6a1b9a\", \"white\", \"#00838f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\nTransPropy_ANKRD35_kegg\n\n\n\n16.2.3 deseq2 HALLMARKS\nprint(deseq2_ANKRD35_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n                          \"Apical Junction\",\n                          \"Kras Signaling Dn\",      \n                          \"P53 Pathway\",\n                          \"Estrogen Response Early\", \n                          \"Myogenesis\",             \n                          \"Hypoxia\",\n                          \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = deseq2_ANKRD35_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00695c\", \"white\", \"#4527a0\"), \n          newHtCol = c(\"#4527a0\", \"white\", \"#00695c\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\ndeseq2_ANKRD35_hallmarks\n\n\n\n16.2.4 deseq2 KEGG\nprint(deseq2_ANKRD35_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Mapk Signaling Pathway\",                      \n                          \"Gnrh Signaling Pathway\",\n                          \"Linoleic Acid Metabolism\",                    \n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",             \n                          \"Steroid Hormone Biosynthesis\",\n                          \"Chemokine Signaling Pathway\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = deseq2_ANKRD35_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00695c\", \"white\", \"#4527a0\"), \n          newHtCol = c(\"#4527a0\", \"white\", \"#00695c\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\ndeseq2_ANKRD35_kegg\n\n\n\n16.2.5 edgeR HALLMARKS\nprint(edgeR_ANKRD35_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n              \"Kras Signaling Dn\",\n              \"Apical Junction\",\n              \"Estrogen Response Early\",\n              \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = edgeR_ANKRD35_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#2e7d32\", \"white\", \"#283593\"), \n          newHtCol = c(\"#283593\", \"white\", \"#2e7d32\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\nedgeR_ANKRD35_hallmarks\n\n\n\n16.2.6 edgeR KEGG\n\nprint(edgeR_ANKRD35_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Mapk Signaling Pathway\",                      \n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",             \n                          \"Steroid Hormone Biosynthesis\",\n                          \"Starch And Sucrose Metabolism\",               \n                          \"Retinol Metabolism\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = edgeR_ANKRD35_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#2e7d32\", \"white\", \"#283593\"), \n          newHtCol = c(\"#283593\", \"white\", \"#2e7d32\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\nedgeR_ANKRD35_kegg\n\n\n\n16.2.7 limma HALLMARKS\nprint(limma_ANKRD35_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"P53 Pathway\",\n                          \"Estrogen Response Late\",\n                          \"Estrogen Response Early\", \n                          \"Apical Junction\",\n                          \"Myogenesis\",\n                          \"Kras Signaling Dn\",        \n                          \"Il2 Stat5 Signaling\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Interferon Alpha Response\",\n                          \"Spermatogenesis\",\n                          \"Complement\",\n                          \"Inflammatory Response\",    \n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\",\n                          \"E2f Targets\",              \n                          \"G2m Checkpoint\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = limma_ANKRD35_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#558b2f\", \"white\", \"#1565c0\"), \n          newHtCol = c(\"#1565c0\", \"white\", \"#558b2f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\nlimma_ANKRD35_hallmarks\n\n\n\n16.2.8 limma KEGG\nprint(limma_ANKRD35_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Gnrh Signaling Pathway\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Linoleic Acid Metabolism\",                    \n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Arachidonic Acid Metabolism\",                 \n                          \"Natural Killer Cell Mediated Cytotoxicity\",\n                          \"Viral Myocarditis\",                           \n                          \"Cytokine Cytokine Receptor Interaction\",\n                          \"Antigen Processing And Presentation\",         \n                          \"Cell Adhesion Molecules Cams\",\n                          \"Toll Like Receptor Signaling Pathway\",        \n                          \"Primary Immunodeficiency\",\n                          \"Leishmania Infection\",                        \n                          \"Systemic Lupus Erythematosus\",\n                          \"Chemokine Signaling Pathway\",                 \n                          \"Hematopoietic Cell Lineage\",\n                          \"Allograft Rejection\",                         \n                          \"Graft Versus Host Disease\",\n                          \"Autoimmune Thyroid Disease\",                 \n                          \"Type I Diabetes Mellitus\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = limma_ANKRD35_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#558b2f\", \"white\", \"#1565c0\"), \n          newHtCol = c(\"#1565c0\", \"white\", \"#558b2f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\n\nlimma_ANKRD35_kegg\n\n\n\n16.2.9 outRst HALLMARKS\nprint(outRst_ANKRD35_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n                          \"P53 Pathway\",               \n                          \"Apical Junction\",          \n                          \"Estrogen Response Early\",\n                          \"Apoptosis\",\n                          \"Il2 Stat5 Signaling\",      \n                          \"Inflammatory Response\",\n                          \"Complement\",\n                          \"Interferon Alpha Response\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = outRst_ANKRD35_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#9e9d24\", \"white\", \"#0277bd\"), \n          newHtCol = c(\"#0277bd\", \"white\", \"#9e9d24\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\noutRst_ANKRD35_hallmarks\n\n\n\n16.2.10 outRst KEGG\nprint(outRst_ANKRD35_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Gnrh Signaling Pathway\",\n                          \"Arachidonic Acid Metabolism\",              \n                          \"Mapk Signaling Pathway\",\n                          \"Cytokine Cytokine Receptor Interaction\",   \n                          \"Viral Myocarditis\",\n                          \"Leishmania Infection\",                     \n                          \"Antigen Processing And Presentation\",\n                          \"Toll Like Receptor Signaling Pathway\",     \n                          \"Cell Adhesion Molecules Cams\",\n                          \"Natural Killer Cell Mediated Cytotoxicity\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Autoimmune Thyroid Disease\",               \n                          \"Systemic Lupus Erythematosus\",\n                          \"Chemokine Signaling Pathway\",              \n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",                \n                          \"Type I Diabetes Mellitus\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = outRst_ANKRD35_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#9e9d24\", \"white\", \"#0277bd\"), \n          newHtCol = c(\"#0277bd\", \"white\", \"#9e9d24\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\noutRst_ANKRD35_kegg"
  },
  {
    "objectID": "Seprate All GSEA.html#aloxe3",
    "href": "Seprate All GSEA.html#aloxe3",
    "title": "16  Comparison of TransPropy with Other Tool Packages Using Seprate All GSEA (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "16.3 ALOXE3",
    "text": "16.3 ALOXE3\n\n16.3.1 TransPropy HALLMARKS\nprint(TransPropy_ALOXE3_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Kras Signaling Dn\",\n                          \"Estrogen Response Early\",\n                          \"Xenobiotic Metabolism\",\n                          \"Apical Junction\",\n                          \"Tnfa Signaling Via Nfkb\",\n                          \"Epithelial Mesenchymal Transition\",\n                          \"Spermatogenesis\",\n                          \"Mitotic Spindle\",\n                          \"E2f Targets\",\n                          \"G2m Checkpoint\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = TransPropy_ALOXE3_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00838f\", \"white\", \"#6a1b9a\"), \n          newHtCol = c(\"#6a1b9a\", \"white\", \"#00838f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\nTransPropy_ALOXE3_hallmarks\n\n\n\n16.3.2 TransPropy KEGG\nprint(TransPropy_ALOXE3_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Endocytosis\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Retinol Metabolism\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Ppar Signaling Pathway\",\n                          \"Calcium Signaling Pathway\",\n                          \"Vascular Smooth Muscle Contraction\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Cell Cycle\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = TransPropy_ALOXE3_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00838f\", \"white\", \"#6a1b9a\"), \n          newHtCol = c(\"#6a1b9a\", \"white\", \"#00838f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\nTransPropy_ALOXE3_kegg\n\n\n\n16.3.3 deseq2 HALLMARKS\nprint(deseq2_ALOXE3_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n                          \"Apical Junction\",\n                          \"Kras Signaling Dn\",\n                          \"Estrogen Response Early\",\n                          \"Hypoxia\",\n                          \"P53 Pathway\",\n                          \"Myogenesis\",\n                          \"Kras Signaling Up\",\n                          \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = deseq2_ALOXE3_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00695c\", \"white\", \"#4527a0\"), \n          newHtCol = c(\"#4527a0\", \"white\", \"#00695c\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\ndeseq2_ALOXE3_hallmarks\n\n\n\n16.3.4 deseq2 KEGG\nprint(deseq2_ALOXE3_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Mapk Signaling Pathway\",\n                          \"Arachidonic Acid Metabolism\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Linoleic Acid Metabolism\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Gnrh Signaling Pathway\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Retinol Metabolism\",\n                          \"Pathways In Cancer\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = deseq2_ALOXE3_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#00695c\", \"white\", \"#4527a0\"), \n          newHtCol = c(\"#4527a0\", \"white\", \"#00695c\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\ndeseq2_ALOXE3_kegg\n\n\n\n16.3.5 edgeR HALLMARKS\nprint(edgeR_ALOXE3_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Apical Junction\",\n                          \"Estrogen Response Late\",\n                          \"Kras Signaling Dn\",\n                          \"Estrogen Response Early\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = edgeR_ALOXE3_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#2e7d32\", \"white\", \"#283593\"), \n          newHtCol = c(\"#283593\", \"white\", \"#2e7d32\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\nedgeR_ALOXE3_hallmarks\n\n\n\n16.3.6 edgeR KEGG\n\nprint(edgeR_ALOXE3_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Mapk Signaling Pathway\",\n                          \"Arachidonic Acid Metabolism\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Steroid Hormone Biosynthesis\",\n                          \"Retinol Metabolism\",\n                          \"Starch And Sucrose Metabolism\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = edgeR_ALOXE3_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#2e7d32\", \"white\", \"#283593\"), \n          newHtCol = c(\"#283593\", \"white\", \"#2e7d32\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\nedgeR_ALOXE3_kegg\n\n\n\n16.3.7 limma HALLMARKS\nprint(limma_ALOXE3_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"P53 Pathway\",\n                          \"Kras Signaling Dn\",\n                          \"Estrogen Response Early\",\n                          \"Estrogen Response Late\",\n                          \"Apical Junction\",\n                          \"Myogenesis\",\n                          \"Complement\",\n                          \"Epithelial Mesenchymal Transition\",\n                          \"Interferon Alpha Response\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Inflammatory Response\",\n                          \"Spermatogenesis\",\n                          \"Allograft Rejection\",\n                          \"Interferon Gamma Response\",\n                          \"E2f Targets\",\n                          \"G2m Checkpoint\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = limma_ALOXE3_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#558b2f\", \"white\", \"#1565c0\"), \n          newHtCol = c(\"#1565c0\", \"white\", \"#558b2f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\nlimma_ALOXE3_hallmarks\n\n\n\n16.3.8 limma KEGG\nprint(limma_ALOXE3_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Retinol Metabolism\",\n                          \"Linoleic Acid Metabolism\",\n                          \"Gnrh Signaling Pathway\",\n                          \"Metabolism Of Xenobiotics By Cytochrome P450\",\n                          \"Drug Metabolism Cytochrome P450\",\n                          \"Arachidonic Acid Metabolism\",\n                          \"Leishmania Infection\",\n                          \"Systemic Lupus Erythematosus\",\n                          \"Primary Immunodeficiency\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",\n                          \"Autoimmune Thyroid Disease\",\n                          \"Type I Diabetes Mellitus\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = limma_ALOXE3_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#558b2f\", \"white\", \"#1565c0\"), \n          newHtCol = c(\"#1565c0\", \"white\", \"#558b2f\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\n\nlimma_ALOXE3_kegg\n\n\n\n16.3.9 outRst HALLMARKS\nprint(outRst_ALOXE3_hallmarks_y@result$ID)\n\n# plot\ngeneSetID = c(\"Estrogen Response Late\",\n                          \"P53 Pathway\",\n                          \"Apical Junction\",\n                          \"Estrogen Response Early\",\n                          \"Kras Signaling Dn\",\n                          \"Il2 Stat5 Signaling\",\n                          \"Complement\",\n                          \"Inflammatory Response\",\n                          \"Interferon Alpha Response\",\n                          \"Il6 Jak Stat3 Signaling\",\n                          \"Interferon Gamma Response\",\n                          \"Allograft Rejection\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = outRst_ALOXE3_hallmarks_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#9e9d24\", \"white\", \"#0277bd\"), \n          newHtCol = c(\"#0277bd\", \"white\", \"#9e9d24\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\n\n\n\noutRst_ALOXE3_hallmarks\n\n\n\n16.3.10 outRst KEGG\nprint(outRst_ALOXE3_kegg_y@result$ID)\n\n# plot\ngeneSetID = c(\"Arachidonic Acid Metabolism\",\n                          \"Gnrh Signaling Pathway\",\n                          \"Retinol Metabolism\",\n                          \"Wnt Signaling Pathway\",\n                          \"Long Term Depression\",\n                          \"Mapk Signaling Pathway\",\n                          \"Pathways In Cancer\",\n                          \"Cell Adhesion Molecules Cams\",\n                          \"Viral Myocarditis\",\n                          \"Complement And Coagulation Cascades\",\n                          \"Leishmania Infection\",\n                          \"Antigen Processing And Presentation\",\n                          \"Toll Like Receptor Signaling Pathway\",\n                          \"Natural Killer Cell Mediated Cytotoxicity\",\n                          \"Hematopoietic Cell Lineage\",\n                          \"Autoimmune Thyroid Disease\",\n                          \"Systemic Lupus Erythematosus\",\n                          \"Chemokine Signaling Pathway\",\n                          \"Allograft Rejection\",\n                          \"Graft Versus Host Disease\",\n                          \"Type I Diabetes Mellitus\")\n\nlapply(geneSetID, function(x){\n  gseaNb(object = outRst_ALOXE3_kegg_y,\n          geneSetID = x,\n          newGsea = T,\n          addPval = T,\n          pvalX = 0.02,pvalY = 0.1,\n          pCol = 'black',\n          pHjust = 0,\n          subPlot = 2,newCurveCol = c(\"#9e9d24\", \"white\", \"#0277bd\"), \n          newHtCol = c(\"#0277bd\", \"white\", \"#9e9d24\"))\n}) -&gt; gseaList1\n\n# combine\ncowplot::plot_grid(plotlist = gseaList1,ncol = 2,align = 'hv')\n\n\noutRst_ALOXE3_kegg\n\n\n\n\n\n\n\nTip\n\n\n\n\nFor detailed information on all pathways for each method, please refer to this section (scripts provided down to the individual gene level, such as 16.1.1.1).\n\n\n\n\nAim\n\n\nCheck if there are individual genes with highly significant differences that influence pathway-level results, creating the illusion of similarly significant activation or inhibition."
  },
  {
    "objectID": "VennNetwork core enrichment.html#r",
    "href": "VennNetwork core enrichment.html#r",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.1 R",
    "text": "17.1 R\nlibrary(readr)\nlibrary(TransProR)\nlibrary(dplyr)\nlibrary(rlang)\nlibrary(linkET)\nlibrary(funkyheatmap)\nlibrary(tidyverse)\nlibrary(RColorBrewer)\nlibrary(ggalluvial)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(ggridges)\nlibrary(GSVA)\nlibrary(fgsea) \nlibrary(clusterProfiler)\nlibrary(enrichplot)\nlibrary(MetaTrx)\nlibrary(GseaVis)\nlibrary(stringr)"
  },
  {
    "objectID": "VennNetwork core enrichment.html#python",
    "href": "VennNetwork core enrichment.html#python",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.2 Python",
    "text": "17.2 Python\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nmatplotlib.use('TkAgg') \nimport matplotlib.pyplot as plt\nfrom haplot.chart import VennNetworkPlot"
  },
  {
    "objectID": "VennNetwork core enrichment.html#cfd_hallmarks",
    "href": "VennNetwork core enrichment.html#cfd_hallmarks",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.3 CFD_hallmarks",
    "text": "17.3 CFD_hallmarks\n# r\n# Example: Process the core enrichment genes from TransPropy_CFD_hallmarks_y\nTransPropy_CFD_hallmarks_core_enrichment &lt;- TransPropy_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_CFD_hallmarks_core_enrichment, correlation_TransPropy_CFD)\n\n# Process the core enrichment genes from deseq2_CFD_hallmarks_y\ndeseq2_CFD_hallmarks_core_enrichment &lt;- deseq2_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_CFD_hallmarks_core_enrichment, correlation_deseq2_CFD)\n\n# Process the core enrichment genes from edgeR_CFD_hallmarks_y\nedgeR_CFD_hallmarks_core_enrichment &lt;- edgeR_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_CFD_hallmarks_core_enrichment, correlation_edgeR_CFD)\n\n# Process the core enrichment genes from limma_CFD_hallmarks_y\nlimma_CFD_hallmarks_core_enrichment &lt;- limma_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_CFD_hallmarks_core_enrichment, correlation_limma_CFD)\n\n# Process the core enrichment genes from outRst_CFD_hallmarks_y\noutRst_CFD_hallmarks_core_enrichment &lt;- outRst_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_CFD_hallmarks_core_enrichment, correlation_outRst_CFD)\n\n&gt; process_core_enrichment(TransPropy_CFD_hallmarks_core_enrichment, correlation_TransPropy_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"AURKB\"    \"MYBL2\"    \"CDC20\"    \"KIF2C\"    \"UBE2C\"    \"NEK2\"     \"STMN1\"    \"BIRC5\"    \"BUB1\"    \n [10] \"RAD54L\"   \"CENPA\"    \"CDC45\"    \"PTTG1\"    \"GINS2\"    \"CDKN3\"    \"SLC7A5\"   \"KIF4A\"    \"NDC80\"   \n [19] \"AURKA\"    \"CENPF\"    \"CDC25A\"   \"EXO1\"     \"CDC6\"     \"CENPM\"    \"KIF18B\"   \"ASF1B\"    \"SPC24\"   \n [28] \"DLGAP5\"   \"GINS1\"    \"GINS4\"    \"TRIP13\"   \"UBE2T\"    \"AKR1C2\"   \"ITIH4\"    \"CES1\"     \"RBP4\"    \n [37] \"ALDH2\"    \"AKR1C3\"   \"CYP2E1\"   \"ETS2\"     \"HSD11B1\"  \"FETUB\"    \"CYP2C18\"  \"ACSM1\"    \"ARG1\"    \n [46] \"CFB\"      \"AQP9\"     \"ALDH3A1\"  \"CDA\"      \"AOX1\"     \"CYP4F2\"   \"ABCC3\"    \"ADH1C\"    \"NCAPH\"   \n [55] \"EDN1\"     \"CALML5\"   \"ZBTB16\"   \"FGF22\"    \"ACTC1\"    \"ATP6V1B1\" \"EDAR\"     \"FGFR3\"    \"EDN2\"    \n [64] \"ALOX12B\"  \"CKM\"      \"AKR1B10\"  \"ABCB11\"   \"SERPINB2\" \"TG\"       \"MYH7\"     \"CLDN16\"   \"CFD\"     \n [73] \"DES\"      \"FHL1\"     \"ACTA1\"    \"ABLIM1\"   \"ANKRD2\"   \"GADD45B\"  \"SDC3\"     \"KIF20A\"   \"CHST6\"   \n [82] \"KLRD1\"    \"HLA-DOA\"  \"HLA-DRA\"  \"CD74\"     \"NLRP3\"    \"SPI1\"     \"CD96\"     \"HLA-DQA1\" \"CD4\"     \n [91] \"WAS\"      \"IL2RG\"    \"CD3D\"     \"CD3E\"     \"ITGB2\"    \"ITGAL\"    \"LTB\"      \"ST8SIA4\"  \"CD28\"    \n[100] \"CD7\"      \"MAP4K1\"   \"CCR5\"     \"IRF4\"     \"CXCL13\"   \"IL12RB1\"  \"CCR1\"     \"CXCR3\"    \"CCL5\"    \n[109] \"CRTAM\"    \"SIT1\"     \"CTSS\"     \"IGSF6\"    \"FASLG\"    \"MMP9\"     \"CD79A\"    \"GPR65\"    \"HLA-G\"   \n[118] \"IL27RA\"   \"CDKN2A\"  \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 150 \nAll Number of genes with core enrichment (unique): 119 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 48 \nNumber of genes with negative correlation (notunique): 102 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 45 \nNumber of genes with negative correlation (unique): 74 \n\n\n&gt; process_core_enrichment(deseq2_CFD_hallmarks_core_enrichment, correlation_deseq2_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"SCNN1A\"   \"CLIC3\"    \"KLF4\"     \"KRT19\"    \"PCP4\"     \"HMGCS2\"   \"TRIM29\"   \"TPSAB1\"   \"KLK11\"   \n[10] \"PKP3\"     \"PERP\"     \"OVOL2\"    \"GJB3\"     \"SFN\"      \"XBP1\"     \"FGFR3\"    \"RAPGEFL1\" \"SULT2B1\" \n[19] \"SOX10\"    \"NPY4R\"    \"CALML5\"   \"CLDN8\"    \"KRT1\"     \"PRODH\"    \"ZBTB16\"   \"KRT15\"    \"KLK7\"    \n[28] \"LGALS7\"   \"TGM1\"     \"KLK8\"     \"KRT5\"     \"FGF22\"    \"PKP1\"     \"HSD11B2\"  \"EDN2\"     \"NOS1\"    \n[37] \"ALOX12B\"  \"LYPD3\"    \"CLCA2\"    \"SERPINB5\" \"GLS2\"     \"TP63\"     \"AQP3\"     \"ESRP2\"    \"EGFR\"    \n[46] \"KRT31\"    \"CDSN\"     \"CLDN4\"    \"PPP2R2C\"  \"DSC1\"     \"DSC3\"     \"COL17A1\"  \"GRB7\"     \"CFD\"     \n[55] \"PGAM2\"    \"TNNT2\"    \"KLF5\"     \"MYL2\"     \"VIPR1\"    \"SPDEF\"    \"MYL7\"     \"CD8A\"     \"CD3D\"    \n[64] \"CD3E\"     \"CD3G\"     \"PRF1\"     \"CD2\"      \"GZMA\"     \"CCR5\"     \"CCL4\"     \"CXCL13\"   \"IL12RB1\" \n[73] \"CXCR3\"    \"CCL5\"     \"CXCL9\"    \"GZMB\"     \"IFNG\"     \"FASLG\"    \"MMP9\"     \"CD79A\"    \"NCR1\"    \n[82] \"HLA-G\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 100 \nAll Number of genes with core enrichment (unique): 82 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 79 \nNumber of genes with negative correlation (notunique): 21 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 61 \nNumber of genes with negative correlation (unique): 21 \n\n\n&gt; process_core_enrichment(edgeR_CFD_hallmarks_core_enrichment, correlation_edgeR_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"SCNN1A\"   \"KLF4\"     \"PCP4\"     \"HMGCS2\"   \"TRIM29\"   \"TPSAB1\"   \"KLK11\"    \"PKP3\"     \"OVOL2\"   \n[10] \"GJB3\"     \"XBP1\"     \"FGFR3\"    \"RAPGEFL1\" \"SULT2B1\"  \"SOX10\"    \"NPY4R\"    \"CALML5\"   \"CLDN8\"   \n[19] \"KRT1\"     \"PRODH\"    \"ZBTB16\"   \"KRT15\"    \"KLK7\"     \"LGALS7\"   \"TGM1\"     \"KLK8\"     \"KRT5\"    \n[28] \"FGF22\"    \"PKP1\"     \"HSD11B2\"  \"EDN2\"     \"ALOX12B\"  \"LYPD3\"    \"KRT31\"    \"CDSN\"     \"CLDN4\"   \n[37] \"DSC1\"     \"DSC3\"     \"COL17A1\"  \"GRB7\"     \"CRB3\"     \"AQP3\"     \"ESRP2\"    \"CD8A\"     \"CD3D\"    \n[46] \"CD3E\"     \"CD3G\"     \"PRF1\"     \"CD2\"      \"GZMA\"     \"CCR5\"     \"CCL4\"     \"CXCL13\"   \"IL12RB1\" \n[55] \"CXCR3\"    \"CCL5\"     \"CXCL9\"    \"GZMB\"     \"IFNG\"     \"FASLG\"    \"MMP9\"     \"CD79A\"    \"NCR1\"    \n[64] \"HLA-G\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 73 \nAll Number of genes with core enrichment (unique): 64 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 52 \nNumber of genes with negative correlation (notunique): 21 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 43 \nNumber of genes with negative correlation (unique): 21 \n\n\n&gt; process_core_enrichment(limma_CFD_hallmarks_core_enrichment, correlation_limma_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"SCNN1A\"   \"CLIC3\"    \"MAPK13\"   \"KLF4\"     \"KRT19\"    \"PCP4\"     \"ZFP36\"    \"HMGCS2\"   \"TRIM29\"  \n [10] \"TPSAB1\"   \"CA12\"     \"KLK11\"    \"CXCL14\"   \"PKP3\"     \"PERP\"     \"KLK10\"    \"OVOL2\"    \"GJB3\"    \n [19] \"ASS1\"     \"NPY1R\"    \"SFN\"      \"XBP1\"     \"FGFR3\"    \"LAMC2\"    \"RAPGEFL1\" \"SULT2B1\"  \"LTC4S\"   \n [28] \"CYP4B1\"   \"BCL6\"     \"ADIPOQ\"   \"ACADL\"    \"GPX3\"     \"ALDH2\"    \"FABP4\"    \"CIDEA\"    \"CFD\"     \n [37] \"PGAM2\"    \"DES\"      \"TNNT2\"    \"FHL1\"     \"KLF5\"     \"MB\"       \"SGCG\"     \"ACTA1\"    \"ACTC1\"   \n [46] \"MYH11\"    \"EFS\"      \"SPEG\"     \"MYL2\"     \"VIPR1\"    \"NOS1\"     \"CKM\"      \"SPDEF\"    \"MYH7\"    \n [55] \"LAMA2\"    \"MYH2\"     \"MYH1\"     \"IFI30\"    \"ZBTB16\"   \"CLCA2\"    \"ALOX15B\"  \"SERPINB5\" \"KLK8\"    \n [64] \"EPS8L2\"   \"KRT17\"    \"GLS2\"     \"TP63\"     \"NHLH2\"    \"GPX2\"     \"CLDN8\"    \"LAMA3\"    \"EGFR\"    \n [73] \"KRT31\"    \"CDSN\"     \"CLDN4\"    \"PPP2R2C\"  \"DSC1\"     \"DSC3\"     \"COL17A1\"  \"GRB7\"     \"IL2RG\"   \n [82] \"CD38\"     \"A2M\"      \"LTB\"      \"CD14\"     \"IL2RA\"    \"CXCL13\"   \"IL12RB1\"  \"CCR1\"     \"CXCL9\"   \n [91] \"EBI3\"     \"CXCL10\"   \"CXCL11\"   \"IL1B\"     \"CD74\"     \"CCRL2\"    \"RSAD2\"    \"GBP4\"     \"BST2\"    \n[100] \"CMPK2\"    \"GMPR\"     \"SELL\"     \"OASL\"     \"RTP4\"     \"LGALS3BP\" \"BATF2\"    \"RRM2\"     \"BUB1\"    \n[109] \"SLC7A5\"   \"AURKA\"    \"CDC25A\"   \"FCN1\"     \"ITGAM\"    \"LCP2\"     \"MMP13\"    \"LCK\"      \"GZMK\"    \n[118] \"PIK3CG\"   \"WAS\"      \"PLEK\"     \"FCER1G\"   \"C1QA\"     \"PLA2G7\"   \"C1QC\"     \"SPOCK2\"   \"GZMA\"    \n[127] \"CCL5\"     \"HPCAL4\"   \"GNGT2\"    \"GZMB\"     \"APOC1\"    \"CTSS\"     \"SERPINA1\" \"MMP12\"    \"CDK5R1\"  \n[136] \"OLR1\"     \"MMP8\"     \"PLAT\"     \"GAPDHS\"   \"GFI1\"     \"TKTL1\"    \"IL12RB2\"  \"IL13RA2\"  \"NEK2\"    \n[145] \"NCAPH\"    \"CDKN3\"    \"F3\"       \"IL1R1\"    \"ADM\"      \"LPAR1\"    \"IL10RA\"   \"APLNR\"    \"SLAMF1\"  \n[154] \"RGS1\"     \"NLRP3\"    \"IL10\"     \"MSR1\"     \"LTA\"      \"C3AR1\"    \"CYBB\"     \"OSM\"      \"CCL17\"   \n[163] \"CD48\"     \"CXCR6\"    \"KCNA3\"    \"TNFRSF9\"  \"CXCL8\"    \"IRF8\"     \"HLA-DQA1\" \"ZBP1\"     \"HLA-DRB1\"\n[172] \"CD86\"     \"IDO1\"     \"IRF4\"     \"SLAMF7\"   \"GPR18\"    \"FCGR1A\"   \"OAS2\"     \"HLA-G\"    \"METTL7B\" \n[181] \"TRAT1\"    \"CD8B\"     \"NCF4\"     \"PTPRC\"    \"HLA-DOA\"  \"HLA-DRA\"  \"CCR2\"     \"CD247\"    \"SPI1\"    \n[190] \"CD96\"     \"CD8A\"     \"CD4\"      \"CD3D\"     \"CD3E\"     \"ITGB2\"    \"ITGAL\"    \"CD3G\"     \"PRF1\"    \n[199] \"CD2\"      \"CD28\"     \"CCR5\"     \"CCL4\"     \"LY86\"     \"CXCR3\"    \"CRTAM\"    \"SIT1\"     \"CD80\"    \n[208] \"IGSF6\"    \"FASLG\"    \"MMP9\"     \"CD79A\"    \"CDKN2A\"   \"SPC25\"    \"ASF1B\"    \"MYBL2\"    \"SPC24\"   \n[217] \"DLGAP5\"   \"BIRC5\"    \"KIF4A\"    \"UBE2T\"    \"UBE2C\"    \"PBK\"      \"CDC45\"    \"GINS2\"    \"CENPF\"   \n[226] \"EXO1\"     \"CDC6\"    \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 306 \nAll Number of genes with core enrichment (unique): 227 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 93 \nNumber of genes with negative correlation (notunique): 213 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 84 \nNumber of genes with negative correlation (unique): 143 \n\n\n&gt; process_core_enrichment(outRst_CFD_hallmarks_core_enrichment, correlation_outRst_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"SCNN1A\"   \"CLIC3\"    \"MAPK13\"   \"KLF4\"     \"KRT19\"    \"PCP4\"     \"HMGCS2\"   \"TRIM29\"   \"TPSAB1\"  \n [10] \"CA12\"     \"KLK11\"    \"PTGER3\"   \"CXCL14\"   \"PKP3\"     \"PERP\"     \"KLK10\"    \"OVOL2\"    \"GJB3\"    \n [19] \"SFN\"      \"XBP1\"     \"FGFR3\"    \"TJP3\"     \"RAPGEFL1\" \"SULT2B1\"  \"LTC4S\"    \"CYP4B1\"   \"BCL6\"    \n [28] \"ADIPOQ\"   \"ACADL\"    \"FABP4\"    \"CIDEA\"    \"GBP4\"     \"CTLA4\"    \"LTB\"      \"ICOS\"     \"CD86\"    \n [37] \"CD48\"     \"IL2RA\"    \"IRF4\"     \"TLR7\"     \"S100A1\"   \"EOMES\"    \"SELL\"     \"CXCL10\"   \"SPP1\"    \n [46] \"TNFRSF9\"  \"ST3GAL4\"  \"ETV4\"     \"SPRY4\"    \"F3\"       \"IL1R1\"    \"ADM\"      \"LPAR1\"    \"CSF3\"    \n [55] \"PTGER2\"   \"SLAMF1\"   \"CXCL6\"    \"RGS1\"     \"LCK\"      \"MSR1\"     \"LTA\"      \"CD14\"     \"BST2\"    \n [64] \"CYBB\"     \"OSM\"      \"CXCR6\"    \"CCL5\"     \"CXCL9\"    \"EBI3\"     \"CXCL11\"   \"RTP4\"     \"SCG3\"    \n [73] \"MMP13\"    \"GZMK\"     \"PIK3CG\"   \"PLEK\"     \"FCER1G\"   \"C1QA\"     \"C1QC\"     \"SPOCK2\"   \"GZMA\"    \n [82] \"GNGT2\"    \"GZMB\"     \"APOC1\"    \"CTSS\"     \"SERPINA1\" \"MMP12\"    \"CDK5R1\"   \"MMP8\"     \"PLAT\"    \n [91] \"IFI27\"    \"CD74\"     \"RSAD2\"    \"GMPR\"     \"OASL\"     \"LGALS3BP\" \"BATF2\"    \"IL2RG\"    \"CD38\"    \n[100] \"A2M\"      \"CXCL13\"   \"IL12RB1\"  \"CCR1\"     \"HLA-DQA1\" \"ZBP1\"     \"HLA-DRB1\" \"IDO1\"     \"SLAMF7\"  \n[109] \"GPR18\"    \"FCGR1A\"   \"OAS2\"     \"HLA-G\"    \"HLA-DOA\"  \"CD247\"    \"CD96\"     \"CD8A\"     \"CD3D\"    \n[118] \"CD3E\"     \"ITGB2\"    \"ITGAL\"    \"CD3G\"     \"PRF1\"     \"CD2\"      \"CCR5\"     \"CCL4\"     \"LY86\"    \n[127] \"CXCR3\"    \"CRTAM\"    \"SIT1\"     \"CD80\"     \"IGSF6\"    \"FASLG\"    \"MMP9\"     \"CD79A\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 188 \nAll Number of genes with core enrichment (unique): 134 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 38 \nNumber of genes with negative correlation (notunique): 150 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 37 \nNumber of genes with negative correlation (unique): 97 \n\n# python\n# CFD_hallmarks\nA = [\"AURKB\", \"MYBL2\", \"CDC20\", \"KIF2C\", \"UBE2C\", \"NEK2\", \"STMN1\", \"BIRC5\", \"BUB1\", \"RAD54L\",\n\"CENPA\", \"CDC45\", \"PTTG1\", \"GINS2\", \"CDKN3\", \"SLC7A5\", \"KIF4A\", \"NDC80\", \"AURKA\", \"CENPF\",\n\"CDC25A\", \"EXO1\", \"CDC6\", \"CENPM\", \"KIF18B\", \"ASF1B\", \"SPC24\", \"DLGAP5\", \"GINS1\", \"GINS4\",\n\"TRIP13\", \"UBE2T\", \"AKR1C2\", \"ITIH4\", \"CES1\", \"RBP4\", \"ALDH2\", \"AKR1C3\", \"CYP2E1\", \"ETS2\",\n\"HSD11B1\", \"FETUB\", \"CYP2C18\", \"ACSM1\", \"ARG1\", \"CFB\", \"AQP9\", \"ALDH3A1\", \"CDA\", \"AOX1\",\n\"CYP4F2\", \"ABCC3\", \"ADH1C\", \"NCAPH\", \"EDN1\", \"CALML5\", \"ZBTB16\", \"FGF22\", \"ACTC1\", \"ATP6V1B1\",\n\"EDAR\", \"FGFR3\", \"EDN2\", \"ALOX12B\", \"CKM\", \"AKR1B10\", \"ABCB11\", \"SERPINB2\", \"TG\", \"MYH7\",\n\"CLDN16\", \"CFD\", \"DES\", \"FHL1\", \"ACTA1\", \"ABLIM1\", \"ANKRD2\", \"GADD45B\", \"SDC3\", \"KIF20A\",\n\"CHST6\", \"KLRD1\", \"HLA-DOA\", \"HLA-DRA\", \"CD74\", \"NLRP3\", \"SPI1\", \"CD96\", \"HLA-DQA1\", \"CD4\",\n\"WAS\", \"IL2RG\", \"CD3D\", \"CD3E\", \"ITGB2\", \"ITGAL\", \"LTB\", \"ST8SIA4\", \"CD28\", \"CD7\",\n\"MAP4K1\", \"CCR5\", \"IRF4\", \"CXCL13\", \"IL12RB1\", \"CCR1\", \"CXCR3\", \"CCL5\", \"CRTAM\", \"SIT1\",\n\"CTSS\", \"IGSF6\", \"FASLG\", \"MMP9\", \"CD79A\", \"GPR65\", \"HLA-G\", \"IL27RA\", \"CDKN2A\"]\n\nB = [\"SCNN1A\", \"CLIC3\", \"KLF4\", \"KRT19\", \"PCP4\", \"HMGCS2\", \"TRIM29\", \"TPSAB1\", \"KLK11\", \"PKP3\",\n\"PERP\", \"OVOL2\", \"GJB3\", \"SFN\", \"XBP1\", \"FGFR3\", \"RAPGEFL1\", \"SULT2B1\", \"SOX10\", \"NPY4R\",\n\"CALML5\", \"CLDN8\", \"KRT1\", \"PRODH\", \"ZBTB16\", \"KRT15\", \"KLK7\", \"LGALS7\", \"TGM1\", \"KLK8\",\n\"KRT5\", \"FGF22\", \"PKP1\", \"HSD11B2\", \"EDN2\", \"NOS1\", \"ALOX12B\", \"LYPD3\", \"CLCA2\", \"SERPINB5\",\n\"GLS2\", \"TP63\", \"AQP3\", \"ESRP2\", \"EGFR\", \"KRT31\", \"CDSN\", \"CLDN4\", \"PPP2R2C\", \"DSC1\",\n\"DSC3\", \"COL17A1\", \"GRB7\", \"CFD\", \"PGAM2\", \"TNNT2\", \"KLF5\", \"MYL2\", \"VIPR1\", \"SPDEF\",\n\"MYL7\", \"CD8A\", \"CD3D\", \"CD3E\", \"CD3G\", \"PRF1\", \"CD2\", \"GZMA\", \"CCR5\", \"CCL4\",\n\"CXCL13\", \"IL12RB1\", \"CXCR3\", \"CCL5\", \"CXCL9\", \"GZMB\", \"IFNG\", \"FASLG\", \"MMP9\", \"CD79A\",\n\"NCR1\", \"HLA-G\"]\n\nC = [\"SCNN1A\", \"KLF4\", \"PCP4\", \"HMGCS2\", \"TRIM29\", \"TPSAB1\", \"KLK11\", \"PKP3\", \"OVOL2\", \"GJB3\",\n\"XBP1\", \"FGFR3\", \"RAPGEFL1\", \"SULT2B1\", \"SOX10\", \"NPY4R\", \"CALML5\", \"CLDN8\", \"KRT1\",\n\"PRODH\", \"ZBTB16\", \"KRT15\", \"KLK7\", \"LGALS7\", \"TGM1\", \"KLK8\", \"KRT5\", \"FGF22\", \"PKP1\",\n\"HSD11B2\", \"EDN2\", \"ALOX12B\", \"LYPD3\", \"KRT31\", \"CDSN\", \"CLDN4\", \"DSC1\", \"DSC3\", \"COL17A1\",\n\"GRB7\", \"CRB3\", \"AQP3\", \"ESRP2\", \"CD8A\", \"CD3D\", \"CD3E\", \"CD3G\", \"PRF1\", \"CD2\",\n\"GZMA\", \"CCR5\", \"CCL4\", \"CXCL13\", \"IL12RB1\", \"CXCR3\", \"CCL5\", \"CXCL9\", \"GZMB\", \"IFNG\",\n\"FASLG\", \"MMP9\", \"CD79A\", \"NCR1\", \"HLA-G\"]\n\nD = [\"SCNN1A\", \"CLIC3\", \"MAPK13\", \"KLF4\", \"KRT19\", \"PCP4\", \"ZFP36\", \"HMGCS2\", \"TRIM29\", \"TPSAB1\",\n\"CA12\", \"KLK11\", \"CXCL14\", \"PKP3\", \"PERP\", \"KLK10\", \"OVOL2\", \"GJB3\", \"ASS1\", \"NPY1R\",\n\"SFN\", \"XBP1\", \"FGFR3\", \"LAMC2\", \"RAPGEFL1\", \"SULT2B1\", \"LTC4S\", \"CYP4B1\", \"BCL6\", \"ADIPOQ\",\n\"ACADL\", \"GPX3\", \"ALDH2\", \"FABP4\", \"CIDEA\", \"CFD\", \"PGAM2\", \"DES\", \"TNNT2\", \"FHL1\",\n\"KLF5\", \"MB\", \"SGCG\", \"ACTA1\", \"ACTC1\", \"MYH11\", \"EFS\", \"SPEG\", \"MYL2\", \"VIPR1\",\n\"NOS1\", \"CKM\", \"SPDEF\", \"MYH7\", \"LAMA2\", \"MYH2\", \"MYH1\", \"IFI30\", \"ZBTB16\", \"CLCA2\",\n\"ALOX15B\", \"SERPINB5\", \"KLK8\", \"EPS8L2\", \"KRT17\", \"GLS2\", \"TP63\", \"NHLH2\", \"GPX2\", \"CLDN8\",\n\"LAMA3\", \"EGFR\", \"KRT31\", \"CDSN\", \"CLDN4\", \"PPP2R2C\", \"DSC1\", \"DSC3\", \"COL17A1\", \"GRB7\",\n\"IL2RG\", \"CD38\", \"A2M\", \"LTB\", \"CD14\", \"IL2RA\", \"CXCL13\", \"IL12RB1\", \"CCR1\", \"CXCL9\",\n\"EBI3\", \"CXCL10\", \"CXCL11\", \"IL1B\", \"CD74\", \"CCRL2\", \"RSAD2\", \"GBP4\", \"BST2\", \"CMPK2\",\n\"GMPR\", \"SELL\", \"OASL\", \"RTP4\", \"LGALS3BP\", \"BATF2\", \"RRM2\", \"BUB1\", \"SLC7A5\", \"AURKA\",\n\"CDC25A\", \"FCN1\", \"ITGAM\", \"LCP2\", \"MMP13\", \"LCK\", \"GZMK\", \"PIK3CG\", \"WAS\", \"PLEK\",\n\"FCER1G\", \"C1QA\", \"PLA2G7\", \"C1QC\", \"SPOCK2\", \"GZMA\", \"CCL5\", \"HPCAL4\", \"GNGT2\", \"GZMB\",\n\"APOC1\", \"CTSS\", \"SERPINA1\", \"MMP12\", \"CDK5R1\", \"OLR1\", \"MMP8\", \"PLAT\", \"GAPDHS\", \"GFI1\",\n\"TKTL1\", \"IL12RB2\", \"IL13RA2\", \"NEK2\", \"NCAPH\", \"CDKN3\", \"F3\", \"IL1R1\", \"ADM\", \"LPAR1\",\n\"IL10RA\", \"APLNR\", \"SLAMF1\", \"RGS1\", \"NLRP3\", \"IL10\", \"MSR1\", \"LTA\", \"C3AR1\", \"CYBB\",\n\"OSM\", \"CCL17\", \"CD48\", \"CXCR6\", \"KCNA3\", \"TNFRSF9\", \"CXCL8\", \"IRF8\", \"HLA-DQA1\", \"ZBP1\",\n\"HLA-DRB1\", \"CD86\", \"IDO1\", \"IRF4\", \"SLAMF7\", \"GPR18\", \"FCGR1A\", \"OAS2\", \"HLA-G\", \"METTL7B\",\n\"TRAT1\", \"CD8B\", \"NCF4\", \"PTPRC\", \"HLA-DOA\", \"HLA-DRA\", \"CCR2\", \"CD247\", \"SPI1\", \"CD96\",\n\"CD8A\", \"CD4\", \"CD3D\", \"CD3E\", \"ITGB2\", \"ITGAL\", \"CD3G\", \"PRF1\", \"CD2\", \"CD28\",\n\"CCR5\", \"CCL4\", \"LY86\", \"CXCR3\", \"CRTAM\", \"SIT1\", \"CD80\", \"IGSF6\", \"FASLG\", \"MMP9\",\n\"CD79A\", \"CDKN2A\", \"SPC25\", \"ASF1B\", \"MYBL2\", \"SPC24\", \"DLGAP5\", \"BIRC5\", \"KIF4A\", \"UBE2T\",\n\"UBE2C\", \"PBK\", \"CDC45\", \"GINS2\", \"CENPF\", \"EXO1\", \"CDC6\"]\n\nE = [\"SCNN1A\", \"CLIC3\", \"MAPK13\", \"KLF4\", \"KRT19\", \"PCP4\", \"HMGCS2\", \"TRIM29\", \"TPSAB1\", \"CA12\",\n\"KLK11\", \"PTGER3\", \"CXCL14\", \"PKP3\", \"PERP\", \"KLK10\", \"OVOL2\", \"GJB3\", \"SFN\", \"XBP1\",\n\"FGFR3\", \"TJP3\", \"RAPGEFL1\", \"SULT2B1\", \"LTC4S\", \"CYP4B1\", \"BCL6\", \"ADIPOQ\", \"ACADL\", \"FABP4\",\n\"CIDEA\", \"GBP4\", \"CTLA4\", \"LTB\", \"ICOS\", \"CD86\", \"CD48\", \"IL2RA\", \"IRF4\", \"TLR7\",\n\"S100A1\", \"EOMES\", \"SELL\", \"CXCL10\", \"SPP1\", \"TNFRSF9\", \"ST3GAL4\", \"ETV4\", \"SPRY4\", \"F3\",\n\"IL1R1\", \"ADM\", \"LPAR1\", \"CSF3\", \"PTGER2\", \"SLAMF1\", \"CXCL6\", \"RGS1\", \"LCK\", \"MSR1\",\n\"LTA\", \"CD14\", \"BST2\", \"CYBB\", \"OSM\", \"CXCR6\", \"CCL5\", \"CXCL9\", \"EBI3\", \"CXCL11\",\n\"RTP4\", \"SCG3\", \"MMP13\", \"GZMK\", \"PIK3CG\", \"PLEK\", \"FCER1G\", \"C1QA\", \"C1QC\", \"SPOCK2\",\n\"GZMA\", \"GNGT2\", \"GZMB\", \"APOC1\", \"CTSS\", \"SERPINA1\", \"MMP12\", \"CDK5R1\", \"MMP8\", \"PLAT\",\n\"IFI27\", \"CD74\", \"RSAD2\", \"GMPR\", \"OASL\", \"LGALS3BP\", \"BATF2\", \"IL2RG\", \"CD38\", \"A2M\",\n\"CXCL13\", \"IL12RB1\", \"CCR1\", \"HLA-DQA1\", \"ZBP1\", \"HLA-DRB1\", \"IDO1\", \"SLAMF7\", \"GPR18\", \"FCGR1A\",\n\"OAS2\", \"HLA-G\", \"HLA-DOA\", \"CD247\", \"CD96\", \"CD8A\", \"CD3D\", \"CD3E\", \"ITGB2\", \"ITGAL\",\n\"CD3G\", \"PRF1\", \"CD2\", \"CCR5\", \"CCL4\", \"LY86\", \"CXCR3\", \"CRTAM\", \"SIT1\", \"CD80\",\n\"IGSF6\", \"FASLG\", \"MMP9\", \"CD79A\"]\n\ntarget_data_A = np.array(A)\ntarget_data_B = np.array(B)\ntarget_data_C = np.array(C)\ntarget_data_D = np.array(D)\ntarget_data_E = np.array(E)\nALL = [target_data_A, target_data_B, target_data_C, target_data_D, target_data_E]\nALL_concatenated = np.concatenate(ALL)\n# Convert list A to numpy array and get unique elements preserving order\ntarget_data = np.array(ALL_concatenated)\nprint(target_data)\n\ngroups = ['TransPropy', 'deseq2', 'edgeR', 'limma', 'outRst']\ngroups_colors = plt.get_cmap('Set2').colors[:5]\n# Repeat counts for each group\nrepeat_counts = [119, 82, 64, 227, 134]\n# Repeating each group name by the respective counts\nrepeated_group_names = np.repeat(groups, repeat_counts)\n# Printing the repeated group names\nprint(repeated_group_names)\n#target_data = np.concatenate([np.random.choice(1000, 100, replace=False) for i in range(len(groups))])\n\n# create a dataframe\nedge_data = pd.DataFrame({'source': repeated_group_names, 'target': target_data})\nedge_data = edge_data.assign(color = lambda x: x['source'].map(dict(zip(groups, groups_colors))))\n\nfig, ax = plt.subplots(figsize=(10, 10))\n#plt.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)\nVennNetworkPlot(edge_data,\n                edge_style=2,\n                target_node_size=15,\n                show_node_margin=True,\n                #show_target_label=True,\n                #target_font_size=4,\n                show_node_color=True,\n                k=0.1,\n                ax=ax)\nplt.show()\n\n\nVennNetwork core enrichment CFD_hallmarks_fivemethods"
  },
  {
    "objectID": "VennNetwork core enrichment.html#cfd_kegg",
    "href": "VennNetwork core enrichment.html#cfd_kegg",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.4 CFD_kegg",
    "text": "17.4 CFD_kegg\n# r\n# Process the core enrichment genes from TransPropy_CFD_kegg_y\nTransPropy_CFD_kegg_core_enrichment &lt;- TransPropy_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_CFD_kegg_core_enrichment, correlation_TransPropy_CFD)\n\n# Process the core enrichment genes from deseq2_CFD_kegg_y\ndeseq2_CFD_kegg_core_enrichment &lt;- deseq2_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_CFD_kegg_core_enrichment, correlation_deseq2_CFD)\n\n# Process the core enrichment genes from edgeR_CFD_kegg_y\nedgeR_CFD_kegg_core_enrichment &lt;- edgeR_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_CFD_kegg_core_enrichment, correlation_edgeR_CFD)\n\n# Process the core enrichment genes from limma_CFD_kegg_y\nlimma_CFD_kegg_core_enrichment &lt;- limma_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_CFD_kegg_core_enrichment, correlation_limma_CFD)\n\n# Process the core enrichment genes from outRst_CFD_kegg_y\noutRst_CFD_kegg_core_enrichment &lt;- outRst_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_CFD_kegg_core_enrichment, correlation_outRst_CFD)\n&gt; process_core_enrichment(TransPropy_CFD_kegg_core_enrichment, correlation_TransPropy_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"GSTM5\"    \"ADH1B\"    \"AKR1C2\"   \"AKR1C3\"   \"CYP2E1\"   \"AKR1C1\"   \"CYP2C9\"   \"CYP3A5\"   \"CYP2C18\" \n[10] \"ADH4\"     \"CYP3A4\"   \"ADH1A\"    \"ALDH3A1\"  \"ADH1C\"    \"ALDH3B2\"  \"CYP2D6\"   \"AOX1\"     \"FMO2\"    \n[19] \"DGAT2\"    \"CYP4A11\"  \"CYP26B1\"  \"ADH6\"     \"AWAT2\"    \"AGTR1\"    \"CACNA1G\"  \"ADORA2A\"  \"ADCY4\"   \n[28] \"CALML5\"   \"EGFR\"     \"CHP2\"     \"ADRA1A\"   \"ADRB2\"    \"ADCY8\"    \"PLA2G4B\"  \"ALOX15B\"  \"ALOX12B\" \n[37] \"CYP4F2\"   \"ALOX12\"   \"ADIPOQ\"   \"PLIN1\"    \"ACADL\"    \"AQP7\"     \"CPT1B\"    \"FABP4\"    \"ALDH2\"   \n[46] \"PGAM1\"    \"CHMP4A\"   \"FGFR2\"    \"CBLC\"     \"EPN3\"     \"FGFR3\"    \"HLA-DRA\"  \"HLA-DPA1\" \"HLA-DQB1\"\n[55] \"HLA-DQA1\" \"HLA-DRB1\" \"HLA-DPB1\" \"ITGB2\"    \"HLA-DRB5\" \"FCGR2A\"   \"FCGR3A\"   \"FCGR1A\"   \"MARCKSL1\"\n[64] \"CDK2\"     \"CDKN2A\"   \"E2F1\"     \"CDC25C\"   \"CDC20\"    \"BUB1\"     \"CDC45\"    \"PTTG1\"    \"CCNB1\"   \n[73] \"CDC25A\"   \"CDC6\"    \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 117 \nAll Number of genes with core enrichment (unique): 74 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 94 \nNumber of genes with negative correlation (notunique): 23 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 51 \nNumber of genes with negative correlation (unique): 23 \n\n\n&gt; process_core_enrichment(deseq2_CFD_kegg_core_enrichment, correlation_deseq2_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"LTC4S\"         \"PLA2G4B\"       \"JMJD7-PLA2G4B\" \"CYP2C9\"        \"PLA2G2F\"       \"PLA2G3\"       \n [7] \"CYP2C18\"       \"GGT6\"          \"PLA2G4E\"       \"CYP4F3\"        \"ALOX12B\"       \"FGF11\"        \n[13] \"EGFR\"          \"CHP2\"          \"FGF22\"         \"NTF4\"          \"FGFR2\"         \"FGFR3\"        \n[19] \"ADH1B\"         \"UGT1A4\"        \"UGT1A6\"        \"UGT1A1\"        \"UGT1A7\"        \"CYP3A5\"       \n[25] \"AOX1\"          \"UGT2A1\"        \"CYP2C19\"       \"UGT1A10\"       \"UGT1A3\"        \"UGT1A5\"       \n[31] \"CYP1A2\"        \"AKR1C2\"        \"SULT1E1\"       \"HSD11B2\"       \"SULT2B1\"       \"HSD3B1\"       \n[37] \"CALML5\"        \"CALML3\"       \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 83 \nAll Number of genes with core enrichment (unique): 38 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 83 \nNumber of genes with negative correlation (notunique): 0 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 38 \nNumber of genes with negative correlation (unique): 0 \n\n\n&gt; process_core_enrichment(edgeR_CFD_kegg_core_enrichment, correlation_edgeR_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"LTC4S\"         \"PLA2G4B\"       \"JMJD7-PLA2G4B\" \"PLA2G2F\"       \"PLA2G3\"        \"CYP2C18\"      \n [7] \"GGT6\"          \"PLA2G4E\"       \"CYP4F3\"        \"ALOX12B\"       \"ADH1B\"         \"UGT1A4\"       \n[13] \"UGT1A6\"        \"UGT1A1\"        \"UGT1A7\"        \"CYP3A5\"        \"AOX1\"          \"CYP2C19\"      \n[19] \"UGT1A10\"       \"UGT1A3\"        \"UGT1A5\"        \"FGF11\"         \"CHP2\"          \"FGF22\"        \n[25] \"NTF4\"          \"FGFR3\"         \"HSD11B2\"       \"SULT2B1\"      \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 53 \nAll Number of genes with core enrichment (unique): 28 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 53 \nNumber of genes with negative correlation (notunique): 0 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 28 \nNumber of genes with negative correlation (unique): 0 \n\n\n&gt; process_core_enrichment(limma_CFD_kegg_core_enrichment, correlation_limma_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"LTC4S\"         \"PLA2G4B\"       \"JMJD7-PLA2G4B\" \"GPX3\"          \"AKR1C3\"        \"PLA2G2A\"      \n  [7] \"ALOX15B\"       \"CYP2E1\"        \"PLA2G2F\"       \"PLA2G3\"        \"CYP2C18\"       \"GGT6\"         \n [13] \"PLA2G4E\"       \"CYP4F3\"        \"PTGS1\"         \"ALOX12B\"       \"AKR1C2\"        \"SULT1E1\"      \n [19] \"UGT1A6\"        \"UGT1A1\"        \"AKR1C1\"        \"UGT1A7\"        \"HSD11B1\"       \"CYP3A5\"       \n [25] \"HSD11B2\"       \"SULT2B1\"       \"GSTM5\"         \"ADH1B\"         \"GSTA3\"         \"NCF1\"         \n [31] \"CCR2\"          \"VAV1\"          \"PIK3CG\"        \"HCK\"           \"WAS\"           \"CCL17\"        \n [37] \"CXCR4\"         \"ADCY1\"         \"CCR5\"          \"CCL4\"          \"CXCR6\"         \"CXCL13\"       \n [43] \"CCR1\"          \"CXCR3\"         \"CCL5\"          \"CXCL9\"         \"GNGT2\"         \"CCL18\"        \n [49] \"GNG7\"          \"CCL3\"          \"CCL8\"          \"CXCL10\"        \"GNG4\"          \"CXCL11\"       \n [55] \"CCL3L3\"        \"SHC4\"          \"CXCL8\"         \"HLA-DQA2\"      \"HLA-DOA\"       \"HLA-DRA\"      \n [61] \"HLA-DQB1\"      \"HLA-DQA1\"      \"HLA-DRB1\"      \"IL10\"          \"HLA-DRB5\"      \"C1QA\"         \n [67] \"C1QB\"          \"CD28\"          \"CD86\"          \"C1QC\"          \"FCGR2A\"        \"FCGR3A\"       \n [73] \"FCGR1A\"        \"CD80\"          \"PTPRC\"         \"BTK\"           \"LCK\"           \"CD8A\"         \n [79] \"CD4\"           \"IL2RG\"         \"CD3D\"          \"CD3E\"          \"ICOS\"          \"CD79A\"        \n [85] \"CR1\"           \"NCF4\"          \"ITGAM\"         \"ITGB2\"         \"MARCKSL1\"      \"IL1B\"         \n [91] \"IL1R1\"         \"ANPEP\"         \"CD8B\"          \"CSF2RA\"        \"CD5\"           \"MS4A1\"        \n [97] \"CD38\"          \"CD3G\"          \"CD2\"           \"CD14\"          \"IL2RA\"         \"CD22\"         \n[103] \"PRF1\"          \"GZMB\"          \"FASLG\"         \"HLA-G\"         \"CTLA4\"         \"LTA\"          \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 193 \nAll Number of genes with core enrichment (unique): 108 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 41 \nNumber of genes with negative correlation (notunique): 152 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 31 \nNumber of genes with negative correlation (unique): 77 \n\n\n&gt; process_core_enrichment(outRst_CFD_kegg_core_enrichment, correlation_outRst_CFD)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"PLA2G4B\"       \"JMJD7-PLA2G4B\" \"MAPK13\"        \"CALML5\"        \"EGFR\"          \"CALML3\"       \n  [7] \"PLA2G2F\"       \"PLA2G3\"        \"PLA2G4E\"       \"AKR1C2\"        \"SULT1E1\"       \"UGT1A4\"       \n [13] \"UGT1A6\"        \"UGT1A1\"        \"AKR1C1\"        \"UGT1A7\"        \"HSD11B1\"       \"CYP3A5\"       \n [19] \"GSTM5\"         \"ADH1B\"         \"CYP2C9\"        \"CYP2C18\"       \"TLR8\"          \"PIK3CG\"       \n [25] \"CD14\"          \"CD86\"          \"CCL4\"          \"CCL5\"          \"CXCL9\"         \"TLR7\"         \n [31] \"CCL3\"          \"CD80\"          \"CXCL10\"        \"CXCL11\"        \"SPP1\"          \"PIK3CD\"       \n [37] \"HLA-DQA2\"      \"HLA-DOA\"       \"HLA-DQA1\"      \"HLA-DRB1\"      \"HLA-DPB1\"      \"ITGB2\"        \n [43] \"HLA-DRB5\"      \"FCGR2A\"        \"FCGR3A\"        \"FCGR1A\"        \"MARCKSL1\"      \"CSF3\"         \n [49] \"FCER2\"         \"CD8B\"          \"MME\"           \"CD5\"           \"MS4A1\"         \"CD8A\"         \n [55] \"CD3D\"          \"CD3E\"          \"CD38\"          \"CD3G\"          \"CD2\"           \"IL2RA\"        \n [61] \"CD22\"          \"CD74\"          \"LTA\"           \"CTSS\"          \"HLA-G\"         \"MAG\"          \n [67] \"MPZ\"           \"CD6\"           \"SPN\"           \"PDCD1\"         \"L1CAM\"         \"CTLA4\"        \n [73] \"CLDN14\"        \"ITGAL\"         \"ICOS\"          \"SELL\"          \"NLGN1\"         \"SDC3\"         \n [79] \"ULBP1\"         \"CD247\"         \"LCK\"           \"SH2D1A\"        \"NCR3\"          \"TYROBP\"       \n [85] \"FCER1G\"        \"PRF1\"          \"CD244\"         \"CD48\"          \"GZMB\"          \"FASLG\"        \n [91] \"SHC4\"          \"C1QA\"          \"C1QB\"          \"C1QC\"          \"ADCY1\"         \"CCR5\"         \n [97] \"CXCR6\"         \"CXCL13\"        \"CCR1\"          \"CXCR3\"         \"GNGT2\"         \"CCL18\"        \n[103] \"GNG7\"          \"GNG4\"          \"CCL3L3\"       \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 210 \nAll Number of genes with core enrichment (unique): 105 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 31 \nNumber of genes with negative correlation (notunique): 179 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 24 \nNumber of genes with negative correlation (unique): 81 \n# python\n# CFD_kegg\nA = [\"GSTM5\", \"ADH1B\", \"AKR1C2\", \"AKR1C3\", \"CYP2E1\", \"AKR1C1\", \"CYP2C9\", \"CYP3A5\", \"CYP2C18\", \"ADH4\",\n\"CYP3A4\", \"ADH1A\", \"ALDH3A1\", \"ADH1C\", \"ALDH3B2\", \"CYP2D6\", \"AOX1\", \"FMO2\", \"DGAT2\", \"CYP4A11\",\n\"CYP26B1\", \"ADH6\", \"AWAT2\", \"AGTR1\", \"CACNA1G\", \"ADORA2A\", \"ADCY4\", \"CALML5\", \"EGFR\", \"CHP2\",\n\"ADRA1A\", \"ADRB2\", \"ADCY8\", \"PLA2G4B\", \"ALOX15B\", \"ALOX12B\", \"CYP4F2\", \"ALOX12\", \"ADIPOQ\", \"PLIN1\",\n\"ACADL\", \"AQP7\", \"CPT1B\", \"FABP4\", \"ALDH2\", \"PGAM1\", \"CHMP4A\", \"FGFR2\", \"CBLC\",\n\"EPN3\", \"FGFR3\", \"HLA-DRA\", \"HLA-DPA1\", \"HLA-DQB1\", \"HLA-DQA1\", \"HLA-DRB1\", \"HLA-DPB1\", \"ITGB2\", \"HLA-DRB5\",\n\"FCGR2A\", \"FCGR3A\", \"FCGR1A\", \"MARCKSL1\", \"CDK2\", \"CDKN2A\", \"E2F1\", \"CDC25C\", \"CDC20\", \"BUB1\",\n\"CDC45\", \"PTTG1\", \"CCNB1\", \"CDC25A\", \"CDC6\"]\n\nB = [\"LTC4S\", \"PLA2G4B\", \"JMJD7-PLA2G4B\", \"CYP2C9\", \"PLA2G2F\", \"PLA2G3\", \"CYP2C18\", \"GGT6\", \"PLA2G4E\", \"CYP4F3\",\n\"ALOX12B\", \"FGF11\", \"EGFR\", \"CHP2\", \"FGF22\", \"NTF4\", \"FGFR2\", \"FGFR3\", \"ADH1B\", \"UGT1A4\",\n\"UGT1A6\", \"UGT1A1\", \"UGT1A7\", \"CYP3A5\", \"AOX1\", \"UGT2A1\", \"CYP2C19\", \"UGT1A10\", \"UGT1A3\", \"UGT1A5\",\n\"CYP1A2\", \"AKR1C2\", \"SULT1E1\", \"HSD11B2\", \"SULT2B1\", \"HSD3B1\", \"CALML5\", \"CALML3\"\n]\n\nC = [\"LTC4S\", \"PLA2G4B\", \"JMJD7-PLA2G4B\", \"PLA2G2F\", \"PLA2G3\", \"CYP2C18\", \"GGT6\", \"PLA2G4E\", \"CYP4F3\", \"ALOX12B\",\n\"ADH1B\", \"UGT1A4\", \"UGT1A6\", \"UGT1A1\", \"UGT1A7\", \"CYP3A5\", \"AOX1\", \"CYP2C19\", \"UGT1A10\", \"UGT1A3\",\n\"UGT1A5\", \"FGF11\", \"CHP2\", \"FGF22\", \"NTF4\", \"FGFR3\", \"HSD11B2\", \"SULT2B1\"]\n\nD = [\"LTC4S\", \"PLA2G4B\", \"JMJD7-PLA2G4B\", \"GPX3\", \"AKR1C3\", \"PLA2G2A\", \"ALOX15B\", \"CYP2E1\", \"PLA2G2F\", \"PLA2G3\",\n\"CYP2C18\", \"GGT6\", \"PLA2G4E\", \"CYP4F3\", \"PTGS1\", \"ALOX12B\", \"AKR1C2\", \"SULT1E1\", \"UGT1A6\", \"UGT1A1\",\n\"AKR1C1\", \"UGT1A7\", \"HSD11B1\", \"CYP3A5\", \"HSD11B2\", \"SULT2B1\", \"GSTM5\", \"ADH1B\", \"GSTA3\", \"NCF1\",\n\"CCR2\", \"VAV1\", \"PIK3CG\", \"HCK\", \"WAS\", \"CCL17\", \"CXCR4\", \"ADCY1\", \"CCR5\", \"CCL4\",\n\"CXCR6\", \"CXCL13\", \"CCR1\", \"CXCR3\", \"CCL5\", \"CXCL9\", \"GNGT2\", \"CCL18\", \"GNG7\", \"CCL3\",\n\"CCL8\", \"CXCL10\", \"GNG4\", \"CXCL11\", \"CCL3L3\", \"SHC4\", \"CXCL8\", \"HLA-DQA2\", \"HLA-DOA\", \"HLA-DRA\",\n\"HLA-DQB1\", \"HLA-DQA1\", \"HLA-DRB1\", \"IL10\", \"HLA-DRB5\", \"C1QA\", \"C1QB\", \"CD28\", \"CD86\", \"C1QC\",\n\"FCGR2A\", \"FCGR3A\", \"FCGR1A\", \"CD80\", \"PTPRC\", \"BTK\", \"LCK\", \"CD8A\", \"CD4\", \"IL2RG\",\n\"CD3D\", \"CD3E\", \"ICOS\", \"CD79A\", \"CR1\", \"NCF4\", \"ITGAM\", \"ITGB2\", \"MARCKSL1\", \"IL1B\",\n\"IL1R1\", \"ANPEP\", \"CD8B\", \"CSF2RA\", \"CD5\", \"MS4A1\", \"CD38\", \"CD3G\", \"CD2\", \"CD14\",\n\"IL2RA\", \"CD22\", \"PRF1\", \"GZMB\", \"FASLG\", \"HLA-G\", \"CTLA4\", \"LTA\"]\n\nE = [\"PLA2G4B\", \"JMJD7-PLA2G4B\", \"MAPK13\", \"CALML5\", \"EGFR\", \"CALML3\", \"PLA2G2F\", \"PLA2G3\", \"PLA2G4E\", \"AKR1C2\",\n\"SULT1E1\", \"UGT1A4\", \"UGT1A6\", \"UGT1A1\", \"AKR1C1\", \"UGT1A7\", \"HSD11B1\", \"CYP3A5\", \"GSTM5\", \"ADH1B\",\n\"CYP2C9\", \"CYP2C18\", \"TLR8\", \"PIK3CG\", \"CD14\", \"CD86\", \"CCL4\", \"CCL5\", \"CXCL9\", \"TLR7\",\n\"CCL3\", \"CD80\", \"CXCL10\", \"CXCL11\", \"SPP1\", \"PIK3CD\", \"HLA-DQA2\", \"HLA-DOA\", \"HLA-DQA1\", \"HLA-DRB1\",\n\"HLA-DPB1\", \"ITGB2\", \"HLA-DRB5\", \"FCGR2A\", \"FCGR3A\", \"FCGR1A\", \"MARCKSL1\", \"CSF3\", \"FCER2\", \"CD8B\",\n\"MME\", \"CD5\", \"MS4A1\", \"CD8A\", \"CD3D\", \"CD3E\", \"CD38\", \"CD3G\", \"CD2\", \"IL2RA\",\n\"CD22\", \"CD74\", \"LTA\", \"CTSS\", \"HLA-G\", \"MAG\", \"MPZ\", \"CD6\", \"SPN\", \"PDCD1\",\n\"L1CAM\", \"CTLA4\", \"CLDN14\", \"ITGAL\", \"ICOS\", \"SELL\", \"NLGN1\", \"SDC3\", \"ULBP1\", \"CD247\",\n\"LCK\", \"SH2D1A\", \"NCR3\", \"TYROBP\", \"FCER1G\", \"PRF1\", \"CD244\", \"CD48\", \"GZMB\", \"FASLG\",\n\"SHC4\", \"C1QA\", \"C1QB\", \"C1QC\", \"ADCY1\", \"CCR5\", \"CXCR6\", \"CXCL13\", \"CCR1\", \"CXCR3\",\n\"GNGT2\", \"CCL18\", \"GNG7\", \"GNG4\", \"CCL3L3\"]\n\ntarget_data_A = np.array(A)\ntarget_data_B = np.array(B)\ntarget_data_C = np.array(C)\ntarget_data_D = np.array(D)\ntarget_data_E = np.array(E)\nALL = [target_data_A, target_data_B, target_data_C, target_data_D, target_data_E]\nALL_concatenated = np.concatenate(ALL)\n# Convert list A to numpy array and get unique elements preserving order\ntarget_data = np.array(ALL_concatenated)\nprint(target_data)\n\ngroups = ['TransPropy', 'deseq2', 'edgeR', 'limma', 'outRst']\ngroups_colors = plt.get_cmap('Set2').colors[:5]\n# Repeat counts for each group\nrepeat_counts = [74, 38, 28, 108, 105]\n# Repeating each group name by the respective counts\nrepeated_group_names = np.repeat(groups, repeat_counts)\n# Printing the repeated group names\nprint(repeated_group_names)\n#target_data = np.concatenate([np.random.choice(1000, 100, replace=False) for i in range(len(groups))])\n\n# create a dataframe\nedge_data = pd.DataFrame({'source': repeated_group_names, 'target': target_data})\nedge_data = edge_data.assign(color = lambda x: x['source'].map(dict(zip(groups, groups_colors))))\n\nfig, ax = plt.subplots(figsize=(10, 10))\nVennNetworkPlot(edge_data,\n                edge_style=2,\n                target_node_size=15,\n                show_node_margin=True,\n                #show_target_label=True,\n                #target_font_size=4,\n                show_node_color=True,\n                k=0.1,\n                ax=ax)\nplt.show()\n\n\n\nVennNetwork core enrichment CFD_kegg_fivemethods"
  },
  {
    "objectID": "VennNetwork core enrichment.html#ankrd35_hallmarks",
    "href": "VennNetwork core enrichment.html#ankrd35_hallmarks",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.5 ANKRD35_hallmarks",
    "text": "17.5 ANKRD35_hallmarks\n# r\n# Process the core enrichment genes from TransPropy_ANKRD35_hallmarks_y\nTransPropy_ANKRD35_hallmarks_core_enrichment &lt;- TransPropy_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ANKRD35_hallmarks_core_enrichment, correlation_TransPropy_ANKRD35)\n\n# Process the core enrichment genes from deseq2_ANKRD35_hallmarks_y\ndeseq2_ANKRD35_hallmarks_core_enrichment &lt;- deseq2_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ANKRD35_hallmarks_core_enrichment, correlation_deseq2_ANKRD35)\n\n# Process the core enrichment genes from edgeR_ANKRD35_hallmarks_y\nedgeR_ANKRD35_hallmarks_core_enrichment &lt;- edgeR_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ANKRD35_hallmarks_core_enrichment, correlation_edgeR_ANKRD35)\n\n# Process the core enrichment genes from limma_ANKRD35_hallmarks_y\nlimma_ANKRD35_hallmarks_core_enrichment &lt;- limma_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ANKRD35_hallmarks_core_enrichment, correlation_limma_ANKRD35)\n\n# Process the core enrichment genes from outRst_ANKRD35_hallmarks_y\noutRst_ANKRD35_hallmarks_core_enrichment &lt;- outRst_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ANKRD35_hallmarks_core_enrichment, correlation_outRst_ANKRD35)\n&gt; process_core_enrichment(TransPropy_ANKRD35_hallmarks_core_enrichment, correlation_TransPropy_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"ITIH4\"    \"ALDH2\"    \"CYP2C18\"  \"CYP2E1\"   \"AKR1C2\"   \"ETS2\"     \"ARG1\"     \"FETUB\"    \"ALDH3A1\" \n [10] \"AQP9\"     \"HSD11B1\"  \"ACSM1\"    \"CDA\"      \"CYP4F2\"   \"CES1\"     \"AKR1C3\"   \"RBP4\"     \"ABCC3\"   \n [19] \"CFB\"      \"AOX1\"     \"ADH1C\"    \"CALML5\"   \"SERPINB2\" \"FGF22\"    \"FGFR3\"    \"ALOX12B\"  \"EDN1\"    \n [28] \"AKR1B10\"  \"EDN2\"     \"CLDN16\"   \"EDAR\"     \"ZBTB16\"   \"ACTC1\"    \"CKM\"      \"ABCB11\"   \"ATP6V1B1\"\n [37] \"MYH7\"     \"TG\"       \"CFD\"      \"DES\"      \"ACTA1\"    \"ANKRD2\"   \"ABLIM1\"   \"FHL1\"     \"GADD45B\" \n [46] \"CDH13\"    \"PPP2R2C\"  \"CDSN\"     \"EGFR\"     \"DSC3\"     \"COL17A1\"  \"CRB3\"     \"ALOX15B\"  \"ICOSLG\"  \n [55] \"DUSP1\"    \"BCL6\"     \"SIK1\"     \"FOSL2\"    \"F2RL1\"    \"NEK2\"     \"KIF2C\"    \"NCAPH\"    \"BUB1\"    \n [64] \"CDKN3\"    \"AURKA\"    \"CD74\"     \"RSAD2\"    \"HLA-DQA1\" \"MX1\"      \"HLA-DRB1\" \"ISG20\"    \"GBP4\"    \n [73] \"IRF4\"     \"ST8SIA4\"  \"CD38\"     \"CCL5\"     \"BST2\"     \"PSMB9\"    \"FCGR1A\"   \"CXCL11\"   \"OASL\"    \n [82] \"HLA-G\"    \"OAS2\"     \"ST3GAL5\"  \"RTP4\"     \"ISG15\"    \"BATF2\"    \"LGALS3BP\" \"HLA-DOA\"  \"HLA-DRA\" \n [91] \"CD96\"     \"IL2RG\"    \"SPI1\"     \"LTB\"      \"NLRP3\"    \"CD3D\"     \"CD3E\"     \"ITGAL\"    \"WAS\"     \n[100] \"CD4\"      \"KLRD1\"    \"MAP4K1\"   \"CD28\"     \"CCR5\"     \"IGSF6\"    \"CXCL13\"   \"CD7\"      \"CXCR3\"   \n[109] \"FASLG\"    \"IL12RB1\"  \"ITGB2\"    \"CTSS\"     \"SIT1\"     \"MMP9\"     \"CRTAM\"    \"CCR1\"     \"CD79A\"   \n[118] \"IL27RA\"   \"GPR65\"    \"CDKN2A\"   \"DLGAP5\"   \"BIRC5\"    \"KIF4A\"    \"CENPF\"    \"NDC80\"    \"AURKB\"   \n[127] \"KIF18B\"   \"GINS1\"    \"CDC20\"    \"PTTG1\"    \"ASF1B\"    \"MYBL2\"    \"SPC24\"    \"STMN1\"    \"GINS4\"   \n[136] \"TRIP13\"   \"UBE2T\"    \"CDC25A\"   \"CENPA\"    \"UBE2C\"    \"RAD54L\"   \"CDC45\"    \"GINS2\"    \"SLC7A5\"  \n[145] \"CDC6\"     \"EXO1\"    \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 186 \nAll Number of genes with core enrichment (unique): 146 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 67 \nNumber of genes with negative correlation (notunique): 119 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 59 \nNumber of genes with negative correlation (unique): 87 \n\n\n&gt; process_core_enrichment(deseq2_ANKRD35_hallmarks_core_enrichment, correlation_deseq2_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"SCNN1A\"   \"KLF4\"     \"TRIM29\"   \"CLIC3\"    \"KLK11\"    \"PKP3\"     \"GJB3\"     \"PERP\"     \"SFN\"     \n[10] \"HMGCS2\"   \"OVOL2\"    \"PCP4\"     \"RAPGEFL1\" \"KRT19\"    \"FGFR3\"    \"SULT2B1\"  \"TPSAB1\"   \"PPP2R2C\" \n[19] \"CDSN\"     \"EGFR\"     \"CLDN4\"    \"DSC3\"     \"DSC1\"     \"KRT31\"    \"COL17A1\"  \"CLDN8\"    \"GRB7\"    \n[28] \"KRT1\"     \"KLK7\"     \"CALML5\"   \"KRT15\"    \"NPY4R\"    \"TGM1\"     \"KLK8\"     \"SOX10\"    \"KRT5\"    \n[37] \"LGALS7\"   \"PKP1\"     \"PRODH\"    \"FGF22\"    \"ALOX12B\"  \"LYPD3\"    \"NOS1\"     \"EDN2\"     \"ZBTB16\"  \n[46] \"HSD11B2\"  \"SERPINB5\" \"CLCA2\"    \"TP63\"     \"GLS2\"     \"ESRP2\"    \"AQP3\"     \"TNNT2\"    \"PGAM2\"   \n[55] \"KLF5\"     \"CFD\"      \"VIPR1\"    \"MYL2\"     \"MYL7\"     \"SPDEF\"    \"RORA\"     \"B4GALNT2\" \"CD8A\"    \n[64] \"CD3D\"     \"CD3E\"     \"CD3G\"     \"CD2\"      \"PRF1\"     \"GZMA\"     \"CCR5\"     \"CXCL9\"    \"IFNG\"    \n[73] \"CCL5\"     \"CCL4\"     \"CXCL13\"   \"CXCR3\"    \"FASLG\"    \"GZMB\"     \"IL12RB1\"  \"MMP9\"     \"NCR1\"    \n[82] \"HLA-G\"    \"CD79A\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 105 \nAll Number of genes with core enrichment (unique): 83 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 84 \nNumber of genes with negative correlation (notunique): 21 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 62 \nNumber of genes with negative correlation (unique): 21 \n\n\n&gt; process_core_enrichment(edgeR_ANKRD35_hallmarks_core_enrichment, correlation_edgeR_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"SCNN1A\"   \"KLF4\"     \"TRIM29\"   \"KLK11\"    \"PKP3\"     \"GJB3\"     \"HMGCS2\"   \"OVOL2\"    \"PCP4\"    \n[10] \"RAPGEFL1\" \"FGFR3\"    \"SULT2B1\"  \"TPSAB1\"   \"XBP1\"     \"KRT1\"     \"KLK7\"     \"CALML5\"   \"KRT15\"   \n[19] \"NPY4R\"    \"TGM1\"     \"KLK8\"     \"SOX10\"    \"KRT5\"     \"LGALS7\"   \"PKP1\"     \"CLDN8\"    \"PRODH\"   \n[28] \"FGF22\"    \"ALOX12B\"  \"LYPD3\"    \"EDN2\"     \"ZBTB16\"   \"HSD11B2\"  \"CDSN\"     \"CLDN4\"    \"DSC3\"    \n[37] \"DSC1\"     \"KRT31\"    \"COL17A1\"  \"GRB7\"     \"CRB3\"     \"ESRP2\"    \"AQP3\"     \"CD8A\"     \"CD3D\"    \n[46] \"CD3E\"     \"CD3G\"     \"CD2\"      \"PRF1\"     \"GZMA\"     \"CCR5\"     \"CXCL9\"    \"IFNG\"     \"CCL5\"    \n[55] \"CCL4\"     \"CXCL13\"   \"CXCR3\"    \"FASLG\"    \"GZMB\"     \"IL12RB1\"  \"MMP9\"     \"NCR1\"     \"HLA-G\"   \n[64] \"CD79A\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 73 \nAll Number of genes with core enrichment (unique): 64 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 52 \nNumber of genes with negative correlation (notunique): 21 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 43 \nNumber of genes with negative correlation (unique): 21 \n\n\n&gt; process_core_enrichment(limma_ANKRD35_hallmarks_core_enrichment, correlation_limma_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"KLF4\"     \"SERPINB5\" \"CLCA2\"    \"KLK8\"     \"IFI30\"    \"PERP\"     \"SFN\"      \"NHLH2\"    \"KRT17\"   \n [10] \"TP63\"     \"EPS8L2\"   \"GLS2\"     \"ALOX15B\"  \"ZBTB16\"   \"GPX2\"     \"MAPK13\"   \"SCNN1A\"   \"TRIM29\"  \n [19] \"CLIC3\"    \"KLK11\"    \"PKP3\"     \"CA12\"     \"GJB3\"     \"KLK10\"    \"HMGCS2\"   \"OVOL2\"    \"PCP4\"    \n [28] \"RAPGEFL1\" \"KRT19\"    \"FGFR3\"    \"ZFP36\"    \"LAMC2\"    \"SULT2B1\"  \"CXCL14\"   \"KRT15\"    \"GJA1\"    \n [37] \"ESRP2\"    \"RHOD\"     \"MSMB\"     \"AQP3\"     \"ELF3\"     \"LAD1\"     \"PPP2R2C\"  \"CDSN\"     \"EGFR\"    \n [46] \"LAMA3\"    \"CLDN4\"    \"DSC3\"     \"DSC1\"     \"KRT31\"    \"COL17A1\"  \"CLDN8\"    \"GRB7\"     \"ACTA1\"   \n [55] \"CRB3\"     \"TNNT2\"    \"PGAM2\"    \"KLF5\"     \"CFD\"      \"DES\"      \"EFS\"      \"VIPR1\"    \"SGCG\"    \n [64] \"MB\"       \"NOS1\"     \"MYL2\"     \"ACTC1\"    \"MYH11\"    \"CKM\"      \"MYH7\"     \"FHL1\"     \"SPDEF\"   \n [73] \"SPEG\"     \"GPX3\"     \"MYH2\"     \"MYH1\"     \"LAMA2\"    \"KRT1\"     \"KLK7\"     \"CALML5\"   \"NPY4R\"   \n [82] \"TGM1\"     \"SOX10\"    \"KRT5\"     \"LGALS7\"   \"PKP1\"     \"SERPINB2\" \"PRODH\"    \"WNT16\"    \"FGF22\"   \n [91] \"ALOX12B\"  \"LYPD3\"    \"SLC6A14\"  \"AKR1B10\"  \"EDN2\"     \"TFCP2L1\"  \"HSD11B2\"  \"CPB1\"     \"TENM2\"   \n[100] \"THRB\"     \"KRT4\"     \"PTGFR\"    \"CLPS\"     \"GP2\"      \"IRF8\"     \"CST7\"     \"GBP4\"     \"BATF\"    \n[109] \"LTB\"      \"CTLA4\"    \"ICOS\"     \"IL10\"     \"CD86\"     \"TNFRSF4\"  \"IRF4\"     \"CD48\"     \"IL2RA\"   \n[118] \"S100A1\"   \"TLR7\"     \"CXCL10\"   \"EOMES\"    \"SELL\"     \"SPP1\"     \"TNFRSF9\"  \"ETV4\"     \"ST3GAL4\" \n[127] \"CDC6\"     \"SPRY4\"    \"IL1R1\"    \"REG1A\"    \"CSF2RA\"   \"IL2RG\"    \"CXCL9\"    \"CD38\"     \"CD14\"    \n[136] \"CXCL13\"   \"A2M\"      \"IL12RB1\"  \"IL1B\"     \"EBI3\"     \"CXCL11\"   \"CCR1\"     \"CD74\"     \"RSAD2\"   \n[145] \"CCRL2\"    \"CMPK2\"    \"GMPR\"     \"BST2\"     \"OASL\"     \"RTP4\"     \"BATF2\"    \"LGALS3BP\" \"GAPDHS\"  \n[154] \"GFI1\"     \"TKTL1\"    \"IL12RB2\"  \"IL13RA2\"  \"NEK2\"     \"NCAPH\"    \"BUB1\"     \"CDKN3\"    \"AURKA\"   \n[163] \"CR1\"      \"FCN1\"     \"LCK\"      \"PLA2G7\"   \"PIK3CG\"   \"ITGAM\"    \"LCP2\"     \"GZMK\"     \"PLEK\"    \n[172] \"WAS\"      \"HPCAL4\"   \"GZMA\"     \"FCER1G\"   \"C1QA\"     \"CCL5\"     \"SPOCK2\"   \"C1QC\"     \"GNGT2\"   \n[181] \"GZMB\"     \"CTSS\"     \"SERPINA1\" \"CDK5R1\"   \"APOC1\"    \"MMP12\"    \"MMP8\"     \"OLR1\"     \"PLAT\"    \n[190] \"ADM\"      \"LPAR1\"    \"RGS1\"     \"APLNR\"    \"IL10RA\"   \"SLAMF1\"   \"LTA\"      \"NLRP3\"    \"CCL17\"   \n[199] \"CXCR6\"    \"OSM\"      \"CYBB\"     \"C3AR1\"    \"MSR1\"     \"KCNA3\"    \"CXCL8\"    \"HLA-DQA1\" \"HLA-DRB1\"\n[208] \"ZBP1\"     \"SLAMF7\"   \"GPR18\"    \"IDO1\"     \"FCGR1A\"   \"HLA-G\"    \"OAS2\"     \"METTL7B\"  \"HLA-DOA\" \n[217] \"CCR2\"     \"PTPRC\"    \"NCF4\"     \"HLA-DRA\"  \"CD247\"    \"CD96\"     \"CD8A\"     \"SPI1\"     \"CD3D\"    \n[226] \"CD3E\"     \"CD3G\"     \"ITGAL\"    \"CD4\"      \"CD2\"      \"PRF1\"     \"CD28\"     \"LY86\"     \"CCR5\"    \n[235] \"IGSF6\"    \"CCL4\"     \"CXCR3\"    \"FASLG\"    \"ITGB2\"    \"SIT1\"     \"MMP9\"     \"CD80\"     \"CRTAM\"   \n[244] \"CD79A\"    \"CDKN2A\"   \"DLGAP5\"   \"ASF1B\"    \"BIRC5\"    \"MYBL2\"    \"RRM2\"     \"SPC24\"    \"KIF4A\"   \n[253] \"UBE2T\"    \"CDC25A\"   \"UBE2C\"    \"PBK\"      \"CDC45\"    \"GINS2\"    \"CENPF\"    \"SLC7A5\"   \"EXO1\"    \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 366 \nAll Number of genes with core enrichment (unique): 261 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 135 \nNumber of genes with negative correlation (notunique): 231 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 108 \nNumber of genes with negative correlation (unique): 153 \n\n\n&gt; process_core_enrichment(outRst_ANKRD35_hallmarks_core_enrichment, correlation_outRst_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"MAPK13\"   \"SCNN1A\"   \"KLF4\"     \"TRIM29\"   \"CLIC3\"    \"KLK11\"    \"PKP3\"     \"CA12\"     \"GJB3\"    \n [10] \"PERP\"     \"SFN\"      \"KLK10\"    \"HMGCS2\"   \"OVOL2\"    \"PCP4\"     \"RAPGEFL1\" \"KRT19\"    \"FGFR3\"   \n [19] \"PTGER3\"   \"SULT2B1\"  \"CXCL14\"   \"TJP3\"     \"NMU\"      \"TPSAB1\"   \"SERPINB5\" \"CLCA2\"    \"KLK8\"    \n [28] \"IFI30\"    \"KRT17\"    \"TP63\"     \"GLS2\"     \"CEBPA\"    \"ZBTB16\"   \"GPX2\"     \"PPP2R2C\"  \"CDSN\"    \n [37] \"EGFR\"     \"LAMA3\"    \"CLDN4\"    \"DSC3\"     \"DSC1\"     \"KRT31\"    \"COL17A1\"  \"CLDN8\"    \"GRB7\"    \n [46] \"KRT15\"    \"GJA1\"     \"ESRP2\"    \"MSMB\"     \"AQP3\"     \"ELF3\"     \"LAD1\"     \"CD2\"      \"PRF1\"    \n [55] \"CD38\"     \"CD14\"     \"LEF1\"     \"FASLG\"    \"CDK2\"     \"PLAT\"     \"CST7\"     \"GBP4\"     \"LTB\"     \n [64] \"CTLA4\"    \"ICOS\"     \"CD86\"     \"IRF4\"     \"CD48\"     \"IL2RA\"    \"S100A1\"   \"TLR7\"     \"CXCL10\"  \n [73] \"EOMES\"    \"SELL\"     \"SPP1\"     \"TNFRSF9\"  \"ETV4\"     \"ST3GAL4\"  \"SPRY4\"    \"IL1R1\"    \"ADM\"     \n [82] \"LPAR1\"    \"CSF3\"     \"PTGER2\"   \"RGS1\"     \"CXCL6\"    \"SLAMF1\"   \"LTA\"      \"LCK\"      \"CXCR6\"   \n [91] \"OSM\"      \"CYBB\"     \"CXCL9\"    \"CCL5\"     \"MSR1\"     \"BST2\"     \"EBI3\"     \"CXCL11\"   \"RTP4\"    \n[100] \"SCG3\"     \"MMP13\"    \"PIK3CG\"   \"GZMK\"     \"PLEK\"     \"GZMA\"     \"FCER1G\"   \"C1QA\"     \"SPOCK2\"  \n[109] \"C1QC\"     \"GNGT2\"    \"GZMB\"     \"CTSS\"     \"SERPINA1\" \"CDK5R1\"   \"APOC1\"    \"MMP12\"    \"MMP8\"    \n[118] \"IFI27\"    \"CD74\"     \"RSAD2\"    \"GMPR\"     \"OASL\"     \"BATF2\"    \"LGALS3BP\" \"IL2RG\"    \"CXCL13\"  \n[127] \"A2M\"      \"IL12RB1\"  \"CCR1\"     \"HLA-DQA1\" \"HLA-DRB1\" \"ZBP1\"     \"SLAMF7\"   \"GPR18\"    \"IDO1\"    \n[136] \"FCGR1A\"   \"HLA-G\"    \"OAS2\"     \"HLA-DOA\"  \"CD247\"    \"CD96\"     \"CD8A\"     \"CD3D\"     \"CD3E\"    \n[145] \"CD3G\"     \"ITGAL\"    \"LY86\"     \"CCR5\"     \"IGSF6\"    \"CCL4\"     \"CXCR3\"    \"ITGB2\"    \"SIT1\"    \n[154] \"MMP9\"     \"CD80\"     \"CRTAM\"    \"CD79A\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 231 \nAll Number of genes with core enrichment (unique): 157 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 71 \nNumber of genes with negative correlation (notunique): 160 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 56 \nNumber of genes with negative correlation (unique): 101 \n# python\n# ANKRD35_hallmarks\nA = [\"ITIH4\", \"ALDH2\", \"CYP2C18\", \"CYP2E1\", \"AKR1C2\", \"ETS2\", \"ARG1\", \"FETUB\", \"ALDH3A1\", \"AQP9\",\n\"HSD11B1\", \"ACSM1\", \"CDA\", \"CYP4F2\", \"CES1\", \"AKR1C3\", \"RBP4\", \"ABCC3\", \"CFB\", \"AOX1\",\n\"ADH1C\", \"CALML5\", \"SERPINB2\", \"FGF22\", \"FGFR3\", \"ALOX12B\", \"EDN1\", \"AKR1B10\", \"EDN2\", \"CLDN16\",\n\"EDAR\", \"ZBTB16\", \"ACTC1\", \"CKM\", \"ABCB11\", \"ATP6V1B1\", \"MYH7\", \"TG\", \"CFD\", \"DES\",\n\"ACTA1\", \"ANKRD2\", \"ABLIM1\", \"FHL1\", \"GADD45B\", \"CDH13\", \"PPP2R2C\", \"CDSN\", \"EGFR\", \"DSC3\",\n\"COL17A1\", \"CRB3\", \"ALOX15B\", \"ICOSLG\", \"DUSP1\", \"BCL6\", \"SIK1\", \"FOSL2\", \"F2RL1\", \"NEK2\",\n\"KIF2C\", \"NCAPH\", \"BUB1\", \"CDKN3\", \"AURKA\", \"CD74\", \"RSAD2\", \"HLA-DQA1\", \"MX1\", \"HLA-DRB1\",\n\"ISG20\", \"GBP4\", \"IRF4\", \"ST8SIA4\", \"CD38\", \"CCL5\", \"BST2\", \"PSMB9\", \"FCGR1A\", \"CXCL11\",\n\"OASL\", \"HLA-G\", \"OAS2\", \"ST3GAL5\", \"RTP4\", \"ISG15\", \"BATF2\", \"LGALS3BP\", \"HLA-DOA\", \"HLA-DRA\",\n\"CD96\", \"IL2RG\", \"SPI1\", \"LTB\", \"NLRP3\", \"CD3D\", \"CD3E\", \"ITGAL\", \"WAS\", \"CD4\",\n\"KLRD1\", \"MAP4K1\", \"CD28\", \"CCR5\", \"IGSF6\", \"CXCL13\", \"CD7\", \"CXCR3\", \"FASLG\", \"IL12RB1\",\n\"ITGB2\", \"CTSS\", \"SIT1\", \"MMP9\", \"CRTAM\", \"CCR1\", \"CD79A\", \"IL27RA\", \"GPR65\", \"CDKN2A\",\n\"DLGAP5\", \"BIRC5\", \"KIF4A\", \"CENPF\", \"NDC80\", \"AURKB\", \"KIF18B\", \"GINS1\", \"CDC20\", \"PTTG1\",\n\"ASF1B\", \"MYBL2\", \"SPC24\", \"STMN1\", \"GINS4\", \"TRIP13\", \"UBE2T\", \"CDC25A\", \"CENPA\", \"UBE2C\",\n\"RAD54L\", \"CDC45\", \"GINS2\", \"SLC7A5\", \"CDC6\", \"EXO1\"]\n\nB = [\"SCNN1A\", \"KLF4\", \"TRIM29\", \"CLIC3\", \"KLK11\", \"PKP3\", \"GJB3\",\n\"PERP\", \"SFN\", \"HMGCS2\", \"OVOL2\", \"PCP4\", \"RAPGEFL1\", \"KRT19\",\n\"FGFR3\", \"SULT2B1\", \"TPSAB1\", \"PPP2R2C\", \"CDSN\", \"EGFR\", \"CLDN4\",\n\"DSC3\", \"DSC1\", \"KRT31\", \"COL17A1\", \"CLDN8\", \"GRB7\", \"KRT1\",\n\"KLK7\", \"CALML5\", \"KRT15\", \"NPY4R\", \"TGM1\", \"KLK8\", \"SOX10\",\n\"KRT5\", \"LGALS7\", \"PKP1\", \"PRODH\", \"FGF22\", \"ALOX12B\", \"LYPD3\",\n\"NOS1\", \"EDN2\", \"ZBTB16\", \"HSD11B2\", \"SERPINB5\", \"CLCA2\", \"TP63\",\n\"GLS2\", \"ESRP2\", \"AQP3\", \"TNNT2\", \"PGAM2\", \"KLF5\", \"CFD\",\n\"VIPR1\", \"MYL2\", \"MYL7\", \"SPDEF\", \"RORA\", \"B4GALNT2\", \"CD8A\",\n\"CD3D\", \"CD3E\", \"CD3G\", \"CD2\", \"PRF1\", \"GZMA\", \"CCR5\",\n\"CXCL9\", \"IFNG\", \"CCL5\", \"CCL4\", \"CXCL13\", \"CXCR3\", \"FASLG\",\n\"GZMB\", \"IL12RB1\", \"MMP9\", \"NCR1\", \"HLA-G\", \"CD79A\"]\n\nC = [\"SCNN1A\", \"KLF4\", \"TRIM29\", \"KLK11\", \"PKP3\", \"GJB3\", \"HMGCS2\",\n\"OVOL2\", \"PCP4\", \"RAPGEFL1\", \"FGFR3\", \"SULT2B1\", \"TPSAB1\", \"XBP1\",\n\"KRT1\", \"KLK7\", \"CALML5\", \"KRT15\", \"NPY4R\", \"TGM1\", \"KLK8\",\n\"SOX10\", \"KRT5\", \"LGALS7\", \"PKP1\", \"CLDN8\", \"PRODH\", \"FGF22\",\n\"ALOX12B\", \"LYPD3\", \"EDN2\", \"ZBTB16\", \"HSD11B2\", \"CDSN\", \"CLDN4\",\n\"DSC3\", \"DSC1\", \"KRT31\", \"COL17A1\", \"GRB7\", \"CRB3\", \"ESRP2\",\n\"AQP3\", \"CD8A\", \"CD3D\", \"CD3E\", \"CD3G\", \"CD2\", \"PRF1\",\n\"GZMA\", \"CCR5\", \"CXCL9\", \"IFNG\", \"CCL5\", \"CCL4\", \"CXCL13\",\n\"CXCR3\", \"FASLG\", \"GZMB\", \"IL12RB1\", \"MMP9\", \"NCR1\", \"HLA-G\",\n\"CD79A\"]\n\nD = [\"KLF4\", \"SERPINB5\", \"CLCA2\", \"KLK8\", \"IFI30\", \"PERP\", \"SFN\",\n\"NHLH2\", \"KRT17\", \"TP63\", \"EPS8L2\", \"GLS2\", \"ALOX15B\", \"ZBTB16\",\n\"GPX2\", \"MAPK13\", \"SCNN1A\", \"TRIM29\", \"CLIC3\", \"KLK11\", \"PKP3\",\n\"CA12\", \"GJB3\", \"KLK10\", \"HMGCS2\", \"OVOL2\", \"PCP4\", \"RAPGEFL1\",\n\"KRT19\", \"FGFR3\", \"ZFP36\", \"LAMC2\", \"SULT2B1\", \"CXCL14\", \"KRT15\",\n\"GJA1\", \"ESRP2\", \"RHOD\", \"MSMB\", \"AQP3\", \"ELF3\", \"LAD1\",\n\"PPP2R2C\", \"CDSN\", \"EGFR\", \"LAMA3\", \"CLDN4\", \"DSC3\", \"DSC1\",\n\"KRT31\", \"COL17A1\", \"CLDN8\", \"GRB7\", \"ACTA1\", \"CRB3\", \"TNNT2\",\n\"PGAM2\", \"KLF5\", \"CFD\", \"DES\", \"EFS\", \"VIPR1\", \"SGCG\",\n\"MB\", \"NOS1\", \"MYL2\", \"ACTC1\", \"MYH11\", \"CKM\", \"MYH7\",\n\"FHL1\", \"SPDEF\", \"SPEG\", \"GPX3\", \"MYH2\", \"MYH1\", \"LAMA2\",\n\"KRT1\", \"KLK7\", \"CALML5\", \"NPY4R\", \"TGM1\", \"SOX10\", \"KRT5\",\n\"LGALS7\", \"PKP1\", \"SERPINB2\", \"PRODH\", \"WNT16\", \"FGF22\", \"ALOX12B\",\n\"LYPD3\", \"SLC6A14\", \"AKR1B10\", \"EDN2\", \"TFCP2L1\", \"HSD11B2\", \"CPB1\",\n\"TENM2\", \"THRB\", \"KRT4\", \"PTGFR\", \"CLPS\", \"GP2\", \"IRF8\",\n\"CST7\", \"GBP4\", \"BATF\", \"LTB\", \"CTLA4\", \"ICOS\", \"IL10\",\n\"CD86\", \"TNFRSF4\", \"IRF4\", \"CD48\", \"IL2RA\", \"S100A1\", \"TLR7\",\n\"CXCL10\", \"EOMES\", \"SELL\", \"SPP1\", \"TNFRSF9\", \"ETV4\", \"ST3GAL4\",\n\"CDC6\", \"SPRY4\", \"IL1R1\", \"REG1A\", \"CSF2RA\", \"IL2RG\", \"CXCL9\",\n\"CD38\", \"CD14\", \"CXCL13\", \"A2M\", \"IL12RB1\", \"IL1B\", \"EBI3\",\n\"CXCL11\", \"CCR1\", \"CD74\", \"RSAD2\", \"CCRL2\", \"CMPK2\", \"GMPR\",\n\"BST2\", \"OASL\", \"RTP4\", \"BATF2\", \"LGALS3BP\", \"GAPDHS\", \"GFI1\",\n\"TKTL1\", \"IL12RB2\", \"IL13RA2\", \"NEK2\", \"NCAPH\", \"BUB1\", \"CDKN3\",\n\"AURKA\", \"CR1\", \"FCN1\", \"LCK\", \"PLA2G7\", \"PIK3CG\", \"ITGAM\",\n\"LCP2\", \"GZMK\", \"PLEK\", \"WAS\", \"HPCAL4\", \"GZMA\", \"FCER1G\",\n\"C1QA\", \"CCL5\", \"SPOCK2\", \"C1QC\", \"GNGT2\", \"GZMB\", \"CTSS\",\n\"SERPINA1\", \"CDK5R1\", \"APOC1\", \"MMP12\", \"MMP8\", \"OLR1\", \"PLAT\",\n\"ADM\", \"LPAR1\", \"RGS1\", \"APLNR\", \"IL10RA\", \"SLAMF1\", \"LTA\",\n\"NLRP3\", \"CCL17\", \"CXCR6\", \"OSM\", \"CYBB\", \"C3AR1\", \"MSR1\",\n\"KCNA3\", \"CXCL8\", \"HLA-DQA1\", \"HLA-DRB1\", \"ZBP1\", \"SLAMF7\", \"GPR18\",\n\"IDO1\", \"FCGR1A\", \"HLA-G\", \"OAS2\", \"METTL7B\", \"HLA-DOA\", \"CCR2\",\n\"PTPRC\", \"NCF4\", \"HLA-DRA\", \"CD247\", \"CD96\", \"CD8A\", \"SPI1\",\n\"CD3D\", \"CD3E\", \"CD3G\", \"ITGAL\", \"CD4\", \"CD2\", \"PRF1\",\n\"CD28\", \"LY86\", \"CCR5\", \"IGSF6\", \"CCL4\", \"CXCR3\", \"FASLG\",\n\"ITGB2\", \"SIT1\", \"MMP9\", \"CD80\", \"CRTAM\", \"CD79A\", \"CDKN2A\",\n\"DLGAP5\", \"ASF1B\", \"BIRC5\", \"MYBL2\", \"RRM2\", \"SPC24\", \"KIF4A\",\n\"UBE2T\", \"CDC25A\", \"UBE2C\", \"PBK\", \"CDC45\", \"GINS2\", \"CENPF\",\n\"SLC7A5\", \"EXO1\"]\n\nE = [\"MAPK13\", \"SCNN1A\", \"KLF4\", \"TRIM29\", \"CLIC3\", \"KLK11\", \"PKP3\",\n\"CA12\", \"GJB3\", \"PERP\", \"SFN\", \"KLK10\", \"HMGCS2\", \"OVOL2\",\n\"PCP4\", \"RAPGEFL1\", \"KRT19\", \"FGFR3\", \"PTGER3\", \"SULT2B1\", \"CXCL14\",\n\"TJP3\", \"NMU\", \"TPSAB1\", \"SERPINB5\", \"CLCA2\", \"KLK8\", \"IFI30\",\n\"KRT17\", \"TP63\", \"GLS2\", \"CEBPA\", \"ZBTB16\", \"GPX2\", \"PPP2R2C\",\n\"CDSN\", \"EGFR\", \"LAMA3\", \"CLDN4\", \"DSC3\", \"DSC1\", \"KRT31\",\n\"COL17A1\", \"CLDN8\", \"GRB7\", \"KRT15\", \"GJA1\", \"ESRP2\", \"MSMB\",\n\"AQP3\", \"ELF3\", \"LAD1\", \"CD2\", \"PRF1\", \"CD38\", \"CD14\",\n\"LEF1\", \"FASLG\", \"CDK2\", \"PLAT\", \"CST7\", \"GBP4\", \"LTB\",\n\"CTLA4\", \"ICOS\", \"CD86\", \"IRF4\", \"CD48\", \"IL2RA\", \"S100A1\",\n\"TLR7\", \"CXCL10\", \"EOMES\", \"SELL\", \"SPP1\", \"TNFRSF9\", \"ETV4\",\n\"ST3GAL4\", \"SPRY4\", \"IL1R1\", \"ADM\", \"LPAR1\", \"CSF3\", \"PTGER2\",\n\"RGS1\", \"CXCL6\", \"SLAMF1\", \"LTA\", \"LCK\", \"CXCR6\", \"OSM\",\n\"CYBB\", \"CXCL9\", \"CCL5\", \"MSR1\", \"BST2\", \"EBI3\", \"CXCL11\",\n\"RTP4\", \"SCG3\", \"MMP13\", \"PIK3CG\", \"GZMK\", \"PLEK\", \"GZMA\",\n\"FCER1G\", \"C1QA\", \"SPOCK2\", \"C1QC\", \"GNGT2\", \"GZMB\", \"CTSS\",\n\"SERPINA1\", \"CDK5R1\", \"APOC1\", \"MMP12\", \"MMP8\", \"IFI27\", \"CD74\",\n\"RSAD2\", \"GMPR\", \"OASL\", \"BATF2\", \"LGALS3BP\", \"IL2RG\", \"CXCL13\",\n\"A2M\", \"IL12RB1\", \"CCR1\", \"HLA-DQA1\", \"HLA-DRB1\", \"ZBP1\", \"SLAMF7\",\n\"GPR18\", \"IDO1\", \"FCGR1A\", \"HLA-G\", \"OAS2\", \"HLA-DOA\", \"CD247\",\n\"CD96\", \"CD8A\", \"CD3D\", \"CD3E\", \"CD3G\", \"ITGAL\", \"LY86\",\n\"CCR5\", \"IGSF6\", \"CCL4\", \"CXCR3\", \"ITGB2\", \"SIT1\", \"MMP9\",\n\"CD80\", \"CRTAM\", \"CD79A\"]\n\ntarget_data_A = np.array(A)\ntarget_data_B = np.array(B)\ntarget_data_C = np.array(C)\ntarget_data_D = np.array(D)\ntarget_data_E = np.array(E)\nALL = [target_data_A, target_data_B, target_data_C, target_data_D, target_data_E]\nALL_concatenated = np.concatenate(ALL)\n# Convert list A to numpy array and get unique elements preserving order\ntarget_data = np.array(ALL_concatenated)\nprint(target_data)\n\ngroups = ['TransPropy', 'deseq2', 'edgeR', 'limma', 'outRst']\ngroups_colors = plt.get_cmap('Set2').colors[:5]\n# Repeat counts for each group\nrepeat_counts = [146, 83, 64, 261, 157]\n# Repeating each group name by the respective counts\nrepeated_group_names = np.repeat(groups, repeat_counts)\n# Printing the repeated group names\nprint(repeated_group_names)\n#target_data = np.concatenate([np.random.choice(1000, 100, replace=False) for i in range(len(groups))])\n\n# create a dataframe\nedge_data = pd.DataFrame({'source': repeated_group_names, 'target': target_data})\nedge_data = edge_data.assign(color = lambda x: x['source'].map(dict(zip(groups, groups_colors))))\n\nfig, ax = plt.subplots(figsize=(10, 10))\nVennNetworkPlot(edge_data,\n                edge_style=2,\n                target_node_size=15,\n                show_node_margin=True,\n                #show_target_label=True,\n                #target_font_size=4,\n                show_node_color=True,\n                k=0.1,\n                ax=ax)\nplt.show()\n\n\nVennNetwork core enrichment _ANKRD35_hallmarks_fivemethods"
  },
  {
    "objectID": "VennNetwork core enrichment.html#ankrd35_kegg",
    "href": "VennNetwork core enrichment.html#ankrd35_kegg",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.6 ANKRD35_kegg",
    "text": "17.6 ANKRD35_kegg\n# r\n# Process the core enrichment genes from TransPropy_ANKRD35_kegg_y\nTransPropy_ANKRD35_kegg_core_enrichment &lt;- TransPropy_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ANKRD35_kegg_core_enrichment, correlation_TransPropy_ANKRD35)\n\n# Process the core enrichment genes from deseq2_ANKRD35_kegg_y\ndeseq2_ANKRD35_kegg_core_enrichment &lt;- deseq2_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ANKRD35_kegg_core_enrichment, correlation_deseq2_ANKRD35)\n\n# Process the core enrichment genes from edgeR_ANKRD35_kegg_y\nedgeR_ANKRD35_kegg_core_enrichment &lt;- edgeR_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ANKRD35_kegg_core_enrichment, correlation_edgeR_ANKRD35)\n\n# Process the core enrichment genes from limma_ANKRD35_kegg_y\nlimma_ANKRD35_kegg_core_enrichment &lt;- limma_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ANKRD35_kegg_core_enrichment, correlation_limma_ANKRD35)\n\n# Process the core enrichment genes from outRst_ANKRD35_kegg_y\noutRst_ANKRD35_kegg_core_enrichment &lt;- outRst_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ANKRD35_kegg_core_enrichment, correlation_outRst_ANKRD35)\n&gt; process_core_enrichment(TransPropy_ANKRD35_kegg_core_enrichment, correlation_TransPropy_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"CYP2C18\"  \"CYP3A5\"   \"CYP2E1\"   \"CYP2C9\"   \"AKR1C2\"   \"GSTM5\"    \"CYP3A4\"   \"ALDH3A1\"  \"ADH1B\"   \n[10] \"ALDH3B2\"  \"AKR1C1\"   \"AKR1C3\"   \"ADH4\"     \"ADH6\"     \"ADH1A\"    \"ADH1C\"    \"CYP2D6\"   \"AOX1\"    \n[19] \"FMO2\"     \"PLA2G4B\"  \"ALOX12B\"  \"ALOX15B\"  \"ALOX12\"   \"CYP4A11\"  \"CYP4F2\"   \"DGAT2\"    \"CYP26B1\" \n[28] \"AWAT2\"    \"EGFR\"     \"CHMP4A\"   \"CBLC\"     \"EPN3\"     \"FGFR2\"    \"FGFR3\"    \"ADRB2\"    \"CALML5\"  \n[37] \"CHP2\"     \"ADORA2A\"  \"CACNA1G\"  \"ADCY4\"    \"AGTR1\"    \"ADCY8\"    \"ADRA1A\"   \"FGF11\"    \"DUSP1\"   \n[46] \"FGF22\"    \"ACADL\"    \"CPT1B\"    \"AQP7\"     \"ADIPOQ\"   \"PLIN1\"    \"FABP4\"    \"ILK\"      \"HLA-DOA\" \n[55] \"HLA-DQB1\" \"HLA-DRA\"  \"HLA-DPA1\" \"HLA-DQA1\" \"HLA-DRB1\" \"HLA-DRB5\" \"HLA-DPB1\" \"CD28\"     \"FASLG\"   \n[64] \"HLA-G\"    \"KLRD1\"    \"FCGR3A\"   \"FCGR2A\"   \"ITGB2\"    \"FCGR1A\"   \"MARCKSL1\" \"CD33\"     \"CR2\"     \n[73] \"CSF1R\"    \"CSF2RA\"   \"CD5\"      \"DNTT\"     \"CD3D\"     \"CD3E\"     \"CD4\"      \"CD37\"     \"CD38\"    \n[82] \"CD14\"     \"CD7\"      \"CD19\"     \"CDK2\"     \"E2F1\"     \"CDC25C\"   \"CDC20\"    \"PTTG1\"    \"BUB1\"    \n[91] \"CDC45\"    \"CCNB1\"    \"CDKN2A\"   \"CDC6\"     \"CDC25A\"  \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 160 \nAll Number of genes with core enrichment (unique): 95 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 97 \nNumber of genes with negative correlation (notunique): 63 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 53 \nNumber of genes with negative correlation (unique): 42 \n\n\n&gt; process_core_enrichment(deseq2_ANKRD35_kegg_core_enrichment, correlation_deseq2_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"PLA2G4B\"       \"LTC4S\"         \"JMJD7-PLA2G4B\" \"PLA2G3\"        \"GGT6\"          \"CYP2C18\"      \n [7] \"PLA2G4E\"       \"PLA2G2F\"       \"CYP4F3\"        \"CYP2C9\"        \"ALOX12B\"       \"FGF11\"        \n[13] \"CHP2\"          \"EGFR\"          \"FGFR2\"         \"NTF4\"          \"FGF22\"         \"FGFR3\"        \n[19] \"CALML5\"        \"CALML3\"        \"CYP3A5\"        \"UGT1A6\"        \"UGT1A4\"        \"UGT1A1\"       \n[25] \"UGT1A7\"        \"AKR1C2\"        \"ADH1B\"         \"CYP2C19\"       \"UGT2A1\"        \"UGT1A10\"      \n[31] \"UGT1A5\"        \"UGT1A3\"        \"AOX1\"          \"CYP1A2\"        \"SULT1E1\"       \"SULT2B1\"      \n[37] \"HSD11B2\"       \"LAMB4\"         \"CBLC\"          \"WNT3A\"         \"ZBTB16\"        \"PIK3R2\"       \n[43] \"CCR5\"          \"CXCL9\"         \"CCL5\"          \"CCL4\"          \"CXCL13\"        \"CXCR3\"        \n[49] \"CCL18\"         \"CXCL10\"        \"ADCY1\"         \"GNGT1\"         \"CXCL11\"        \"GNG4\"         \n[55] \"XCL2\"          \"SHC4\"         \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 105 \nAll Number of genes with core enrichment (unique): 56 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 91 \nNumber of genes with negative correlation (notunique): 14 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 42 \nNumber of genes with negative correlation (unique): 14 \n\n\n&gt; process_core_enrichment(edgeR_ANKRD35_kegg_core_enrichment, correlation_edgeR_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"PLA2G4B\"       \"LTC4S\"         \"JMJD7-PLA2G4B\" \"PLA2G3\"        \"GGT6\"          \"CYP2C18\"      \n [7] \"PLA2G4E\"       \"PLA2G2F\"       \"CYP4F3\"        \"ALOX12B\"       \"FGF11\"         \"CHP2\"         \n[13] \"NTF4\"          \"FGF22\"         \"FGFR3\"         \"UGT1A6\"        \"UGT1A4\"        \"CYP3A5\"       \n[19] \"UGT1A1\"        \"UGT1A7\"        \"ADH1B\"         \"CYP2C19\"       \"UGT1A10\"       \"UGT1A5\"       \n[25] \"UGT1A3\"        \"AOX1\"          \"SULT2B1\"       \"HSD11B2\"       \"AMY2A\"        \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 72 \nAll Number of genes with core enrichment (unique): 29 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 72 \nNumber of genes with negative correlation (notunique): 0 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 29 \nNumber of genes with negative correlation (unique): 0 \n\n\n&gt; process_core_enrichment(limma_ANKRD35_kegg_core_enrichment, correlation_limma_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"MAPK13\"        \"PLA2G4B\"       \"CALML5\"        \"JMJD7-PLA2G4B\" \"EGFR\"          \"PLA2G3\"       \n  [7] \"CALML3\"        \"PLA2G4E\"       \"PLA2G2F\"       \"UGT1A6\"        \"CYP2C18\"       \"CYP3A5\"       \n [13] \"UGT1A1\"        \"UGT1A7\"        \"CYP2E1\"        \"AKR1C2\"        \"GSTM5\"         \"GSTA3\"        \n [19] \"ALDH3A1\"       \"ADH1B\"         \"ALDH3B2\"       \"AKR1C1\"        \"AKR1C3\"        \"SULT1E1\"      \n [25] \"SULT2B1\"       \"HSD11B1\"       \"HSD11B2\"       \"MAOA\"          \"LTC4S\"         \"GGT6\"         \n [31] \"CYP4F3\"        \"PTGS1\"         \"ALOX12B\"       \"ALOX15B\"       \"GPX2\"          \"PLA2G2A\"      \n [37] \"GPX3\"          \"LTB\"           \"TNFSF8\"        \"CCL17\"         \"CXCR6\"         \"IL10\"         \n [43] \"OSM\"           \"TNFRSF4\"       \"IL12RB2\"       \"CXCR4\"         \"CCR5\"          \"CXCL9\"        \n [49] \"CCL5\"          \"CCL4\"          \"CXCL13\"        \"IL2RA\"         \"CXCR3\"         \"CCL18\"        \n [55] \"FASLG\"         \"IL12RB1\"       \"CCL3\"          \"CXCL10\"        \"IL1B\"          \"CXCL11\"       \n [61] \"IL21R\"         \"CCR1\"          \"CD27\"          \"CCL8\"          \"TNFSF13B\"      \"TNFRSF9\"      \n [67] \"CCL3L3\"        \"CXCL8\"         \"IL24\"          \"HLA-DQA2\"      \"CD8B\"          \"HLA-DOA\"      \n [73] \"HLA-DQB1\"      \"HLA-DRA\"       \"CD74\"          \"HLA-DQA1\"      \"LTA\"           \"CD8A\"         \n [79] \"HLA-DRB1\"      \"HLA-DRB5\"      \"CD4\"           \"CTSS\"          \"HLA-G\"         \"CLDN11\"       \n [85] \"CADM1\"         \"SIGLEC1\"       \"PTPRC\"         \"SPN\"           \"CD6\"           \"L1CAM\"        \n [91] \"CLDN14\"        \"ITGAM\"         \"PDCD1\"         \"ITGAL\"         \"CTLA4\"         \"ICOS\"         \n [97] \"CD2\"           \"CD86\"          \"CD28\"          \"ITGB2\"         \"CD80\"          \"SELL\"         \n[103] \"CD22\"          \"CDH15\"         \"CDH2\"          \"NLGN1\"         \"SDC3\"          \"PIK3CG\"       \n[109] \"TLR8\"          \"CD14\"          \"TLR7\"          \"SPP1\"          \"NCF4\"          \"CR1\"          \n[115] \"NCF1\"          \"FCGR3A\"        \"FCGR2A\"        \"FCGR1A\"        \"MARCKSL1\"      \"BTK\"          \n[121] \"LCK\"           \"IL2RG\"         \"CD3D\"          \"CD3E\"          \"CD79A\"         \"VAV1\"         \n[127] \"HCK\"           \"WAS\"           \"GNGT2\"         \"ADCY1\"         \"GNG7\"          \"GNG4\"         \n[133] \"SHC4\"          \"C1QA\"          \"C1QB\"          \"C1QC\"          \"IL1R1\"         \"ANPEP\"        \n[139] \"CSF2RA\"        \"CD5\"           \"MS4A1\"         \"CD3G\"          \"CD38\"          \"PRF1\"         \n[145] \"GZMB\"         \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 320 \nAll Number of genes with core enrichment (unique): 145 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 74 \nNumber of genes with negative correlation (notunique): 246 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 40 \nNumber of genes with negative correlation (unique): 105 \n\n\n&gt; process_core_enrichment(outRst_ANKRD35_kegg_core_enrichment, correlation_outRst_ANKRD35)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"MAPK13\"        \"PLA2G4B\"       \"CALML5\"        \"JMJD7-PLA2G4B\" \"EGFR\"          \"PLA2G3\"       \n  [7] \"CALML3\"        \"PLA2G4E\"       \"PLA2G2F\"       \"LTC4S\"         \"GGT6\"          \"CYP2C18\"      \n [13] \"CYP4F3\"        \"CYP2C9\"        \"PTGS1\"         \"ALOX12B\"       \"MYH11\"         \"MYH6\"         \n [19] \"MYH7\"          \"MYH2\"          \"MYH1\"          \"LAMA2\"         \"HLA-DQA2\"      \"HLA-DOA\"      \n [25] \"HLA-DQA1\"      \"HLA-DRB1\"      \"HLA-DRB5\"      \"HLA-DPB1\"      \"ITGAL\"         \"CD86\"         \n [31] \"PRF1\"          \"ITGB2\"         \"CD80\"          \"HLA-G\"         \"FCGR3A\"        \"FCGR2A\"       \n [37] \"FCGR1A\"        \"MARCKSL1\"      \"CD8B\"          \"CD74\"          \"LTA\"           \"CD8A\"         \n [43] \"CTSS\"          \"PIK3CG\"        \"TLR8\"          \"CXCL9\"         \"CCL5\"          \"CD14\"         \n [49] \"CCL4\"          \"TLR7\"          \"CCL3\"          \"CXCL10\"        \"CXCL11\"        \"SPP1\"         \n [55] \"PIK3CD\"        \"MAG\"           \"MPZ\"           \"SPN\"           \"CD6\"           \"L1CAM\"        \n [61] \"CLDN14\"        \"PDCD1\"         \"CTLA4\"         \"ICOS\"          \"CD2\"           \"SELL\"         \n [67] \"CD22\"          \"NLGN1\"         \"SDC3\"          \"CD247\"         \"NCR3\"          \"SH2D1A\"       \n [73] \"LCK\"           \"CD244\"         \"TYROBP\"        \"FCER1G\"        \"CD48\"          \"FASLG\"        \n [79] \"GZMB\"          \"SHC4\"          \"FCER2\"         \"CD5\"           \"MS4A1\"         \"CD3D\"         \n [85] \"CD3E\"          \"CD3G\"          \"MME\"           \"CD38\"          \"IL2RA\"         \"C1QA\"         \n [91] \"C1QB\"          \"C1QC\"          \"CXCR6\"         \"CCR5\"          \"CXCL13\"        \"CXCR3\"        \n [97] \"CCL18\"         \"GNGT2\"         \"ADCY1\"         \"GNG7\"          \"CCR1\"          \"GNG4\"         \n[103] \"CCL3L3\"       \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 219 \nAll Number of genes with core enrichment (unique): 103 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 27 \nNumber of genes with negative correlation (notunique): 192 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 22 \nNumber of genes with negative correlation (unique): 81\n# python\n# ANKRD35_kegg\nA = [\"CYP2C18\", \"CYP3A5\", \"CYP2E1\", \"CYP2C9\", \"AKR1C2\", \"GSTM5\", \"CYP3A4\",\n\"ALDH3A1\", \"ADH1B\", \"ALDH3B2\", \"AKR1C1\", \"AKR1C3\", \"ADH4\", \"ADH6\",\n\"ADH1A\", \"ADH1C\", \"CYP2D6\", \"AOX1\", \"FMO2\", \"PLA2G4B\", \"ALOX12B\",\n\"ALOX15B\", \"ALOX12\", \"CYP4A11\", \"CYP4F2\", \"DGAT2\", \"CYP26B1\", \"AWAT2\",\n\"EGFR\", \"CHMP4A\", \"CBLC\", \"EPN3\", \"FGFR2\", \"FGFR3\", \"ADRB2\",\n\"CALML5\", \"CHP2\", \"ADORA2A\", \"CACNA1G\", \"ADCY4\", \"AGTR1\", \"ADCY8\",\n\"ADRA1A\", \"FGF11\", \"DUSP1\", \"FGF22\", \"ACADL\", \"CPT1B\", \"AQP7\",\n\"ADIPOQ\", \"PLIN1\", \"FABP4\", \"ILK\", \"HLA-DOA\", \"HLA-DQB1\", \"HLA-DRA\",\n\"HLA-DPA1\", \"HLA-DQA1\", \"HLA-DRB1\", \"HLA-DRB5\", \"HLA-DPB1\", \"CD28\", \"FASLG\",\n\"HLA-G\", \"KLRD1\", \"FCGR3A\", \"FCGR2A\", \"ITGB2\", \"FCGR1A\", \"MARCKSL1\",\n\"CD33\", \"CR2\", \"CSF1R\", \"CSF2RA\", \"CD5\", \"DNTT\", \"CD3D\",\n\"CD3E\", \"CD4\", \"CD37\", \"CD38\", \"CD14\", \"CD7\", \"CD19\",\n\"CDK2\", \"E2F1\", \"CDC25C\", \"CDC20\", \"PTTG1\", \"BUB1\", \"CDC45\",\n\"CCNB1\", \"CDKN2A\", \"CDC6\", \"CDC25A\"]\n\nB = [\"PLA2G4B\", \"LTC4S\", \"JMJD7-PLA2G4B\", \"PLA2G3\", \"GGT6\",\n\"CYP2C18\", \"PLA2G4E\", \"PLA2G2F\", \"CYP4F3\", \"CYP2C9\",\n\"ALOX12B\", \"FGF11\", \"CHP2\", \"EGFR\", \"FGFR2\",\n\"NTF4\", \"FGF22\", \"FGFR3\", \"CALML5\", \"CALML3\",\n\"CYP3A5\", \"UGT1A6\", \"UGT1A4\", \"UGT1A1\", \"UGT1A7\",\n\"AKR1C2\", \"ADH1B\", \"CYP2C19\", \"UGT2A1\", \"UGT1A10\",\n\"UGT1A5\", \"UGT1A3\", \"AOX1\", \"CYP1A2\", \"SULT1E1\",\n\"SULT2B1\", \"HSD11B2\", \"LAMB4\", \"CBLC\", \"WNT3A\",\n\"ZBTB16\", \"PIK3R2\", \"CCR5\", \"CXCL9\", \"CCL5\",\n\"CCL4\", \"CXCL13\", \"CXCR3\", \"CCL18\", \"CXCL10\",\n\"ADCY1\", \"GNGT1\", \"CXCL11\", \"GNG4\", \"XCL2\",\n\"SHC4\"]\n\nC = [\"PLA2G4B\", \"LTC4S\", \"JMJD7-PLA2G4B\", \"PLA2G3\", \"GGT6\",\n\"CYP2C18\", \"PLA2G4E\", \"PLA2G2F\", \"CYP4F3\", \"ALOX12B\",\n\"FGF11\", \"CHP2\", \"NTF4\", \"FGF22\", \"FGFR3\",\n\"UGT1A6\", \"UGT1A4\", \"CYP3A5\", \"UGT1A1\", \"UGT1A7\",\n\"ADH1B\", \"CYP2C19\", \"UGT1A10\", \"UGT1A5\", \"UGT1A3\",\n\"AOX1\", \"SULT2B1\", \"HSD11B2\", \"AMY2A\"]\n\nD = [\"MAPK13\", \"PLA2G4B\", \"CALML5\", \"JMJD7-PLA2G4B\", \"EGFR\",\n\"PLA2G3\", \"CALML3\", \"PLA2G4E\", \"PLA2G2F\", \"UGT1A6\",\n\"CYP2C18\", \"CYP3A5\", \"UGT1A1\", \"UGT1A7\", \"CYP2E1\",\n\"AKR1C2\", \"GSTM5\", \"GSTA3\", \"ALDH3A1\", \"ADH1B\",\n\"ALDH3B2\", \"AKR1C1\", \"AKR1C3\", \"SULT1E1\", \"SULT2B1\",\n\"HSD11B1\", \"HSD11B2\", \"MAOA\", \"LTC4S\", \"GGT6\",\n\"CYP4F3\", \"PTGS1\", \"ALOX12B\", \"ALOX15B\", \"GPX2\",\n\"PLA2G2A\", \"GPX3\", \"LTB\", \"TNFSF8\", \"CCL17\",\n\"CXCR6\", \"IL10\", \"OSM\", \"TNFRSF4\", \"IL12RB2\",\n\"CXCR4\", \"CCR5\", \"CXCL9\", \"CCL5\", \"CCL4\",\n\"CXCL13\", \"IL2RA\", \"CXCR3\", \"CCL18\", \"FASLG\",\n\"IL12RB1\", \"CCL3\", \"CXCL10\", \"IL1B\", \"CXCL11\",\n\"IL21R\", \"CCR1\", \"CD27\", \"CCL8\", \"TNFSF13B\",\n\"TNFRSF9\", \"CCL3L3\", \"CXCL8\", \"IL24\", \"HLA-DQA2\",\n\"CD8B\", \"HLA-DOA\", \"HLA-DQB1\", \"HLA-DRA\", \"CD74\",\n\"HLA-DQA1\", \"LTA\", \"CD8A\", \"HLA-DRB1\", \"HLA-DRB5\",\n\"CD4\", \"CTSS\", \"HLA-G\", \"CLDN11\", \"CADM1\",\n\"SIGLEC1\", \"PTPRC\", \"SPN\", \"CD6\", \"L1CAM\",\n\"CLDN14\", \"ITGAM\", \"PDCD1\", \"ITGAL\", \"CTLA4\",\n\"ICOS\", \"CD2\", \"CD86\", \"CD28\", \"ITGB2\",\n\"CD80\", \"SELL\", \"CD22\", \"CDH15\", \"CDH2\",\n\"NLGN1\", \"SDC3\", \"PIK3CG\", \"TLR8\", \"CD14\",\n\"TLR7\", \"SPP1\", \"NCF4\", \"CR1\", \"NCF1\",\n\"FCGR3A\", \"FCGR2A\", \"FCGR1A\", \"MARCKSL1\", \"BTK\",\n\"LCK\", \"IL2RG\", \"CD3D\", \"CD3E\", \"CD79A\",\n\"VAV1\", \"HCK\", \"WAS\", \"GNGT2\", \"ADCY1\",\n\"GNG7\", \"GNG4\", \"SHC4\", \"C1QA\", \"C1QB\",\n\"C1QC\", \"IL1R1\", \"ANPEP\", \"CSF2RA\", \"CD5\",\n\"MS4A1\", \"CD3G\", \"CD38\", \"PRF1\", \"GZMB\"]\n\nE = [\"MAPK13\", \"PLA2G4B\", \"CALML5\", \"JMJD7-PLA2G4B\", \"EGFR\",\n\"PLA2G3\", \"CALML3\", \"PLA2G4E\", \"PLA2G2F\", \"LTC4S\",\n\"GGT6\", \"CYP2C18\", \"CYP4F3\", \"CYP2C9\", \"PTGS1\",\n\"ALOX12B\", \"MYH11\", \"MYH6\", \"MYH7\", \"MYH2\",\n\"MYH1\", \"LAMA2\", \"HLA-DQA2\", \"HLA-DOA\", \"HLA-DQA1\",\n\"HLA-DRB1\", \"HLA-DRB5\", \"HLA-DPB1\", \"ITGAL\", \"CD86\",\n\"PRF1\", \"ITGB2\", \"CD80\", \"HLA-G\", \"FCGR3A\",\n\"FCGR2A\", \"FCGR1A\", \"MARCKSL1\", \"CD8B\", \"CD74\",\n\"LTA\", \"CD8A\", \"CTSS\", \"PIK3CG\", \"TLR8\",\n\"CXCL9\", \"CCL5\", \"CD14\", \"CCL4\", \"TLR7\",\n\"CCL3\", \"CXCL10\", \"CXCL11\", \"SPP1\", \"PIK3CD\",\n\"MAG\", \"MPZ\", \"SPN\", \"CD6\", \"L1CAM\",\n\"CLDN14\", \"PDCD1\", \"CTLA4\", \"ICOS\", \"CD2\",\n\"SELL\", \"CD22\", \"NLGN1\", \"SDC3\", \"CD247\",\n\"NCR3\", \"SH2D1A\", \"LCK\", \"CD244\", \"TYROBP\",\n\"FCER1G\", \"CD48\", \"FASLG\", \"GZMB\", \"SHC4\",\n\"FCER2\", \"CD5\", \"MS4A1\", \"CD3D\", \"CD3E\",\n\"CD3G\", \"MME\", \"CD38\", \"IL2RA\", \"C1QA\",\n\"C1QB\", \"C1QC\", \"CXCR6\", \"CCR5\", \"CXCL13\",\n\"CXCR3\", \"CCL18\", \"GNGT2\", \"ADCY1\", \"GNG7\",\n\"CCR1\", \"GNG4\", \"CCL3L3\"]\n\ntarget_data_A = np.array(A)\ntarget_data_B = np.array(B)\ntarget_data_C = np.array(C)\ntarget_data_D = np.array(D)\ntarget_data_E = np.array(E)\nALL = [target_data_A, target_data_B, target_data_C, target_data_D, target_data_E]\nALL_concatenated = np.concatenate(ALL)\n# Convert list A to numpy array and get unique elements preserving order\ntarget_data = np.array(ALL_concatenated)\nprint(target_data)\n\ngroups = ['TransPropy', 'deseq2', 'edgeR', 'limma', 'outRst']\ngroups_colors = plt.get_cmap('Set2').colors[:5]\n# Repeat counts for each group\nrepeat_counts = [95, 56, 29, 145, 103]\n# Repeating each group name by the respective counts\nrepeated_group_names = np.repeat(groups, repeat_counts)\n# Printing the repeated group names\nprint(repeated_group_names)\n#target_data = np.concatenate([np.random.choice(1000, 100, replace=False) for i in range(len(groups))])\n\n# create a dataframe\nedge_data = pd.DataFrame({'source': repeated_group_names, 'target': target_data})\nedge_data = edge_data.assign(color = lambda x: x['source'].map(dict(zip(groups, groups_colors))))\n\nfig, ax = plt.subplots(figsize=(10, 10))\nVennNetworkPlot(edge_data,\n                edge_style=2,\n                target_node_size=15,\n                show_node_margin=True,\n                #show_target_label=True,\n                #target_font_size=4,\n                show_node_color=True,\n                k=0.1,\n                ax=ax)\nplt.show()\n\n\nVennNetwork core enrichment _ANKRD35_kegg_fivemethods"
  },
  {
    "objectID": "VennNetwork core enrichment.html#aloxe3_hallmarks",
    "href": "VennNetwork core enrichment.html#aloxe3_hallmarks",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.7 ALOXE3_hallmarks",
    "text": "17.7 ALOXE3_hallmarks\n# r\n\n# Process the core enrichment genes from TransPropy_ALOXE3_hallmarks_y\nTransPropy_ALOXE3_hallmarks_core_enrichment &lt;- TransPropy_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ALOXE3_hallmarks_core_enrichment, correlation_TransPropy_ALOXE3)\n\n# Process the core enrichment genes from deseq2_ALOXE3_hallmarks_y\ndeseq2_ALOXE3_hallmarks_core_enrichment &lt;- deseq2_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ALOXE3_hallmarks_core_enrichment, correlation_deseq2_ALOXE3)\n\n# Process the core enrichment genes from edgeR_ALOXE3_hallmarks_y\nedgeR_ALOXE3_hallmarks_core_enrichment &lt;- edgeR_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ALOXE3_hallmarks_core_enrichment, correlation_edgeR_ALOXE3)\n\n# Process the core enrichment genes from limma_ALOXE3_hallmarks_y\nlimma_ALOXE3_hallmarks_core_enrichment &lt;- limma_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ALOXE3_hallmarks_core_enrichment, correlation_limma_ALOXE3)\n\n# Process the core enrichment genes from outRst_ALOXE3_hallmarks_y\noutRst_ALOXE3_hallmarks_core_enrichment &lt;- outRst_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ALOXE3_hallmarks_core_enrichment, correlation_outRst_ALOXE3)\n&gt; process_core_enrichment(TransPropy_ALOXE3_hallmarks_core_enrichment, correlation_TransPropy_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"ESRP2\"    \"KLK10\"    \"CLIC3\"    \"CYP26B1\"  \"ELF3\"     \"CA12\"     \"BCL11B\"   \"ABLIM1\"   \"CALML5\"  \n [10] \"ALOX12B\"  \"FGFR3\"    \"SERPINB2\" \"FGF22\"    \"EDN2\"     \"CLDN16\"   \"AKR1B10\"  \"EDAR\"     \"EDN1\"    \n [19] \"ABCB11\"   \"ATP6V1B1\" \"ACTC1\"    \"ZBTB16\"   \"CKM\"      \"MYH7\"     \"TG\"       \"CYP2C18\"  \"ARG1\"    \n [28] \"ETS2\"     \"FETUB\"    \"ALDH3A1\"  \"AQP9\"     \"CYP2E1\"   \"ALDH2\"    \"ITIH4\"    \"CYP4F2\"   \"ACSM1\"   \n [37] \"AKR1C2\"   \"CDA\"      \"HSD11B1\"  \"RBP4\"     \"CES1\"     \"AKR1C3\"   \"ABCC3\"    \"CFB\"      \"ADH1C\"   \n [46] \"AOX1\"     \"CDSN\"     \"PPP2R2C\"  \"COL17A1\"  \"DSC3\"     \"CRB3\"     \"EGFR\"     \"ALOX15B\"  \"ACTA1\"   \n [55] \"ICOSLG\"   \"F2RL1\"    \"SIK1\"     \"BCL6\"     \"DUSP1\"    \"FOSL2\"    \"TMEM45A\"  \"EFNA3\"    \"NDST2\"   \n [64] \"ATF3\"     \"F3\"       \"DES\"      \"CFD\"      \"ANKRD2\"   \"FHL1\"     \"CDH13\"    \"GADD45B\"  \"LTB\"     \n [73] \"IRF4\"     \"GBP4\"     \"CTLA4\"    \"CD48\"     \"CD83\"     \"EOMES\"    \"SPP1\"     \"SELL\"     \"ETV4\"    \n [82] \"TNFRSF21\" \"ST3GAL4\"  \"GPR65\"    \"CDC6\"     \"SPRY4\"    \"CTSZ\"     \"HLA-DOA\"  \"HLA-DRA\"  \"CD74\"    \n [91] \"HLA-DQA1\" \"CD96\"     \"SPI1\"     \"NLRP3\"    \"IL2RG\"    \"CD3E\"     \"CD3D\"     \"WAS\"      \"ITGAL\"   \n[100] \"CD4\"      \"MAP4K1\"   \"CD28\"     \"CCR5\"     \"CCL5\"     \"IGSF6\"    \"CXCR3\"    \"CXCL13\"   \"IL12RB1\" \n[109] \"MMP9\"     \"ST8SIA4\"  \"CTSS\"     \"FASLG\"    \"ITGB2\"    \"KLRD1\"    \"CCR1\"     \"SIT1\"     \"CD7\"     \n[118] \"HLA-G\"    \"CRTAM\"    \"CD79A\"    \"IL27RA\"   \"CDKN2A\"   \"ISG20\"    \"HLA-DRB1\" \"RSAD2\"    \"MX1\"     \n[127] \"CD38\"     \"BST2\"     \"FCGR1A\"   \"CXCL11\"   \"OASL\"     \"PSMB9\"    \"OAS2\"     \"ST3GAL5\"  \"RTP4\"    \n[136] \"BATF2\"    \"ISG15\"    \"LGALS3BP\" \"NEK2\"     \"KIF2C\"    \"NCAPH\"    \"BUB1\"     \"AURKA\"    \"CDKN3\"   \n[145] \"CDH2\"     \"CXCL8\"    \"FBN2\"     \"FN1\"      \"ADAM12\"   \"PLOD3\"    \"BIRC5\"    \"DLGAP5\"   \"KIF4A\"   \n[154] \"CENPF\"    \"NDC80\"    \"AURKB\"    \"KIF18B\"   \"CDC20\"    \"GINS1\"    \"PTTG1\"    \"MYBL2\"    \"ASF1B\"   \n[163] \"SPC24\"    \"STMN1\"    \"UBE2T\"    \"CDC25A\"   \"TRIP13\"   \"GINS4\"    \"CENPA\"    \"UBE2C\"    \"SLC7A5\"  \n[172] \"RAD54L\"   \"GINS2\"    \"CDC45\"    \"EXO1\"    \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 226 \nAll Number of genes with core enrichment (unique): 175 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 85 \nNumber of genes with negative correlation (notunique): 141 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 71 \nNumber of genes with negative correlation (unique): 104 \n\n\n&gt; process_core_enrichment(deseq2_ALOXE3_hallmarks_core_enrichment, correlation_deseq2_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"GJB3\"     \"PKP3\"     \"TRIM29\"   \"SCNN1A\"   \"KLK11\"    \"SFN\"      \"KLF4\"     \"PERP\"     \"OVOL2\"   \n[10] \"RAPGEFL1\" \"FGFR3\"    \"SULT2B1\"  \"CLIC3\"    \"HMGCS2\"   \"PCP4\"     \"TPSAB1\"   \"KRT19\"    \"CDSN\"    \n[19] \"CLDN4\"    \"PPP2R2C\"  \"COL17A1\"  \"GRB7\"     \"DSC3\"     \"DSC1\"     \"KRT31\"    \"CRB3\"     \"CLDN8\"   \n[28] \"EGFR\"     \"KLK7\"     \"KLK8\"     \"TGM1\"     \"CALML5\"   \"ALOX12B\"  \"PKP1\"     \"KRT1\"     \"KRT5\"    \n[37] \"KRT15\"    \"LYPD3\"    \"LGALS7\"   \"SOX10\"    \"FGF22\"    \"NOS1\"     \"NPY4R\"    \"PRODH\"    \"EDN2\"    \n[46] \"HSD11B2\"  \"ESRP2\"    \"AQP3\"     \"RORA\"     \"PGAM2\"    \"B4GALNT2\" \"SERPINB5\" \"CLCA2\"    \"TP63\"    \n[55] \"GLS2\"     \"KLF5\"     \"TNNT2\"    \"VIPR1\"    \"SPDEF\"    \"CFD\"      \"MYL2\"     \"MYL7\"     \"MALL\"    \n[64] \"IL1RL2\"   \"ARG1\"     \"CD8A\"     \"CD3E\"     \"CD3D\"     \"CD3G\"     \"CD2\"      \"PRF1\"     \"CCR5\"    \n[73] \"GZMA\"     \"CCL5\"     \"CCL4\"     \"CXCL9\"    \"CXCR3\"    \"CXCL13\"   \"IL12RB1\"  \"GZMB\"     \"MMP9\"    \n[82] \"FASLG\"    \"IFNG\"     \"HLA-G\"    \"NCR1\"     \"CD79A\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 108 \nAll Number of genes with core enrichment (unique): 86 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 87 \nNumber of genes with negative correlation (notunique): 21 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 65 \nNumber of genes with negative correlation (unique): 21 \n\n\n&gt; process_core_enrichment(edgeR_ALOXE3_hallmarks_core_enrichment, correlation_edgeR_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"KLK7\"     \"KLK8\"     \"TGM1\"     \"CALML5\"   \"ALOX12B\"  \"PKP1\"     \"KRT1\"     \"KRT5\"     \"KRT15\"   \n[10] \"FGFR3\"    \"LYPD3\"    \"LGALS7\"   \"SOX10\"    \"FGF22\"    \"CLDN8\"    \"NPY4R\"    \"PRODH\"    \"EDN2\"    \n[19] \"HSD11B2\"  \"GJB3\"     \"PKP3\"     \"TRIM29\"   \"SCNN1A\"   \"KLK11\"    \"KLF4\"     \"OVOL2\"    \"RAPGEFL1\"\n[28] \"SULT2B1\"  \"HMGCS2\"   \"PCP4\"     \"TPSAB1\"   \"CDSN\"     \"CLDN4\"    \"COL17A1\"  \"GRB7\"     \"DSC3\"    \n[37] \"DSC1\"     \"KRT31\"    \"CRB3\"     \"ESRP2\"    \"AQP3\"    \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 49 \nAll Number of genes with core enrichment (unique): 41 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 49 \nNumber of genes with negative correlation (notunique): 0 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 41 \nNumber of genes with negative correlation (unique): 0 \n\n\n&gt; process_core_enrichment(limma_ALOXE3_hallmarks_core_enrichment, correlation_limma_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"KLK8\"     \"SERPINB5\" \"SFN\"      \"KLF4\"     \"PERP\"     \"CLCA2\"    \"NHLH2\"    \"TP63\"     \"KRT17\"   \n [10] \"GLS2\"     \"IFI30\"    \"GPX2\"     \"EPS8L2\"   \"KLK7\"     \"TGM1\"     \"CALML5\"   \"ALOX12B\"  \"PKP1\"    \n [19] \"KRT1\"     \"KRT5\"     \"KRT15\"    \"FGFR3\"    \"LYPD3\"    \"LGALS7\"   \"SERPINB2\" \"SOX10\"    \"FGF22\"   \n [28] \"SLC6A14\"  \"CLDN8\"    \"NOS1\"     \"NPY4R\"    \"PRODH\"    \"EDN2\"     \"HSD11B2\"  \"AKR1B10\"  \"WNT16\"   \n [37] \"TFCP2L1\"  \"SCNN1A\"   \"ESRP2\"    \"OVOL2\"    \"KLK10\"    \"RAPGEFL1\" \"SULT2B1\"  \"CLIC3\"    \"LAD1\"    \n [46] \"AQP3\"     \"MSMB\"     \"ELF3\"     \"CA12\"     \"RHOD\"     \"KRT19\"    \"NPY1R\"    \"GJA1\"     \"GJB3\"    \n [55] \"PKP3\"     \"TRIM29\"   \"KLK11\"    \"MAPK13\"   \"HMGCS2\"   \"PCP4\"     \"TPSAB1\"   \"CXCL14\"   \"LAMC2\"   \n [64] \"CDSN\"     \"CLDN4\"    \"PPP2R2C\"  \"COL17A1\"  \"GRB7\"     \"DSC3\"     \"DSC1\"     \"LAMA3\"    \"KRT31\"   \n [73] \"CRB3\"     \"EGFR\"     \"ALOX15B\"  \"ACTA1\"    \"ACTC1\"    \"KLF5\"     \"TNNT2\"    \"VIPR1\"    \"PGAM2\"   \n [82] \"SGCG\"     \"DES\"      \"EFS\"      \"MYH11\"    \"SPDEF\"    \"MB\"       \"CFD\"      \"MYL2\"     \"CKM\"     \n [91] \"MYH7\"     \"FHL1\"     \"SPEG\"     \"GPX3\"     \"MYH2\"     \"MYH1\"     \"FCN1\"     \"PLA2G7\"   \"PIK3CG\"  \n[100] \"ITGAM\"    \"LCP2\"     \"LCK\"      \"GZMK\"     \"WAS\"      \"PLEK\"     \"FCER1G\"   \"C1QA\"     \"C1QC\"    \n[109] \"HPCAL4\"   \"SPOCK2\"   \"GZMA\"     \"CCL5\"     \"CDK5R1\"   \"GZMB\"     \"GNGT2\"    \"CTSS\"     \"SERPINA1\"\n[118] \"APOC1\"    \"MMP12\"    \"MMP8\"     \"OLR1\"     \"PLAT\"     \"SCG2\"     \"CDH2\"     \"CXCL8\"    \"MMP1\"    \n[127] \"SGCD\"     \"RGS4\"     \"PLOD3\"    \"SERPINE2\" \"CD74\"     \"CCRL2\"    \"RSAD2\"    \"GMPR\"     \"GBP4\"    \n[136] \"CMPK2\"    \"BST2\"     \"CXCL10\"   \"CXCL11\"   \"OASL\"     \"SELL\"     \"RTP4\"     \"BATF2\"    \"LGALS3BP\"\n[145] \"IL2RG\"    \"LTB\"      \"CD38\"     \"CD14\"     \"CXCL9\"    \"IL2RA\"    \"CXCL13\"   \"IL12RB1\"  \"IL1B\"    \n[154] \"A2M\"      \"EBI3\"     \"CCR1\"     \"NLRP3\"    \"CCL17\"    \"LTA\"      \"C3AR1\"    \"IL10\"     \"CYBB\"    \n[163] \"OSM\"      \"CXCR6\"    \"MSR1\"     \"CD48\"     \"KCNA3\"    \"TNFRSF9\"  \"NEK2\"     \"NCAPH\"    \"IL13RA2\" \n[172] \"BUB1\"     \"AURKA\"    \"CDKN3\"    \"CCR2\"     \"HLA-DOA\"  \"PTPRC\"    \"NCF4\"     \"HLA-DRA\"  \"CD247\"   \n[181] \"IRF8\"     \"HLA-DQA1\" \"CD96\"     \"SPI1\"     \"CD8A\"     \"CD3E\"     \"CD3D\"     \"IRF4\"     \"CD86\"    \n[190] \"CD3G\"     \"ITGAL\"    \"CD2\"      \"CD4\"      \"PRF1\"     \"LY86\"     \"CD28\"     \"CCR5\"     \"CCL4\"    \n[199] \"IGSF6\"    \"CXCR3\"    \"MMP9\"     \"FASLG\"    \"ITGB2\"    \"CD80\"     \"SIT1\"     \"HLA-G\"    \"CRTAM\"   \n[208] \"CD79A\"    \"CDKN2A\"   \"HLA-DRB1\" \"SLAMF7\"   \"ZBP1\"     \"IDO1\"     \"GPR18\"    \"FCGR1A\"   \"OAS2\"    \n[217] \"METTL7B\"  \"BIRC5\"    \"SPC25\"    \"ASF1B\"    \"DLGAP5\"   \"KIF4A\"    \"SPC24\"    \"RRM2\"     \"UBE2T\"   \n[226] \"CDC25A\"   \"UBE2C\"    \"SLC7A5\"   \"MYBL2\"    \"GINS2\"    \"CDC45\"    \"PBK\"      \"CENPF\"    \"CDC6\"    \n[235] \"EXO1\"    \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 323 \nAll Number of genes with core enrichment (unique): 235 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 119 \nNumber of genes with negative correlation (notunique): 204 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 96 \nNumber of genes with negative correlation (unique): 139 \n\n\n&gt; process_core_enrichment(outRst_ALOXE3_hallmarks_core_enrichment, correlation_outRst_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"GJB3\"     \"PKP3\"     \"TRIM29\"   \"SCNN1A\"   \"KLK11\"    \"MAPK13\"   \"SFN\"      \"KLF4\"     \"PERP\"    \n [10] \"OVOL2\"    \"KLK10\"    \"RAPGEFL1\" \"FGFR3\"    \"SULT2B1\"  \"CLIC3\"    \"TJP3\"     \"HMGCS2\"   \"NMU\"     \n [19] \"CA12\"     \"PTGER3\"   \"PCP4\"     \"TPSAB1\"   \"KRT19\"    \"CXCL14\"   \"KLK8\"     \"SERPINB5\" \"CLCA2\"   \n [28] \"TP63\"     \"KRT17\"    \"CEBPA\"    \"GLS2\"     \"IFI30\"    \"GPX2\"     \"CDSN\"     \"CLDN4\"    \"PPP2R2C\" \n [37] \"COL17A1\"  \"GRB7\"     \"DSC3\"     \"DSC1\"     \"LAMA3\"    \"KRT31\"    \"CRB3\"     \"CLDN8\"    \"JUP\"     \n [46] \"ESRP2\"    \"KRT15\"    \"LAD1\"     \"AQP3\"     \"MSMB\"     \"ELF3\"     \"KLK7\"     \"TGM1\"     \"CALML5\"  \n [55] \"ALOX12B\"  \"PKP1\"     \"KRT1\"     \"KRT5\"     \"LYPD3\"    \"LGALS7\"   \"SERPINB2\" \"SOX10\"    \"FGF22\"   \n [64] \"SLC6A14\"  \"NOS1\"     \"NPY4R\"    \"PRODH\"    \"EDN2\"     \"HSD11B2\"  \"CD207\"    \"TFCP2L1\"  \"EDAR\"    \n [73] \"UPK3B\"    \"CD2\"      \"PRF1\"     \"LEF1\"     \"CD38\"     \"CD14\"     \"FASLG\"    \"CDK2\"     \"PLAT\"    \n [82] \"CST7\"     \"PTGER2\"   \"LTB\"      \"IRF4\"     \"CD86\"     \"GBP4\"     \"CTLA4\"    \"ICOS\"     \"S100A1\"  \n [91] \"CD48\"     \"IL2RA\"    \"TLR7\"     \"EOMES\"    \"CXCL10\"   \"SPP1\"     \"SELL\"     \"TNFRSF9\"  \"ETV4\"    \n[100] \"ST3GAL4\"  \"SPRY4\"    \"SCG3\"     \"MMP13\"    \"PIK3CG\"   \"LCK\"      \"GZMK\"     \"PLEK\"     \"FCER1G\"  \n[109] \"C1QA\"     \"C1QC\"     \"SPOCK2\"   \"GZMA\"     \"CCL5\"     \"CDK5R1\"   \"GZMB\"     \"GNGT2\"    \"CTSS\"    \n[118] \"SERPINA1\" \"APOC1\"    \"MMP12\"    \"MMP8\"     \"RGS1\"     \"SLAMF1\"   \"LTA\"      \"CYBB\"     \"OSM\"     \n[127] \"CXCR6\"    \"MSR1\"     \"CXCL9\"    \"BST2\"     \"EBI3\"     \"CXCL6\"    \"CXCL11\"   \"RTP4\"     \"IFI27\"   \n[136] \"CD74\"     \"RSAD2\"    \"GMPR\"     \"OASL\"     \"BATF2\"    \"LGALS3BP\" \"IL2RG\"    \"CXCL13\"   \"IL12RB1\" \n[145] \"A2M\"      \"CCR1\"     \"HLA-DQA1\" \"HLA-DRB1\" \"SLAMF7\"   \"ZBP1\"     \"IDO1\"     \"GPR18\"    \"FCGR1A\"  \n[154] \"HLA-G\"    \"OAS2\"     \"HLA-DOA\"  \"CD247\"    \"CD96\"     \"CD8A\"     \"CD3E\"     \"CD3D\"     \"CD3G\"    \n[163] \"ITGAL\"    \"LY86\"     \"CCR5\"     \"CCL4\"     \"IGSF6\"    \"CXCR3\"    \"MMP9\"     \"ITGB2\"    \"CD80\"    \n[172] \"SIT1\"     \"CRTAM\"    \"CD79A\"   \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 252 \nAll Number of genes with core enrichment (unique): 174 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 91 \nNumber of genes with negative correlation (notunique): 161 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 73 \nNumber of genes with negative correlation (unique): 101 \n# python\n# ALOXE3_hallmarks\nA = [\"ESRP2\", \"KLK10\", \"CLIC3\", \"CYP26B1\", \"ELF3\", \"CA12\", \"BCL11B\", \"ABLIM1\", \"CALML5\", \"ALOX12B\",\n\"FGFR3\", \"SERPINB2\", \"FGF22\", \"EDN2\", \"CLDN16\", \"AKR1B10\", \"EDAR\", \"EDN1\", \"ABCB11\", \"ATP6V1B1\",\n\"ACTC1\", \"ZBTB16\", \"CKM\", \"MYH7\", \"TG\", \"CYP2C18\", \"ARG1\", \"ETS2\", \"FETUB\", \"ALDH3A1\",\n\"AQP9\", \"CYP2E1\", \"ALDH2\", \"ITIH4\", \"CYP4F2\", \"ACSM1\", \"AKR1C2\", \"CDA\", \"HSD11B1\", \"RBP4\",\n\"CES1\", \"AKR1C3\", \"ABCC3\", \"CFB\", \"ADH1C\", \"AOX1\", \"CDSN\", \"PPP2R2C\", \"COL17A1\", \"DSC3\",\n\"CRB3\", \"EGFR\", \"ALOX15B\", \"ACTA1\", \"ICOSLG\", \"F2RL1\", \"SIK1\", \"BCL6\", \"DUSP1\", \"FOSL2\",\n\"TMEM45A\", \"EFNA3\", \"NDST2\", \"ATF3\", \"F3\", \"DES\", \"CFD\", \"ANKRD2\", \"FHL1\", \"CDH13\",\n\"GADD45B\", \"LTB\", \"IRF4\", \"GBP4\", \"CTLA4\", \"CD48\", \"CD83\", \"EOMES\", \"SPP1\", \"SELL\",\n\"ETV4\", \"TNFRSF21\", \"ST3GAL4\", \"GPR65\", \"CDC6\", \"SPRY4\", \"CTSZ\", \"HLA-DOA\", \"HLA-DRA\", \"CD74\",\n\"HLA-DQA1\", \"CD96\", \"SPI1\", \"NLRP3\", \"IL2RG\", \"CD3E\", \"CD3D\", \"WAS\", \"ITGAL\", \"CD4\",\n\"MAP4K1\", \"CD28\", \"CCR5\", \"CCL5\", \"IGSF6\", \"CXCR3\", \"CXCL13\", \"IL12RB1\", \"MMP9\", \"ST8SIA4\",\n\"CTSS\", \"FASLG\", \"ITGB2\", \"KLRD1\", \"CCR1\", \"SIT1\", \"CD7\", \"HLA-G\", \"CRTAM\", \"CD79A\",\n\"IL27RA\", \"CDKN2A\", \"ISG20\", \"HLA-DRB1\", \"RSAD2\", \"MX1\", \"CD38\", \"BST2\", \"FCGR1A\", \"CXCL11\",\n\"OASL\", \"PSMB9\", \"OAS2\", \"ST3GAL5\", \"RTP4\", \"BATF2\", \"ISG15\", \"LGALS3BP\", \"NEK2\", \"KIF2C\",\n\"NCAPH\", \"BUB1\", \"AURKA\", \"CDKN3\", \"CDH2\", \"CXCL8\", \"FBN2\", \"FN1\", \"ADAM12\", \"PLOD3\",\n\"BIRC5\", \"DLGAP5\", \"KIF4A\", \"CENPF\", \"NDC80\", \"AURKB\", \"KIF18B\", \"CDC20\", \"GINS1\", \"PTTG1\",\n\"MYBL2\", \"ASF1B\", \"SPC24\", \"STMN1\", \"UBE2T\", \"CDC25A\", \"TRIP13\", \"GINS4\", \"CENPA\", \"UBE2C\",\n\"SLC7A5\", \"RAD54L\", \"GINS2\", \"CDC45\", \"EXO1\"]\n\nB = [\"GJB3\", \"PKP3\", \"TRIM29\", \"SCNN1A\", \"KLK11\", \"SFN\", \"KLF4\", \"PERP\", \"OVOL2\", \"RAPGEFL1\",\n\"FGFR3\", \"SULT2B1\", \"CLIC3\", \"HMGCS2\", \"PCP4\", \"TPSAB1\", \"KRT19\", \"CDSN\", \"CLDN4\", \"PPP2R2C\",\n\"COL17A1\", \"GRB7\", \"DSC3\", \"DSC1\", \"KRT31\", \"CRB3\", \"CLDN8\", \"EGFR\", \"KLK7\", \"KLK8\",\n\"TGM1\", \"CALML5\", \"ALOX12B\", \"PKP1\", \"KRT1\", \"KRT5\", \"KRT15\", \"LYPD3\", \"LGALS7\", \"SOX10\",\n\"FGF22\", \"NOS1\", \"NPY4R\", \"PRODH\", \"EDN2\", \"HSD11B2\", \"ESRP2\", \"AQP3\", \"RORA\", \"PGAM2\",\n\"B4GALNT2\", \"SERPINB5\", \"CLCA2\", \"TP63\", \"GLS2\", \"KLF5\", \"TNNT2\", \"VIPR1\", \"SPDEF\", \"CFD\",\n\"MYL2\", \"MYL7\", \"MALL\", \"IL1RL2\", \"ARG1\", \"CD8A\", \"CD3E\", \"CD3D\", \"CD3G\", \"CD2\",\n\"PRF1\", \"CCR5\", \"GZMA\", \"CCL5\", \"CCL4\", \"CXCL9\", \"CXCR3\", \"CXCL13\", \"IL12RB1\", \"GZMB\",\n\"MMP9\", \"FASLG\", \"IFNG\", \"HLA-G\", \"NCR1\", \"CD79A\"]\n\nC = [\"KLK7\", \"KLK8\", \"TGM1\", \"CALML5\", \"ALOX12B\", \"PKP1\", \"KRT1\", \"KRT5\", \"KRT15\", \"FGFR3\",\n\"LYPD3\", \"LGALS7\", \"SOX10\", \"FGF22\", \"CLDN8\", \"NPY4R\", \"PRODH\", \"EDN2\", \"HSD11B2\", \"GJB3\",\n\"PKP3\", \"TRIM29\", \"SCNN1A\", \"KLK11\", \"KLF4\", \"OVOL2\", \"RAPGEFL1\", \"SULT2B1\", \"HMGCS2\", \"PCP4\",\n\"TPSAB1\", \"CDSN\", \"CLDN4\", \"COL17A1\", \"GRB7\", \"DSC3\", \"DSC1\", \"KRT31\", \"CRB3\", \"ESRP2\",\n\"AQP3\"]\n\nD = [\"KLK8\", \"SERPINB5\", \"SFN\", \"KLF4\", \"PERP\", \"CLCA2\", \"NHLH2\", \"TP63\", \"KRT17\", \"GLS2\",\n\"IFI30\", \"GPX2\", \"EPS8L2\", \"KLK7\", \"TGM1\", \"CALML5\", \"ALOX12B\", \"PKP1\", \"KRT1\", \"KRT5\",\n\"KRT15\", \"FGFR3\", \"LYPD3\", \"LGALS7\", \"SERPINB2\", \"SOX10\", \"FGF22\", \"SLC6A14\", \"CLDN8\", \"NOS1\",\n\"NPY4R\", \"PRODH\", \"EDN2\", \"HSD11B2\", \"AKR1B10\", \"WNT16\", \"TFCP2L1\", \"SCNN1A\", \"ESRP2\", \"OVOL2\",\n\"KLK10\", \"RAPGEFL1\", \"SULT2B1\", \"CLIC3\", \"LAD1\", \"AQP3\", \"MSMB\", \"ELF3\", \"CA12\", \"RHOD\",\n\"KRT19\", \"NPY1R\", \"GJA1\", \"GJB3\", \"PKP3\", \"TRIM29\", \"KLK11\", \"MAPK13\", \"HMGCS2\", \"PCP4\",\n\"TPSAB1\", \"CXCL14\", \"LAMC2\", \"CDSN\", \"CLDN4\", \"PPP2R2C\", \"COL17A1\", \"GRB7\", \"DSC3\", \"DSC1\",\n\"LAMA3\", \"KRT31\", \"CRB3\", \"EGFR\", \"ALOX15B\", \"ACTA1\", \"ACTC1\", \"KLF5\", \"TNNT2\", \"VIPR1\",\n\"PGAM2\", \"SGCG\", \"DES\", \"EFS\", \"MYH11\", \"SPDEF\", \"MB\", \"CFD\", \"MYL2\", \"CKM\",\n\"MYH7\", \"FHL1\", \"SPEG\", \"GPX3\", \"MYH2\", \"MYH1\", \"FCN1\", \"PLA2G7\", \"PIK3CG\", \"ITGAM\",\n\"LCP2\", \"LCK\", \"GZMK\", \"WAS\", \"PLEK\", \"FCER1G\", \"C1QA\", \"C1QC\", \"HPCAL4\", \"SPOCK2\",\n\"GZMA\", \"CCL5\", \"CDK5R1\", \"GZMB\", \"GNGT2\", \"CTSS\", \"SERPINA1\", \"APOC1\", \"MMP12\", \"MMP8\",\n\"OLR1\", \"PLAT\", \"SCG2\", \"CDH2\", \"CXCL8\", \"MMP1\", \"SGCD\", \"RGS4\", \"PLOD3\", \"SERPINE2\",\n\"CD74\", \"CCRL2\", \"RSAD2\", \"GMPR\", \"GBP4\", \"CMPK2\", \"BST2\", \"CXCL10\", \"CXCL11\", \"OASL\",\n\"SELL\", \"RTP4\", \"BATF2\", \"LGALS3BP\", \"IL2RG\", \"LTB\", \"CD38\", \"CD14\", \"CXCL9\", \"IL2RA\",\n\"CXCL13\", \"IL12RB1\", \"IL1B\", \"A2M\", \"EBI3\", \"CCR1\", \"NLRP3\", \"CCL17\", \"LTA\", \"C3AR1\",\n\"IL10\", \"CYBB\", \"OSM\", \"CXCR6\", \"MSR1\", \"CD48\", \"KCNA3\", \"TNFRSF9\", \"NEK2\", \"NCAPH\",\n\"IL13RA2\", \"BUB1\", \"AURKA\", \"CDKN3\", \"CCR2\", \"HLA-DOA\", \"PTPRC\", \"NCF4\", \"HLA-DRA\", \"CD247\",\n\"IRF8\", \"HLA-DQA1\", \"CD96\", \"SPI1\", \"CD8A\", \"CD3E\", \"CD3D\", \"IRF4\", \"CD86\", \"CD3G\",\n\"ITGAL\", \"CD2\", \"CD4\", \"PRF1\", \"LY86\", \"CD28\", \"CCR5\", \"CCL4\", \"IGSF6\", \"CXCR3\",\n\"MMP9\", \"FASLG\", \"ITGB2\", \"CD80\", \"SIT1\", \"HLA-G\", \"CRTAM\", \"CD79A\", \"CDKN2A\", \"HLA-DRB1\",\n\"SLAMF7\", \"ZBP1\", \"IDO1\", \"GPR18\", \"FCGR1A\", \"OAS2\", \"METTL7B\", \"BIRC5\", \"SPC25\", \"ASF1B\",\n\"DLGAP5\", \"KIF4A\", \"SPC24\", \"RRM2\", \"UBE2T\", \"CDC25A\", \"UBE2C\", \"SLC7A5\", \"MYBL2\", \"GINS2\",\n\"CDC45\", \"PBK\", \"CENPF\", \"CDC6\", \"EXO1\"]\n\nE = [\"GJB3\", \"PKP3\", \"TRIM29\", \"SCNN1A\", \"KLK11\", \"MAPK13\", \"SFN\", \"KLF4\", \"PERP\", \"OVOL2\",\n\"KLK10\", \"RAPGEFL1\", \"FGFR3\", \"SULT2B1\", \"CLIC3\", \"TJP3\", \"HMGCS2\", \"NMU\", \"CA12\", \"PTGER3\",\n\"PCP4\", \"TPSAB1\", \"KRT19\", \"CXCL14\", \"KLK8\", \"SERPINB5\", \"CLCA2\", \"TP63\", \"KRT17\", \"CEBPA\",\n\"GLS2\", \"IFI30\", \"GPX2\", \"CDSN\", \"CLDN4\", \"PPP2R2C\", \"COL17A1\", \"GRB7\", \"DSC3\", \"DSC1\",\n\"LAMA3\", \"KRT31\", \"CRB3\", \"CLDN8\", \"JUP\", \"ESRP2\", \"KRT15\", \"LAD1\", \"AQP3\", \"MSMB\",\n\"ELF3\", \"KLK7\", \"TGM1\", \"CALML5\", \"ALOX12B\", \"PKP1\", \"KRT1\", \"KRT5\", \"LYPD3\", \"LGALS7\",\n\"SERPINB2\", \"SOX10\", \"FGF22\", \"SLC6A14\", \"NOS1\", \"NPY4R\", \"PRODH\", \"EDN2\", \"HSD11B2\", \"CD207\",\n\"TFCP2L1\", \"EDAR\", \"UPK3B\", \"CD2\", \"PRF1\", \"LEF1\", \"CD38\", \"CD14\", \"FASLG\", \"CDK2\",\n\"PLAT\", \"CST7\", \"PTGER2\", \"LTB\", \"IRF4\", \"CD86\", \"GBP4\", \"CTLA4\", \"ICOS\", \"S100A1\",\n\"CD48\", \"IL2RA\", \"TLR7\", \"EOMES\", \"CXCL10\", \"SPP1\", \"SELL\", \"TNFRSF9\", \"ETV4\", \"ST3GAL4\",\n\"SPRY4\", \"SCG3\", \"MMP13\", \"PIK3CG\", \"LCK\", \"GZMK\", \"PLEK\", \"FCER1G\", \"C1QA\", \"C1QC\",\n\"SPOCK2\", \"GZMA\", \"CCL5\", \"CDK5R1\", \"GZMB\", \"GNGT2\", \"CTSS\", \"SERPINA1\", \"APOC1\", \"MMP12\",\n\"MMP8\", \"RGS1\", \"SLAMF1\", \"LTA\", \"CYBB\", \"OSM\", \"CXCR6\", \"MSR1\", \"CXCL9\", \"BST2\",\n\"EBI3\", \"CXCL6\", \"CXCL11\", \"RTP4\", \"IFI27\", \"CD74\", \"RSAD2\", \"GMPR\", \"OASL\", \"BATF2\",\n\"LGALS3BP\", \"IL2RG\", \"CXCL13\", \"IL12RB1\", \"A2M\", \"CCR1\", \"HLA-DQA1\", \"HLA-DRB1\", \"SLAMF7\", \"ZBP1\",\n\"IDO1\", \"GPR18\", \"FCGR1A\", \"HLA-G\", \"OAS2\", \"HLA-DOA\", \"CD247\", \"CD96\", \"CD8A\", \"CD3E\",\n\"CD3D\", \"CD3G\", \"ITGAL\", \"LY86\", \"CCR5\", \"CCL4\", \"IGSF6\", \"CXCR3\", \"MMP9\", \"ITGB2\",\n\"CD80\", \"SIT1\", \"CRTAM\", \"CD79A\"]\n\ntarget_data_A = np.array(A)\ntarget_data_B = np.array(B)\ntarget_data_C = np.array(C)\ntarget_data_D = np.array(D)\ntarget_data_E = np.array(E)\nALL = [target_data_A, target_data_B, target_data_C, target_data_D, target_data_E]\nALL_concatenated = np.concatenate(ALL)\n# Convert list A to numpy array and get unique elements preserving order\ntarget_data = np.array(ALL_concatenated)\nprint(target_data)\n\ngroups = ['TransPropy', 'deseq2', 'edgeR', 'limma', 'outRst']\ngroups_colors = plt.get_cmap('Set2').colors[:5]\n# Repeat counts for each group\nrepeat_counts = [175, 86, 41, 235, 174]\n# Repeating each group name by the respective counts\nrepeated_group_names = np.repeat(groups, repeat_counts)\n# Printing the repeated group names\nprint(repeated_group_names)\n#target_data = np.concatenate([np.random.choice(1000, 100, replace=False) for i in range(len(groups))])\n\n# create a dataframe\nedge_data = pd.DataFrame({'source': repeated_group_names, 'target': target_data})\nedge_data = edge_data.assign(color = lambda x: x['source'].map(dict(zip(groups, groups_colors))))\n\nfig, ax = plt.subplots(figsize=(10, 10))\nVennNetworkPlot(edge_data,\n                edge_style=2,\n                target_node_size=15,\n                show_node_margin=True,\n                #show_target_label=True,\n                #target_font_size=4,\n                show_node_color=True,\n                k=0.1,\n                ax=ax)\nplt.show()\n\n\n\n\nVennNetwork core enrichment _ALOXE3_hallmarks_fivemethods"
  },
  {
    "objectID": "VennNetwork core enrichment.html#aloxe3_kegg",
    "href": "VennNetwork core enrichment.html#aloxe3_kegg",
    "title": "17  Comparison of TransPropy with Other Tool Packages Using VennNetwork with core enrichment (Gene: CFD/ANKRD35/ALOXE3)",
    "section": "17.8 ALOXE3_kegg",
    "text": "17.8 ALOXE3_kegg\n# r\n\n# Process the core enrichment genes from TransPropy_ALOXE3_kegg_y\nTransPropy_ALOXE3_kegg_core_enrichment &lt;- TransPropy_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ALOXE3_kegg_core_enrichment, correlation_TransPropy_ALOXE3)\n\n# Process the core enrichment genes from deseq2_ALOXE3_kegg_y\ndeseq2_ALOXE3_kegg_core_enrichment &lt;- deseq2_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ALOXE3_kegg_core_enrichment, correlation_deseq2_ALOXE3)\n\n# Process the core enrichment genes from edgeR_ALOXE3_kegg_y\nedgeR_ALOXE3_kegg_core_enrichment &lt;- edgeR_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ALOXE3_kegg_core_enrichment, correlation_edgeR_ALOXE3)\n\n# Process the core enrichment genes from limma_ALOXE3_kegg_y\nlimma_ALOXE3_kegg_core_enrichment &lt;- limma_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ALOXE3_kegg_core_enrichment, correlation_limma_ALOXE3)\n\n# Process the core enrichment genes from outRst_ALOXE3_kegg_y\noutRst_ALOXE3_kegg_core_enrichment &lt;- outRst_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ALOXE3_kegg_core_enrichment, correlation_outRst_ALOXE3)\n&gt; process_core_enrichment(TransPropy_ALOXE3_kegg_core_enrichment, correlation_TransPropy_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"ALOX12B\"  \"CYP2C18\"  \"PLA2G4B\"  \"CYP2C9\"   \"ALOX12\"   \"CYP2E1\"   \"CYP4F2\"   \"ALOX15B\"  \"CYP4A11\" \n[10] \"EPN3\"     \"CBLC\"     \"FGFR3\"    \"FGFR2\"    \"ADRB2\"    \"EGFR\"     \"CHMP4A\"   \"CYP3A5\"   \"ALDH3A1\" \n[19] \"CYP3A4\"   \"ALDH3B2\"  \"AKR1C2\"   \"GSTM5\"    \"ADH4\"     \"ADH6\"     \"ADH1B\"    \"AKR1C1\"   \"AKR1C3\"  \n[28] \"DGAT2\"    \"CYP26B1\"  \"AWAT2\"    \"CYP2D6\"   \"ACADL\"    \"CPT1B\"    \"AQP7\"     \"FABP4\"    \"PLIN1\"   \n[37] \"ADIPOQ\"   \"CALML5\"   \"CHP2\"     \"ADORA2A\"  \"ADCY4\"    \"CACNA1G\"  \"AGTR1\"    \"ADCY8\"    \"ADRA1A\"  \n[46] \"FGF22\"    \"FGF11\"    \"DUSP1\"    \"CD33\"     \"CSF1R\"    \"CSF2RA\"   \"HLA-DRA\"  \"CD5\"      \"CR2\"     \n[55] \"HLA-DRB5\" \"HLA-DRB1\" \"CD3E\"     \"CD3D\"     \"CD4\"      \"CD37\"     \"CD38\"     \"CD14\"     \"DNTT\"    \n[64] \"FCGR1A\"   \"CD7\"      \"CD19\"     \"CDC25C\"   \"CDC20\"    \"PTTG1\"    \"BUB1\"     \"CDC45\"    \"CCNB1\"   \n[73] \"CDC25A\"   \"CDC6\"     \"CDKN2A\"  \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 113 \nAll Number of genes with core enrichment (unique): 75 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 86 \nNumber of genes with negative correlation (notunique): 27 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 48 \nNumber of genes with negative correlation (unique): 27 \n\n\n&gt; process_core_enrichment(deseq2_ALOXE3_kegg_core_enrichment, correlation_deseq2_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"CHP2\"          \"PLA2G2F\"       \"PLA2G3\"        \"PLA2G4E\"       \"FGFR3\"         \"PLA2G4B\"      \n [7] \"FGF22\"         \"NTF4\"          \"FGFR2\"         \"FGF11\"         \"JMJD7-PLA2G4B\" \"EGFR\"         \n[13] \"ALOX12B\"       \"GGT6\"          \"CYP2C18\"       \"CYP4F3\"        \"CYP2C9\"        \"LTC4S\"        \n[19] \"UGT1A6\"        \"UGT1A7\"        \"CYP3A5\"        \"UGT1A4\"        \"UGT1A1\"        \"AKR1C2\"       \n[25] \"CYP2C19\"       \"UGT1A10\"       \"UGT1A5\"        \"ADH1B\"         \"UGT1A3\"        \"UGT2A1\"       \n[31] \"CYP1A2\"        \"CALML5\"        \"CALML3\"        \"SULT2B1\"       \"SULT1E1\"       \"HSD11B2\"      \n[37] \"HSD3B1\"        \"AWAT2\"         \"CBLC\"          \"LAMB4\"         \"WNT3A\"         \"CLDN4\"        \n[43] \"PPP2R2C\"       \"OCLN\"          \"CRB3\"          \"CLDN8\"         \"CLDN10\"        \"MYL2\"         \n[49] \"MYH6\"          \"MYL7\"          \"CLDN22\"       \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 115 \nAll Number of genes with core enrichment (unique): 51 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 115 \nNumber of genes with negative correlation (notunique): 0 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 51 \nNumber of genes with negative correlation (unique): 0 \n\n\n&gt; process_core_enrichment(edgeR_ALOXE3_kegg_core_enrichment, correlation_edgeR_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"CHP2\"          \"PLA2G2F\"       \"PLA2G3\"        \"PLA2G4E\"       \"FGFR3\"         \"PLA2G4B\"      \n [7] \"FGF22\"         \"NTF4\"          \"FGF11\"         \"JMJD7-PLA2G4B\" \"ALOX12B\"       \"GGT6\"         \n[13] \"CYP2C18\"       \"CYP4F3\"        \"LTC4S\"         \"UGT1A6\"        \"UGT1A7\"        \"CYP3A5\"       \n[19] \"UGT1A4\"        \"UGT1A1\"        \"CYP2C19\"       \"UGT1A10\"       \"UGT1A5\"        \"ADH1B\"        \n[25] \"UGT1A3\"        \"SULT2B1\"       \"HSD11B2\"       \"AMY2A\"         \"CBLC\"          \"LAMB4\"        \n[31] \"WNT3A\"        \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 77 \nAll Number of genes with core enrichment (unique): 31 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 77 \nNumber of genes with negative correlation (notunique): 0 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 31 \nNumber of genes with negative correlation (unique): 0 \n\n\n&gt; process_core_enrichment(limma_ALOXE3_kegg_core_enrichment, correlation_limma_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n [1] \"DGAT2\"         \"CYP2C18\"       \"UGT1A6\"        \"UGT1A7\"        \"CYP3A5\"        \"UGT1A1\"       \n [7] \"RDH12\"         \"PLA2G2F\"       \"PLA2G3\"        \"PLA2G4E\"       \"PLA2G4B\"       \"JMJD7-PLA2G4B\"\n[13] \"CYP2E1\"        \"AKR1B10\"       \"ALDH3A1\"       \"GSTA3\"         \"ALDH3B2\"       \"GSTM5\"        \n[19] \"MAOA\"          \"ADH1B\"         \"HLA-DQA2\"      \"HLA-DOA\"       \"NCF4\"          \"HLA-DQB1\"     \n[25] \"CR1\"           \"HLA-DRA\"       \"HLA-DQA1\"      \"NCF1\"          \"ITGAM\"         \"HLA-DRB5\"     \n[31] \"HLA-DRB1\"      \"IL10\"          \"FCGR3A\"        \"FCGR2A\"        \"IL1B\"          \"FCGR1A\"       \n[37] \"ITGB2\"         \"MARCKSL1\"      \"PTPRC\"         \"BTK\"           \"CD8A\"          \"IL2RG\"        \n[43] \"LCK\"           \"CD3E\"          \"CD3D\"          \"CD4\"           \"ICOS\"          \"CD79A\"        \n[49] \"CD86\"          \"C1QB\"          \"C1QA\"          \"C1QC\"          \"CD28\"          \"CD80\"         \n[55] \"CD8B\"          \"CSF2RA\"        \"CD5\"           \"CD3G\"          \"CD2\"           \"MS4A1\"        \n[61] \"CD38\"          \"CD14\"          \"IL2RA\"         \"CD22\"          \"PRF1\"          \"GZMB\"         \n[67] \"FASLG\"         \"HLA-G\"         \"CTLA4\"         \"LTA\"          \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 152 \nAll Number of genes with core enrichment (unique): 70 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 28 \nNumber of genes with negative correlation (notunique): 124 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 20 \nNumber of genes with negative correlation (unique): 50 \n\n\n&gt; process_core_enrichment(outRst_ALOXE3_kegg_core_enrichment, correlation_outRst_ALOXE3)\n#=================================================================================# \ncore_enrichment_list_unique_genes: \n  [1] \"ALOX12B\"       \"GGT6\"          \"CYP2C18\"       \"PLA2G2F\"       \"PLA2G3\"        \"CYP4F3\"       \n  [7] \"PLA2G4E\"       \"PLA2G4B\"       \"JMJD7-PLA2G4B\" \"CYP2C9\"        \"ALOX12\"        \"GPX2\"         \n [13] \"LTC4S\"         \"CALML5\"        \"MAPK13\"        \"CALML3\"        \"EGFR\"          \"DGAT2\"        \n [19] \"UGT1A6\"        \"UGT1A7\"        \"CYP3A5\"        \"UGT1A4\"        \"UGT1A1\"        \"RDH16\"        \n [25] \"RDH12\"         \"CHP2\"          \"WNT7B\"         \"WNT3A\"         \"WNT2B\"         \"WNT3\"         \n [31] \"FZD10\"         \"NOS1\"          \"FGFR3\"         \"FGF22\"         \"NTF4\"          \"FGFR2\"        \n [37] \"FGF11\"         \"CBLC\"          \"LAMB4\"         \"LAMA3\"         \"COL4A6\"        \"JUP\"          \n [43] \"CEBPA\"         \"EGLN3\"         \"HLA-DQA2\"      \"MPZ\"           \"CD8B\"          \"L1CAM\"        \n [49] \"HLA-DOA\"       \"SPN\"           \"HLA-DQA1\"      \"CD8A\"          \"CD6\"           \"HLA-DRB5\"     \n [55] \"HLA-DRB1\"      \"HLA-DPB1\"      \"PDCD1\"         \"CLDN14\"        \"CD86\"          \"CTLA4\"        \n [61] \"ITGAL\"         \"CD2\"           \"ICOS\"          \"ITGB2\"         \"CD80\"          \"SELL\"         \n [67] \"CD22\"          \"HLA-G\"         \"NLGN1\"         \"SDC3\"          \"MYH11\"         \"MYH6\"         \n [73] \"MYH7\"          \"MYH2\"          \"MYH1\"          \"LAMA2\"         \"PRF1\"          \"F10\"          \n [79] \"F3\"            \"MASP1\"         \"CFI\"           \"C1QB\"          \"C1QA\"          \"C1QC\"         \n [85] \"A2M\"           \"SERPINA1\"      \"CPB2\"          \"PLAT\"          \"FCGR3A\"        \"FCGR2A\"       \n [91] \"FCGR1A\"        \"MARCKSL1\"      \"CD74\"          \"LTA\"           \"CTSS\"          \"PIK3CG\"       \n [97] \"TLR8\"          \"CCL5\"          \"CCL4\"          \"CD14\"          \"CXCL9\"         \"TLR7\"         \n[103] \"CCL3\"          \"CXCL10\"        \"SPP1\"          \"CXCL11\"        \"PIK3CD\"        \"CD247\"        \n[109] \"LCK\"           \"NCR3\"          \"SH2D1A\"        \"ULBP1\"         \"CD244\"         \"FCER1G\"       \n[115] \"TYROBP\"        \"CD48\"          \"GZMB\"          \"FASLG\"         \"SHC4\"          \"CD5\"          \n[121] \"CD3E\"          \"CD3D\"          \"CD3G\"          \"MS4A1\"         \"CD38\"          \"IL2RA\"        \n[127] \"MME\"           \"CCR5\"          \"CCL18\"         \"CXCR3\"         \"CXCL13\"        \"ADCY1\"        \n[133] \"GNGT2\"         \"GNG7\"          \"GNG4\"          \"CCR1\"          \"CXCL6\"         \"CCL3L3\"       \n#=================================================================================# \nAll Number of genes with core enrichment (notunique): 280 \nAll Number of genes with core enrichment (unique): 138 \n#=================================================================================# \nNumber of genes with positive correlation (notunique): 82 \nNumber of genes with negative correlation (notunique): 198 \n#=================================================================================# \nNumber of genes with positive correlation (unique): 53 \nNumber of genes with negative correlation (unique): 85 \n# python\n# ALOXE3_kegg\nA = [\"ALOX12B\", \"CYP2C18\", \"PLA2G4B\", \"CYP2C9\", \"ALOX12\", \"CYP2E1\", \"CYP4F2\", \"ALOX15B\", \"CYP4A11\", \"EPN3\",\n\"CBLC\", \"FGFR3\", \"FGFR2\", \"ADRB2\", \"EGFR\", \"CHMP4A\", \"CYP3A5\", \"ALDH3A1\", \"CYP3A4\", \"ALDH3B2\",\n\"AKR1C2\", \"GSTM5\", \"ADH4\", \"ADH6\", \"ADH1B\", \"AKR1C1\", \"AKR1C3\", \"DGAT2\", \"CYP26B1\", \"AWAT2\",\n\"CYP2D6\", \"ACADL\", \"CPT1B\", \"AQP7\", \"FABP4\", \"PLIN1\", \"ADIPOQ\", \"CALML5\", \"CHP2\", \"ADORA2A\",\n\"ADCY4\", \"CACNA1G\", \"AGTR1\", \"ADCY8\", \"ADRA1A\", \"FGF22\", \"FGF11\", \"DUSP1\", \"CD33\", \"CSF1R\",\n\"CSF2RA\", \"HLA-DRA\", \"CD5\", \"CR2\", \"HLA-DRB5\", \"HLA-DRB1\", \"CD3E\", \"CD3D\", \"CD4\", \"CD37\",\n\"CD38\", \"CD14\", \"DNTT\", \"FCGR1A\", \"CD7\", \"CD19\", \"CDC25C\", \"CDC20\", \"PTTG1\", \"BUB1\",\n\"CDC45\", \"CCNB1\", \"CDC25A\", \"CDC6\", \"CDKN2A\"]\n\nB = [\"CHP2\", \"PLA2G2F\", \"PLA2G3\", \"PLA2G4E\", \"FGFR3\", \"PLA2G4B\", \"FGF22\", \"NTF4\", \"FGFR2\", \"FGF11\",\n\"JMJD7-PLA2G4B\", \"EGFR\", \"ALOX12B\", \"GGT6\", \"CYP2C18\", \"CYP4F3\", \"CYP2C9\", \"LTC4S\", \"UGT1A6\", \"UGT1A7\",\n\"CYP3A5\", \"UGT1A4\", \"UGT1A1\", \"AKR1C2\", \"CYP2C19\", \"UGT1A10\", \"UGT1A5\", \"ADH1B\", \"UGT1A3\", \"UGT2A1\",\n\"CYP1A2\", \"CALML5\", \"CALML3\", \"SULT2B1\", \"SULT1E1\", \"HSD11B2\", \"HSD3B1\", \"AWAT2\", \"CBLC\", \"LAMB4\",\n\"WNT3A\", \"CLDN4\", \"PPP2R2C\", \"OCLN\", \"CRB3\", \"CLDN8\", \"CLDN10\", \"MYL2\", \"MYH6\", \"MYL7\",\n\"CLDN22\"]\n\nC = [\"CHP2\", \"PLA2G2F\", \"PLA2G3\", \"PLA2G4E\", \"FGFR3\", \"PLA2G4B\", \"FGF22\", \"NTF4\", \"FGF11\", \"JMJD7-PLA2G4B\",\n\"ALOX12B\", \"GGT6\", \"CYP2C18\", \"CYP4F3\", \"LTC4S\", \"UGT1A6\", \"UGT1A7\", \"CYP3A5\", \"UGT1A4\", \"UGT1A1\",\n\"CYP2C19\", \"UGT1A10\", \"UGT1A5\", \"ADH1B\", \"UGT1A3\", \"SULT2B1\", \"HSD11B2\", \"AMY2A\", \"CBLC\", \"LAMB4\",\n\"WNT3A\"]\n\nD = [\"DGAT2\", \"CYP2C18\", \"UGT1A6\", \"UGT1A7\", \"CYP3A5\", \"UGT1A1\", \"RDH12\", \"PLA2G2F\", \"PLA2G3\", \"PLA2G4E\",\n\"PLA2G4B\", \"JMJD7-PLA2G4B\", \"CYP2E1\", \"AKR1B10\", \"ALDH3A1\", \"GSTA3\", \"ALDH3B2\", \"GSTM5\", \"MAOA\", \"ADH1B\",\n\"HLA-DQA2\", \"HLA-DOA\", \"NCF4\", \"HLA-DQB1\", \"CR1\", \"HLA-DRA\", \"HLA-DQA1\", \"NCF1\", \"ITGAM\", \"HLA-DRB5\",\n\"HLA-DRB1\", \"IL10\", \"FCGR3A\", \"FCGR2A\", \"IL1B\", \"FCGR1A\", \"ITGB2\", \"MARCKSL1\", \"PTPRC\", \"BTK\",\n\"CD8A\", \"IL2RG\", \"LCK\", \"CD3E\", \"CD3D\", \"CD4\", \"ICOS\", \"CD79A\", \"CD86\", \"C1QB\",\n\"C1QA\", \"C1QC\", \"CD28\", \"CD80\", \"CD8B\", \"CSF2RA\", \"CD5\", \"CD3G\", \"CD2\", \"MS4A1\",\n\"CD38\", \"CD14\", \"IL2RA\", \"CD22\", \"PRF1\", \"GZMB\", \"FASLG\", \"HLA-G\", \"CTLA4\", \"LTA\"]\n\nE = [\"ALOX12B\", \"GGT6\", \"CYP2C18\", \"PLA2G2F\", \"PLA2G3\", \"CYP4F3\", \"PLA2G4E\", \"PLA2G4B\", \"JMJD7-PLA2G4B\", \"CYP2C9\",\n\"ALOX12\", \"GPX2\", \"LTC4S\", \"CALML5\", \"MAPK13\", \"CALML3\", \"EGFR\", \"DGAT2\", \"UGT1A6\", \"UGT1A7\",\n\"CYP3A5\", \"UGT1A4\", \"UGT1A1\", \"RDH16\", \"RDH12\", \"CHP2\", \"WNT7B\", \"WNT3A\", \"WNT2B\", \"WNT3\",\n\"FZD10\", \"NOS1\", \"FGFR3\", \"FGF22\", \"NTF4\", \"FGFR2\", \"FGF11\", \"CBLC\", \"LAMB4\", \"LAMA3\",\n\"COL4A6\", \"JUP\", \"CEBPA\", \"EGLN3\", \"HLA-DQA2\", \"MPZ\", \"CD8B\", \"L1CAM\", \"HLA-DOA\", \"SPN\",\n\"HLA-DQA1\", \"CD8A\", \"CD6\", \"HLA-DRB5\", \"HLA-DRB1\", \"HLA-DPB1\", \"PDCD1\", \"CLDN14\", \"CD86\", \"CTLA4\",\n\"ITGAL\", \"CD2\", \"ICOS\", \"ITGB2\", \"CD80\", \"SELL\", \"CD22\", \"HLA-G\", \"NLGN1\", \"SDC3\",\n\"MYH11\", \"MYH6\", \"MYH7\", \"MYH2\", \"MYH1\", \"LAMA2\", \"PRF1\", \"F10\", \"F3\", \"MASP1\",\n\"CFI\", \"C1QB\", \"C1QA\", \"C1QC\", \"A2M\", \"SERPINA1\", \"CPB2\", \"PLAT\", \"FCGR3A\", \"FCGR2A\",\n\"FCGR1A\", \"MARCKSL1\", \"CD74\", \"LTA\", \"CTSS\", \"PIK3CG\", \"TLR8\", \"CCL5\", \"CCL4\", \"CD14\",\n\"CXCL9\", \"TLR7\", \"CCL3\", \"CXCL10\", \"SPP1\", \"CXCL11\", \"PIK3CD\", \"CD247\", \"LCK\", \"NCR3\",\n\"SH2D1A\", \"ULBP1\", \"CD244\", \"FCER1G\", \"TYROBP\", \"CD48\", \"GZMB\", \"FASLG\", \"SHC4\", \"CD5\",\n\"CD3E\", \"CD3D\", \"CD3G\", \"MS4A1\", \"CD38\", \"IL2RA\", \"MME\", \"CCR5\", \"CCL18\", \"CXCR3\",\n\"CXCL13\", \"ADCY1\", \"GNGT2\", \"GNG7\", \"GNG4\", \"CCR1\", \"CXCL6\", \"CCL3L3\"]\n\ntarget_data_A = np.array(A)\ntarget_data_B = np.array(B)\ntarget_data_C = np.array(C)\ntarget_data_D = np.array(D)\ntarget_data_E = np.array(E)\nALL = [target_data_A, target_data_B, target_data_C, target_data_D, target_data_E]\nALL_concatenated = np.concatenate(ALL)\n# Convert list A to numpy array and get unique elements preserving order\ntarget_data = np.array(ALL_concatenated)\nprint(target_data)\n\ngroups = ['TransPropy', 'deseq2', 'edgeR', 'limma', 'outRst']\ngroups_colors = plt.get_cmap('Set2').colors[:5]\n# Repeat counts for each group\nrepeat_counts = [75, 51, 31, 70, 138]\n# Repeating each group name by the respective counts\nrepeated_group_names = np.repeat(groups, repeat_counts)\n# Printing the repeated group names\nprint(repeated_group_names)\n#target_data = np.concatenate([np.random.choice(1000, 100, replace=False) for i in range(len(groups))])\n\n# create a dataframe\nedge_data = pd.DataFrame({'source': repeated_group_names, 'target': target_data})\nedge_data = edge_data.assign(color = lambda x: x['source'].map(dict(zip(groups, groups_colors))))\n\nfig, ax = plt.subplots(figsize=(10, 10))\nVennNetworkPlot(edge_data,\n                edge_style=2,\n                target_node_size=15,\n                show_node_margin=True,\n                #show_target_label=True,\n                #target_font_size=4,\n                show_node_color=True,\n                k=0.1,\n                ax=ax)\nplt.show()\n\n\nVennNetwork core enrichment ALOXE3_kegg_fivemethods\n\n\nAimMethodResult\n\n\nVerifying whether the gene sets selected by each method are completely independent can partly explain the comparability of the results produced by each method. If the results of each algorithm have common intersections and also possess unique characteristic genes, then the unique parts represent the specific features of each method. Consequently, the differences in subsequent analysis results are also caused by these unique genes. We can indirectly reflect the relative advantages of an algorithm through the relative advantages of the results.\nHowever, if the gene sets selected by each method are entirely independent, the subsequent analysis results are likely to be different as well. This increases the difficulty of comparing the characteristics of different algorithms. For instance, we cannot directly judge the superiority of an algorithm based on the number of enriched pathways, especially when these pathways are completely different from each other, as this is due to the distinct characteristics of the respective gene sets. The data distribution characteristics of the gene sets do not fully equate to biological characteristics.\nOur core objective is to select genes and pathways that have true regulatory relationships and to ensure that the selection results are as balanced and comprehensive as possible, without being influenced by the noise or distribution characteristics of the data itself. This is particularly important in the field of biology because the regulatory mechanisms of all pathways are the result of the coordinated work of different genes. Our main goal is to select key intersecting genes that can be identified by other algorithms, while also balancing the selection of other meaningful characteristic genes for further elucidation.\n\n\nCalculate the number of core enrichment genes in all significant pathways under different methods, and visualize them using Venn Network with each method as a set.\n\n\nThe characteristic genes obtained by the five methods intersect, indicating that even though the algorithms differ, they can still select a portion of the most core enrichment genes. Additionally, TransPropy, limma (linear model), and outRst each have some unique characteristic genes. These genes effectively complement the data, and as can be seen from the analysis results in the previous chapters, TransPropy’s supplementary effect is more balanced. Furthermore, the unique genes of deseq2 and edgeR (negative binomial distribution model) are relatively few (or even none). The lack of more characteristic genes to balance the results might be one of the important reasons why the pathway enrichment results were overly biased (almost all activating pathways, with very few or even no inhibiting pathways) in previous analyses."
  },
  {
    "objectID": "CircosBar core enrichment.html#select-data",
    "href": "CircosBar core enrichment.html#select-data",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.1 select data",
    "text": "18.1 select data\n# Example: Process the core enrichment genes from TransPropy_CFD_hallmarks_y\nTransPropy_CFD_hallmarks_core_enrichment &lt;- TransPropy_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_CFD_hallmarks_core_enrichment, correlation_TransPropy_CFD)\n\n# Process the core enrichment genes from deseq2_CFD_hallmarks_y\ndeseq2_CFD_hallmarks_core_enrichment &lt;- deseq2_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_CFD_hallmarks_core_enrichment, correlation_deseq2_CFD)\n\n# Process the core enrichment genes from edgeR_CFD_hallmarks_y\nedgeR_CFD_hallmarks_core_enrichment &lt;- edgeR_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_CFD_hallmarks_core_enrichment, correlation_edgeR_CFD)\n\n# Process the core enrichment genes from limma_CFD_hallmarks_y\nlimma_CFD_hallmarks_core_enrichment &lt;- limma_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_CFD_hallmarks_core_enrichment, correlation_limma_CFD)\n\n# Process the core enrichment genes from outRst_CFD_hallmarks_y\noutRst_CFD_hallmarks_core_enrichment &lt;- outRst_CFD_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_CFD_hallmarks_core_enrichment, correlation_outRst_CFD)\n\n\n\n\n# Process the core enrichment genes from TransPropy_CFD_kegg_y\nTransPropy_CFD_kegg_core_enrichment &lt;- TransPropy_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_CFD_kegg_core_enrichment, correlation_TransPropy_CFD)\n\n# Process the core enrichment genes from deseq2_CFD_kegg_y\ndeseq2_CFD_kegg_core_enrichment &lt;- deseq2_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_CFD_kegg_core_enrichment, correlation_deseq2_CFD)\n\n# Process the core enrichment genes from edgeR_CFD_kegg_y\nedgeR_CFD_kegg_core_enrichment &lt;- edgeR_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_CFD_kegg_core_enrichment, correlation_edgeR_CFD)\n\n# Process the core enrichment genes from limma_CFD_kegg_y\nlimma_CFD_kegg_core_enrichment &lt;- limma_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_CFD_kegg_core_enrichment, correlation_limma_CFD)\n\n# Process the core enrichment genes from outRst_CFD_kegg_y\noutRst_CFD_kegg_core_enrichment &lt;- outRst_CFD_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_CFD_kegg_core_enrichment, correlation_outRst_CFD)\n\n\n\n\n# Process the core enrichment genes from TransPropy_ANKRD35_hallmarks_y\nTransPropy_ANKRD35_hallmarks_core_enrichment &lt;- TransPropy_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ANKRD35_hallmarks_core_enrichment, correlation_TransPropy_ANKRD35)\n\n# Process the core enrichment genes from deseq2_ANKRD35_hallmarks_y\ndeseq2_ANKRD35_hallmarks_core_enrichment &lt;- deseq2_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ANKRD35_hallmarks_core_enrichment, correlation_deseq2_ANKRD35)\n\n# Process the core enrichment genes from edgeR_ANKRD35_hallmarks_y\nedgeR_ANKRD35_hallmarks_core_enrichment &lt;- edgeR_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ANKRD35_hallmarks_core_enrichment, correlation_edgeR_ANKRD35)\n\n# Process the core enrichment genes from limma_ANKRD35_hallmarks_y\nlimma_ANKRD35_hallmarks_core_enrichment &lt;- limma_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ANKRD35_hallmarks_core_enrichment, correlation_limma_ANKRD35)\n\n# Process the core enrichment genes from outRst_ANKRD35_hallmarks_y\noutRst_ANKRD35_hallmarks_core_enrichment &lt;- outRst_ANKRD35_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ANKRD35_hallmarks_core_enrichment, correlation_outRst_ANKRD35)\n\n\n\n\n# Process the core enrichment genes from TransPropy_ANKRD35_kegg_y\nTransPropy_ANKRD35_kegg_core_enrichment &lt;- TransPropy_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ANKRD35_kegg_core_enrichment, correlation_TransPropy_ANKRD35)\n\n# Process the core enrichment genes from deseq2_ANKRD35_kegg_y\ndeseq2_ANKRD35_kegg_core_enrichment &lt;- deseq2_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ANKRD35_kegg_core_enrichment, correlation_deseq2_ANKRD35)\n\n# Process the core enrichment genes from edgeR_ANKRD35_kegg_y\nedgeR_ANKRD35_kegg_core_enrichment &lt;- edgeR_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ANKRD35_kegg_core_enrichment, correlation_edgeR_ANKRD35)\n\n# Process the core enrichment genes from limma_ANKRD35_kegg_y\nlimma_ANKRD35_kegg_core_enrichment &lt;- limma_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ANKRD35_kegg_core_enrichment, correlation_limma_ANKRD35)\n\n# Process the core enrichment genes from outRst_ANKRD35_kegg_y\noutRst_ANKRD35_kegg_core_enrichment &lt;- outRst_ANKRD35_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ANKRD35_kegg_core_enrichment, correlation_outRst_ANKRD35)\n\n\n\n\n# Process the core enrichment genes from TransPropy_ALOXE3_hallmarks_y\nTransPropy_ALOXE3_hallmarks_core_enrichment &lt;- TransPropy_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ALOXE3_hallmarks_core_enrichment, correlation_TransPropy_ALOXE3)\n\n# Process the core enrichment genes from deseq2_ALOXE3_hallmarks_y\ndeseq2_ALOXE3_hallmarks_core_enrichment &lt;- deseq2_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ALOXE3_hallmarks_core_enrichment, correlation_deseq2_ALOXE3)\n\n# Process the core enrichment genes from edgeR_ALOXE3_hallmarks_y\nedgeR_ALOXE3_hallmarks_core_enrichment &lt;- edgeR_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ALOXE3_hallmarks_core_enrichment, correlation_edgeR_ALOXE3)\n\n# Process the core enrichment genes from limma_ALOXE3_hallmarks_y\nlimma_ALOXE3_hallmarks_core_enrichment &lt;- limma_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ALOXE3_hallmarks_core_enrichment, correlation_limma_ALOXE3)\n\n# Process the core enrichment genes from outRst_ALOXE3_hallmarks_y\noutRst_ALOXE3_hallmarks_core_enrichment &lt;- outRst_ALOXE3_hallmarks_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ALOXE3_hallmarks_core_enrichment, correlation_outRst_ALOXE3)\n\n\n\n\n# Process the core enrichment genes from TransPropy_ALOXE3_kegg_y\nTransPropy_ALOXE3_kegg_core_enrichment &lt;- TransPropy_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(TransPropy_ALOXE3_kegg_core_enrichment, correlation_TransPropy_ALOXE3)\n\n# Process the core enrichment genes from deseq2_ALOXE3_kegg_y\ndeseq2_ALOXE3_kegg_core_enrichment &lt;- deseq2_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(deseq2_ALOXE3_kegg_core_enrichment, correlation_deseq2_ALOXE3)\n\n# Process the core enrichment genes from edgeR_ALOXE3_kegg_y\nedgeR_ALOXE3_kegg_core_enrichment &lt;- edgeR_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(edgeR_ALOXE3_kegg_core_enrichment, correlation_edgeR_ALOXE3)\n\n# Process the core enrichment genes from limma_ALOXE3_kegg_y\nlimma_ALOXE3_kegg_core_enrichment &lt;- limma_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(limma_ALOXE3_kegg_core_enrichment, correlation_limma_ALOXE3)\n\n# Process the core enrichment genes from outRst_ALOXE3_kegg_y\noutRst_ALOXE3_kegg_core_enrichment &lt;- outRst_ALOXE3_kegg_y@result[[\"core_enrichment\"]]\nprocess_core_enrichment(outRst_ALOXE3_kegg_core_enrichment, correlation_outRst_ALOXE3)"
  },
  {
    "objectID": "CircosBar core enrichment.html#data",
    "href": "CircosBar core enrichment.html#data",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.2 data",
    "text": "18.2 data\nbarcircosdata = tribble(\n  ~Gene,    ~Pathway,   ~Methods, ~type, ~Pos_Neg, ~count,\n  \n  \"CFD\",  \"hallmarks\",\"deseq2\", \"unique\",\"positive\",61,\n  \"CFD\",  \"hallmarks\",\"deseq2\", \"unique\",\"negative\",21,\n  \"CFD\",  \"hallmarks\",\"deseq2\", \"notunique\",\"positive\",79,\n  \"CFD\",  \"hallmarks\",\"deseq2\", \"notunique\",\"negative\",21,\n  \"CFD\",  \"hallmarks\",\"edgeR\",\"unique\",\"positive\",43,\n  \"CFD\",  \"hallmarks\",\"edgeR\",\"unique\",\"negative\",21,\n  \"CFD\",  \"hallmarks\",\"edgeR\",\"notunique\",\"positive\",52,\n  \"CFD\",  \"hallmarks\",\"edgeR\",\"notunique\",\"negative\",21,\n  \"CFD\",  \"hallmarks\",\"TransPropy\",\"unique\", \"positive\",45,\n  \"CFD\",  \"hallmarks\",\"TransPropy\",\"unique\", \"negative\",74,\n  \"CFD\",  \"hallmarks\",\"TransPropy\",\"notunique\",\"positive\",48,\n  \"CFD\",  \"hallmarks\",\"TransPropy\",\"notunique\",\"negative\",102,\n  \"CFD\",  \"hallmarks\",\"limma\",\"unique\",\"positive\",84,\n  \"CFD\",  \"hallmarks\",\"limma\",\"unique\",\"negative\",143,\n  \"CFD\",  \"hallmarks\",\"limma\",\"notunique\",\"positive\",93,\n  \"CFD\",  \"hallmarks\",\"limma\",\"notunique\",\"negative\",213,\n  \"CFD\",  \"hallmarks\",\"outRst\",\"unique\",\"positive\",37,\n  \"CFD\",  \"hallmarks\",\"outRst\",\"unique\",\"negative\",97,\n  \"CFD\",  \"hallmarks\",\"outRst\",\"notunique\",\"positive\",38,\n  \"CFD\",  \"hallmarks\",\"outRst\",\"notunique\",\"negative\",150,\n  \n\n  \"CFD\",  \"kegg\",\"deseq2\", \"unique\",\"positive\",38,\n  \"CFD\",  \"kegg\",\"deseq2\", \"unique\",\"negative\",0,\n  \"CFD\",  \"kegg\",\"deseq2\", \"notunique\",\"positive\",83,\n  \"CFD\",  \"kegg\",\"deseq2\", \"notunique\",\"negative\",0,\n  \"CFD\",  \"kegg\",\"edgeR\",\"unique\",\"positive\",28,\n  \"CFD\",  \"kegg\",\"edgeR\",\"unique\",\"negative\",0,\n  \"CFD\",  \"kegg\",\"edgeR\",\"notunique\",\"positive\",53,\n  \"CFD\",  \"kegg\",\"edgeR\",\"notunique\",\"negative\",0,\n  \"CFD\",  \"kegg\",\"TransPropy\",\"unique\", \"positive\",51,\n  \"CFD\",  \"kegg\",\"TransPropy\",\"unique\", \"negative\",23,\n  \"CFD\",  \"kegg\",\"TransPropy\",\"notunique\",\"positive\",94,\n  \"CFD\",  \"kegg\",\"TransPropy\",\"notunique\",\"negative\",23,\n  \"CFD\",  \"kegg\",\"limma\",\"unique\",\"positive\",31,\n  \"CFD\",  \"kegg\",\"limma\",\"unique\",\"negative\",77,\n  \"CFD\",  \"kegg\",\"limma\",\"notunique\",\"positive\",41,\n  \"CFD\",  \"kegg\",\"limma\",\"notunique\",\"negative\",152,\n  \"CFD\",  \"kegg\",\"outRst\",\"unique\",\"positive\",24,\n  \"CFD\",  \"kegg\",\"outRst\",\"unique\",\"negative\",81,\n  \"CFD\",  \"kegg\",\"outRst\",\"notunique\",\"positive\",31,\n  \"CFD\",  \"kegg\",\"outRst\",\"notunique\",\"negative\",179,\n  \n  \n  \n  \n  \"ANKRD35\",  \"hallmarks\",\"deseq2\", \"unique\",\"positive\",62,\n  \"ANKRD35\",  \"hallmarks\",\"deseq2\", \"unique\",\"negative\",21,\n  \"ANKRD35\",  \"hallmarks\",\"deseq2\", \"notunique\",\"positive\",84,\n  \"ANKRD35\",  \"hallmarks\",\"deseq2\", \"notunique\",\"negative\",21,\n  \"ANKRD35\",  \"hallmarks\",\"edgeR\",\"unique\",\"positive\",43,\n  \"ANKRD35\",  \"hallmarks\",\"edgeR\",\"unique\",\"negative\",21,\n  \"ANKRD35\",  \"hallmarks\",\"edgeR\",\"notunique\",\"positive\",52,\n  \"ANKRD35\",  \"hallmarks\",\"edgeR\",\"notunique\",\"negative\",21,\n  \"ANKRD35\",  \"hallmarks\",\"TransPropy\",\"unique\", \"positive\",59,\n  \"ANKRD35\",  \"hallmarks\",\"TransPropy\",\"unique\", \"negative\",87,\n  \"ANKRD35\",  \"hallmarks\",\"TransPropy\",\"notunique\",\"positive\",67,\n  \"ANKRD35\",  \"hallmarks\",\"TransPropy\",\"notunique\",\"negative\",119,\n  \"ANKRD35\",  \"hallmarks\",\"limma\",\"unique\",\"positive\",108,\n  \"ANKRD35\",  \"hallmarks\",\"limma\",\"unique\",\"negative\",153,\n  \"ANKRD35\",  \"hallmarks\",\"limma\",\"notunique\",\"positive\",135,\n  \"ANKRD35\",  \"hallmarks\",\"limma\",\"notunique\",\"negative\",231,\n  \"ANKRD35\",  \"hallmarks\",\"outRst\",\"unique\",\"positive\",56,\n  \"ANKRD35\",  \"hallmarks\",\"outRst\",\"unique\",\"negative\",101,\n  \"ANKRD35\",  \"hallmarks\",\"outRst\",\"notunique\",\"positive\",71,\n  \"ANKRD35\",  \"hallmarks\",\"outRst\",\"notunique\",\"negative\",160,\n  \n  \n\n  \"ANKRD35\",  \"kegg\",\"deseq2\", \"unique\",\"positive\",42,\n  \"ANKRD35\",  \"kegg\",\"deseq2\", \"unique\",\"negative\",14,\n  \"ANKRD35\",  \"kegg\",\"deseq2\", \"notunique\",\"positive\",91,\n  \"ANKRD35\",  \"kegg\",\"deseq2\", \"notunique\",\"negative\",14,\n  \"ANKRD35\",  \"kegg\",\"edgeR\",\"unique\",\"positive\",29,\n  \"ANKRD35\",  \"kegg\",\"edgeR\",\"unique\",\"negative\",0,\n  \"ANKRD35\",  \"kegg\",\"edgeR\",\"notunique\",\"positive\",72,\n  \"ANKRD35\",  \"kegg\",\"edgeR\",\"notunique\",\"negative\",0,\n  \"ANKRD35\",  \"kegg\",\"TransPropy\",\"unique\", \"positive\",53,\n  \"ANKRD35\",  \"kegg\",\"TransPropy\",\"unique\", \"negative\",42,\n  \"ANKRD35\",  \"kegg\",\"TransPropy\",\"notunique\",\"positive\",97,\n  \"ANKRD35\",  \"kegg\",\"TransPropy\",\"notunique\",\"negative\",63,\n  \"ANKRD35\",  \"kegg\",\"limma\",\"unique\",\"positive\",40,\n  \"ANKRD35\",  \"kegg\",\"limma\",\"unique\",\"negative\",105,\n  \"ANKRD35\",  \"kegg\",\"limma\",\"notunique\",\"positive\",74,\n  \"ANKRD35\",  \"kegg\",\"limma\",\"notunique\",\"negative\",246,\n  \"ANKRD35\",  \"kegg\",\"outRst\",\"unique\",\"positive\",22,\n  \"ANKRD35\",  \"kegg\",\"outRst\",\"unique\",\"negative\",81,\n  \"ANKRD35\",  \"kegg\",\"outRst\",\"notunique\",\"positive\",27,\n  \"ANKRD35\",  \"kegg\",\"outRst\",\"notunique\",\"negative\",192,\n  \n  \n  \n\n  \"ALOXE3\",  \"hallmarks\",\"deseq2\", \"unique\",\"positive\",65,\n  \"ALOXE3\",  \"hallmarks\",\"deseq2\", \"unique\",\"negative\",21,\n  \"ALOXE3\",  \"hallmarks\",\"deseq2\", \"notunique\",\"positive\",87,\n  \"ALOXE3\",  \"hallmarks\",\"deseq2\", \"notunique\",\"negative\",21,\n  \"ALOXE3\",  \"hallmarks\",\"edgeR\",\"unique\",\"positive\",41,\n  \"ALOXE3\",  \"hallmarks\",\"edgeR\",\"unique\",\"negative\",0,\n  \"ALOXE3\",  \"hallmarks\",\"edgeR\",\"notunique\",\"positive\",49,\n  \"ALOXE3\",  \"hallmarks\",\"edgeR\",\"notunique\",\"negative\",0,\n  \"ALOXE3\",  \"hallmarks\",\"TransPropy\",\"unique\", \"positive\",71,\n  \"ALOXE3\",  \"hallmarks\",\"TransPropy\",\"unique\", \"negative\",104,\n  \"ALOXE3\",  \"hallmarks\",\"TransPropy\",\"notunique\",\"positive\",85,\n  \"ALOXE3\",  \"hallmarks\",\"TransPropy\",\"notunique\",\"negative\",141,\n  \"ALOXE3\",  \"hallmarks\",\"limma\",\"unique\",\"positive\",96,\n  \"ALOXE3\",  \"hallmarks\",\"limma\",\"unique\",\"negative\",139,\n  \"ALOXE3\",  \"hallmarks\",\"limma\",\"notunique\",\"positive\",119,\n  \"ALOXE3\",  \"hallmarks\",\"limma\",\"notunique\",\"negative\",204,\n  \"ALOXE3\",  \"hallmarks\",\"outRst\",\"unique\",\"positive\",73,\n  \"ALOXE3\",  \"hallmarks\",\"outRst\",\"unique\",\"negative\",101,\n  \"ALOXE3\",  \"hallmarks\",\"outRst\",\"notunique\",\"positive\",91,\n  \"ALOXE3\",  \"hallmarks\",\"outRst\",\"notunique\",\"negative\",161,\n  \n  \n  \n  \n\n  \"ALOXE3\",  \"kegg\",\"deseq2\", \"unique\",\"positive\",51,\n  \"ALOXE3\",  \"kegg\",\"deseq2\", \"unique\",\"negative\",0,\n  \"ALOXE3\",  \"kegg\",\"deseq2\", \"notunique\",\"positive\",115,\n  \"ALOXE3\",  \"kegg\",\"deseq2\", \"notunique\",\"negative\",0,\n  \"ALOXE3\",  \"kegg\",\"edgeR\",\"unique\",\"positive\",31,\n  \"ALOXE3\",  \"kegg\",\"edgeR\",\"unique\",\"negative\",0,\n  \"ALOXE3\",  \"kegg\",\"edgeR\",\"notunique\",\"positive\",77,\n  \"ALOXE3\",  \"kegg\",\"edgeR\",\"notunique\",\"negative\",0,\n  \"ALOXE3\",  \"kegg\",\"TransPropy\",\"unique\", \"positive\",48,\n  \"ALOXE3\",  \"kegg\",\"TransPropy\",\"unique\", \"negative\",27,\n  \"ALOXE3\",  \"kegg\",\"TransPropy\",\"notunique\",\"positive\",86,\n  \"ALOXE3\",  \"kegg\",\"TransPropy\",\"notunique\",\"negative\",27,\n  \"ALOXE3\",  \"kegg\",\"limma\",\"unique\",\"positive\",20,\n  \"ALOXE3\",  \"kegg\",\"limma\",\"unique\",\"negative\",50,\n  \"ALOXE3\",  \"kegg\",\"limma\",\"notunique\",\"positive\",28,\n  \"ALOXE3\",  \"kegg\",\"limma\",\"notunique\",\"negative\",124,\n  \"ALOXE3\",  \"kegg\",\"outRst\",\"unique\",\"positive\",53,\n  \"ALOXE3\",  \"kegg\",\"outRst\",\"unique\",\"negative\",85,\n  \"ALOXE3\",  \"kegg\",\"outRst\",\"notunique\",\"positive\",82,\n  \"ALOXE3\",  \"kegg\",\"outRst\",\"notunique\",\"negative\",198\n  \n)"
  },
  {
    "objectID": "CircosBar core enrichment.html#first-image",
    "href": "CircosBar core enrichment.html#first-image",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.3 first image",
    "text": "18.3 first image\nbarcircosdata$Kind5 &lt;-1\n\ntest_df2 &lt;- barcircosdata %&gt;%\n  dplyr::mutate(Pathway = str_c(Gene, Pathway, sep = \"_\")) %&gt;%\n  dplyr::mutate(Methods = str_c(Pathway, Methods, sep = \"_\")) %&gt;%\n  dplyr::mutate(type = str_c(Methods, type, sep = \"_\"))\n# Kind3\n# Ensure that the order of type remains consistent throughout the process and apply angle calculations correctly. It may be necessary to further check and adjust the logic of the code.\n# To ensure the correct order, explicitly set factor levels and sort the data before calculating angles.\n# Otherwise, the order of type in test_df_Kind4 and test_df2 may differ, causing mapping issues in subsequent plots.\n# Ensure the type column is a factor and ordered as needed\ntest_df2 &lt;- test_df2 %&gt;%\n  mutate(Methods = factor(Methods, levels = unique(Methods)))\n\ntest_df_Kind3 &lt;- test_df2 %&gt;%\n  group_by(Methods) %&gt;%\n  summarise(sum_Kind = sum(Kind5), .groups = 'drop') %&gt;%\n  mutate(cumsum_Kind = cumsum(sum_Kind),\n          total_Kind = sum(sum_Kind),\n          id = row_number(),  # Compute a unique row number for each Methods\n         angle = 90 - 360 * (id - 0.5) / n(),  # Use a new angle calculation formula\n          hjust = ifelse(angle &lt; -90, 0.5, 0.5),\n          label_position = ifelse(angle &gt; -90, angle + 180, angle))  # Adjust angles\n\n# Ensure that the order of type remains consistent throughout the process and apply angle calculations correctly. It may be necessary to further check and adjust the logic of the code.\n# To ensure the correct order, explicitly set factor levels and sort the data before calculating angles.\n# Otherwise, the order of type in test_df_Kind4 and test_df2 may differ, causing mapping issues in subsequent plots.\n# Ensure the type column is a factor and ordered as needed\ntest_df2 &lt;- test_df2 %&gt;%\n  mutate(type = factor(type, levels = unique(type)))\n\n# Kind4\ntest_df_Kind4 &lt;- test_df2 %&gt;%\n  group_by(type) %&gt;%\n  summarise(sum_Kind = sum(Kind5), .groups = 'drop') %&gt;%\n  arrange(type) %&gt;%  # Sort by type\n  mutate(cumsum_Kind = cumsum(sum_Kind),\n          total_Kind = sum(sum_Kind),\n          id = row_number(),  # Compute a unique row number for each type\n         angle = 90 - 360 * (id - 0.5) / n(),  # Use a new angle calculation formula\n          hjust = ifelse(angle &lt; -90, 0.5, 0.5),\n          label_position = ifelse(angle &gt; -90, angle + 180, angle))  # Adjust angles\nggplot(data = test_df2) + \n  # Kind\n  geom_col(data = test_df2 %&gt;%\n             dplyr::group_by(Gene) %&gt;%\n             dplyr::summarise(sum_Kind = sum(Kind5)),\n           aes(x = 0, y = sum_Kind, fill = Gene), fill = \"#863630\", color = \"#ffffff\", width = 1, alpha = 0.9) + \n  geom_text(data = test_df2 %&gt;%\n              dplyr::select(Gene, Kind5) %&gt;%\n              dplyr::group_by(Gene) %&gt;%\n              dplyr::summarise(sum_Kind = sum(Kind5)) %&gt;%\n              dplyr::mutate(cumsum_Kind = cumsum(sum_Kind),\n                            id = 1:nrow(.)),\n            aes(x = 0, y = cumsum_Kind - 0.5 * sum_Kind, label = Gene),\n            angle = c(-60, 0, 60),\n            vjust = c(0.5, 0.5, 0.5),\n            color = \"#000000\",\n            size = 4\n  ) + \n  # Kind2\n  geom_col(data = test_df2 %&gt;%\n             dplyr::group_by(Pathway) %&gt;%\n             dplyr::summarise(sum_Kind2 = sum(Kind5)),\n           aes(x = 1, y = sum_Kind2, fill = Pathway), fill = \"#f57918\", color = \"#ffffff\", width = 1, alpha = 0.9) +\n  geom_text(data = test_df2 %&gt;%\n              dplyr::select(Pathway, Kind5) %&gt;%\n              dplyr::group_by(Pathway) %&gt;%\n              dplyr::summarise(sum_Kind = sum(Kind5)) %&gt;%\n              dplyr::mutate(cumsum_Kind = cumsum(sum_Kind)),\n            aes(x = 1, y = cumsum_Kind - 0.5 * sum_Kind, label = str_remove(Pathway, pattern = \".*_\")),\n            color = \"#000000\",\n            size = 3.5\n  ) + \n  # Kind3\n  geom_col(data = test_df2 %&gt;%\n             dplyr::group_by(Methods) %&gt;%\n             dplyr::summarise(sum_Kind3 = sum(Kind5)),\n           aes(x = 2, y = sum_Kind3, fill = Methods), fill = \"#f5b201\", color = \"#ffffff\", width = 1, alpha = 0.9) + \n  geom_text(data = test_df_Kind3,\n            aes(x = 2, y = cumsum_Kind - 0.5 * sum_Kind, label = str_remove(Methods, pattern = \".*_\"), hjust=hjust),\n            angle= test_df_Kind3$label_position + 180,\n            color = \"#000000\",\n            size = 3\n  ) + \n  # Kind4\n  geom_col(data = test_df2 %&gt;%\n             dplyr::group_by(type) %&gt;%\n             dplyr::summarise(sum_Kind4 = sum(Kind5)),\n           aes(x = 3, y = sum_Kind4, fill = type), fill = \"#f4d301\", color = \"#ffffff\", width = 1, alpha = 0.9) + \n  geom_text(data = test_df_Kind4,\n            aes(x = 3, y = cumsum_Kind - 0.5 * sum_Kind, label = str_remove(type, pattern = \".*_\"), hjust=hjust),\n            angle= test_df_Kind4$label_position+ 180,\n            color = \"#000000\",\n            size = 3.1\n  )+ \n  coord_polar(theta = \"y\") + \n  theme_nothing() + \n  theme(plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = \"cm\"))-&gt; p1\n\np1\n# Merge columns\nbarcircosdata1 &lt;- barcircosdata %&gt;%\n  unite(\"Name\", Gene, Pathway, Methods, type, sep = \"_\")\n\n# Generate ID column\nplot_test_df2 &lt;- barcircosdata1 %&gt;%\n  mutate(ID = as.numeric(factor(Name, levels = unique(Name))))\n\n# If IDs are duplicated, angle calculations will indeed be affected, as angles are calculated based on the number of rows (nrow). We can modify the code to ensure that each unique ID has only one angle, instead of calculating the angle for each row. We need to group the data and perform angle calculations.\n# We can use distinct to extract unique IDs and calculate angles based on the unique IDs, then merge back to the original dataframe.\n# Extract unique IDs and calculate angles\nunique_ids &lt;- plot_test_df2 %&gt;%\n  distinct(ID) %&gt;%\n  arrange(ID) %&gt;%\n  mutate(\n    angle = 90 - 360 * (ID - 0.5) / n(),\n    hjust = ifelse(angle &lt; -90, 1, 0),\n    angle2 = ifelse(angle &lt; -90, angle + 180, angle)\n  )\n\n# Merge angle information back to the original dataframe\nplot_test_df2 &lt;- plot_test_df2 %&gt;%\n  left_join(unique_ids, by = \"ID\")\n\n# Calculate percentage\nplot_test_df2 &lt;- plot_test_df2 %&gt;%\n  group_by(ID) %&gt;%\n  mutate(total = sum(count),\n         percentage = (count / total) * 100) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "CircosBar core enrichment.html#second-image",
    "href": "CircosBar core enrichment.html#second-image",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.4 second image",
    "text": "18.4 second image\n# Bar stacking (alternative)\n\np21 &lt;- ggplot(plot_test_df2, aes(x = as.factor(ID), y = count, fill = Pos_Neg)) +\n  geom_bar(position = \"stack\", color = \"#000000\", stat = \"identity\", alpha = 0.9) +\n  scale_fill_manual(values = c('#236d18', '#8daf00')) + # Custom color\n  geom_text(aes(x = as.factor(ID), y = count + 10, label = count), \n            position = position_stack(vjust = 0), # Ensure each label starts at the beginning of each stacked bar\n            color = \"#000000\", \n            fontface = \"bold\",\n            size = 3, \n            angle = plot_test_df2$angle2, \n            hjust = plot_test_df2$hjust) + \n  ylim(-770, 370) +\n  theme_void() +\n  theme(\n    legend.position = c(0.99, 0.5)\n  ) +\n  coord_polar(start = 0)\n\n# Print the plot\nprint(p21)\n\n# Percentage\n# Create plot\np21 &lt;- ggplot(plot_test_df2, aes(x = as.factor(ID), y = percentage, fill = Pos_Neg)) +\n  geom_bar(position = \"stack\", color = \"#000000\", stat = \"identity\", alpha = 0.9) +\n  scale_fill_manual(values = c('#236d18', '#8daf00')) + # Custom color\n  geom_text(aes(x = as.factor(ID), y = percentage + 10, label = paste0(round(percentage, 0), \"%\")), \n            position = position_stack(vjust = 0.1), # Ensure each label is at 0.1 height of each stacked bar\n            color = \"#000000\", \n            fontface = \"bold\",\n            size = 3, \n            angle = plot_test_df2$angle2, \n            hjust = plot_test_df2$hjust) + \n  ylim(-210, 110) +\n  theme_void() +\n  theme(\n    legend.position = c(1, 0.5)\n  ) +\n  coord_polar(start = 0) +\n  # Add the 50% line\n  geom_segment(aes(x = 0.5, xend = length(unique(ID)) + 0.5, \n                   y = 50, yend = 50), \n               color = \"#e5d87c\", size = 1.5, alpha = 0.7)\n\n# Print the plot\nprint(p21)"
  },
  {
    "objectID": "CircosBar core enrichment.html#third-image",
    "href": "CircosBar core enrichment.html#third-image",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.5 third image",
    "text": "18.5 third image\n# Create df111 data frame\ndf111 &lt;- data.frame(\n  methods = rep(c(\"TransPropy\", \"deseq2\", \"edgeR\", \"limma\", \"outRst\"), times = 6),\n  ID = 1:length(methods),\n  segment = rep(c(rep(\"hallmarks\", times = 5), rep(\"kegg\", times = 5)), times = 3),\n  segmentcolors = rep(c(\"#f5b201\", \"#f5b201\", \"#3c7a38\", \"#f57918\", \"#f57918\"), times = 6)\n)\n\n# Add start and end columns to indicate the start and end of each bar\ndf111$start &lt;- (df111$ID - 1) * 1\ndf111$end &lt;- df111$ID * 1\n# Plot color segments without gaps\np3 &lt;- ggplot(df111) +\n  geom_rect(aes(xmin = start, xmax = end, ymin = 0, ymax = 15, fill = segmentcolors), alpha = 0.9) +\n  scale_fill_identity() +  # Use identity mapping for colors\n  theme_void() +\n  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.title.y = element_blank()) +\n  coord_polar(start = 0) +\n  ylim(-200, 50)\n\n# Plot color segments with gaps (alternative)\np3 &lt;- ggplot(df111, aes(x = factor(ID), y = 10, fill = segmentcolors)) +\n  geom_col(alpha = 0.9) +\n  scale_fill_identity() +  # Use identity mapping for colors\n  theme_void() +\n  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.title.y = element_blank()) +\n  coord_polar(start = 0) +\n  ylim(-200, 50)\n\n# Display the plot\nprint(p3)"
  },
  {
    "objectID": "CircosBar core enrichment.html#combine-plots-count",
    "href": "CircosBar core enrichment.html#combine-plots-count",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.6 Combine plots (count)",
    "text": "18.6 Combine plots (count)\n# Combine plots\np_combine &lt;- ggdraw(p21) + \n  draw_plot(p1, x = 0.15, y = 0.15, width = 0.7, height = 0.7) +\n  draw_plot(p3, x = -0.125, y = -0.125, width = 1.25, height = 1.25)\n\n# Display the combined plot\nprint(p_combine)\n\n\nCircosBar core enrichment_count"
  },
  {
    "objectID": "CircosBar core enrichment.html#combine-plots-percentage",
    "href": "CircosBar core enrichment.html#combine-plots-percentage",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.6 Combine plots (percentage)",
    "text": "18.6 Combine plots (percentage)\n# Combine plots\np_combine &lt;- ggdraw(p21) + \n  draw_plot(p1, x = 0.15, y = 0.15, width = 0.7, height = 0.7) +\n  draw_plot(p3, x = -0.125, y = -0.125, width = 1.25, height = 1.25)\n\n# Display the combined plot\nprint(p_combine)\n\n\nCircosBar core enrichment_percentage"
  },
  {
    "objectID": "CircosBar core enrichment.html#methods",
    "href": "CircosBar core enrichment.html#methods",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.7 Methods",
    "text": "18.7 Methods\n\n\nFinding the top three genes with the highest countdown: CFD, ANKRD35, ALOXE3\nCount the number of core enrichment genes in the activated and inhibited pathways enriched under different genes (CFD, ANKRD35, ALOXE3), different pathway types, and different methods. This is done in two versions: unique (where all genes are deduplicated) and notunique (where the same gene appearing in different pathways is not deduplicated)."
  },
  {
    "objectID": "CircosBar core enrichment.html#discussion",
    "href": "CircosBar core enrichment.html#discussion",
    "title": "18  Comparison of TransPropy with Other Tool Packages Using CircosBar",
    "section": "18.8 Discussion",
    "text": "18.8 Discussion\n\nAlldeseq2/edgeRlimma/outRstTransPropy\n\n\nThe imbalance in the ratio of negative and positive genes observed in all unique groups (30 groups) will be further amplified in all notunique groups (30 groups). To understand this phenomenon, we conduct the following reasoning:\nSince super core enrichment genes (those that repeatedly appear in different pathways) naturally play regulatory roles in more pathways, they tend to recur in the core enrichment gene statistics of all pathways. Now, let’s take a random example of a unique group and a notunique group. If the unique group consists entirely of ordinary core enrichment genes or super core enrichment genes, and each super core enrichment gene has the same repetition frequency, the final ratio will remain unchanged.\nSo, under what circumstances will the ratio disparity further amplify?\nTaking the ratio of negative to positive genes greater than 0.5 as an example, both negative and positive genes have their own core enrichment and super core enrichment genes. The ratio will only further increase if the number or repetition degree of super core enrichment genes in negative genes is greater than that in positive genes. The ability to identify more super core enrichment genes or those with higher repetition frequencies (indicating greater importance) is the ideal goal of all algorithms, and this effect is consistently significant across all five algorithms.\n\n\nThe proportion of positively correlated genes is greater than that of negatively correlated genes (with some even having a ratio of 1), indicating a bias in the data results.\n\n\nIn contrast to deseq2/edgeR, the proportion of positively correlated core genes is less than that of negatively correlated genes (with some ratios of positive to negative gene counts approaching 0).\n\n\nThe ratio of positively to negatively correlated gene counts lies between those of deseq2/edgeR and limma/outRst. As shown in the figure, TransPropy occupies the central position among the five methods, displaying a smooth transition trend, with most ratios approaching 0.5.（Better）"
  },
  {
    "objectID": "Contact.html",
    "href": "Contact.html",
    "title": "19  Contact",
    "section": "",
    "text": "Any problems encountered or inspiration gained from using this Python package can be addressed by contacting me in the following ways. I am very willing to help you wholeheartedly.\n\nemailgithub\n\n\nyudongyue@mail.nankai.edu.cn\n\n\nhttps://github.com/SSSYDYSSS/TransProPy"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "20  References",
    "section": "",
    "text": "Su,Y., Du,K., Wang,J., Wei,J. and Liu,J. (2022) Multi-variable AUC for sifting complementary features and its biomedical application. Briefings in Bioinformatics, 23, bbac029.\nErickson, N., Mueller, J., Shirkov, A., Zhang, H., Larroy, P., Li, M., & Smola, A. (2020). AutoGluon-Tabular: Robust and Accurate AutoML for Structured Data. arXiv preprint arXiv:2003.06505.\nFakoor, R., Mueller, J., Erickson, N., Chaudhari, P., & Smola, A. J. (2020). Fast, Accurate, and Simple Models for Tabular Data via Augmented Distillation. arXiv preprint arXiv:2006.14284. \nShi, X., Mueller, J., Erickson, N., Li, M., & Smola, A. (2021). Multimodal AutoML on Structured Tables with Text Fields. In AutoML@ICML 2021. \nPrasanna, S. (2020, March 31). Machine learning with AutoGluon, an open source AutoML library. AWS Open Source Blog. \nSun, Y., Wu, C., Zhang, Z., He, T., Mueller, J., & Zhang, H. (n.d.). (2020). Image classification on Kaggle using AutoGluon. Medium.\nErickson, N., Mueller, J., Zhang, H., & Kamakoti, B. (2019). AutoGluon: Deep Learning AutoML. Medium.\nAutoGluon Predictors –AutoGluon Documentation 0.1.0 documentation\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis manual is meticulously crafted to elaborate on the principles of the referenced functions, with an emphasis on the methods and objectives users should be cognizant of when utilizing these functions. It is designed to foster a thorough understanding and facilitate the adaptation of this Python package. References to the algorithms that are employed or adapted are presented as mentioned above.\nShould there be any omissions in the cited references that are significantly related to the content discussed herein, we would be immensely grateful to be informed by our esteemed users. Additionally, we sincerely apologize for any imperfections that may exist within this manual."
  }
]